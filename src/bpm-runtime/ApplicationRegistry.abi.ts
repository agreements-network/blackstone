//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module ApplicationRegistry {
    export const contactName = "ApplicationRegistry";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"applicationId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"accessPointId","type":"bytes32"},{"indexed":false,"internalType":"uint8","name":"dataType","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"direction","type":"uint8"}],"name":"LogApplicationAccessPointCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"applicationId","type":"bytes32"},{"indexed":false,"internalType":"uint8","name":"applicationType","type":"uint8"},{"indexed":false,"internalType":"address","name":"location","type":"address"},{"indexed":false,"internalType":"bytes4","name":"method","type":"bytes4"},{"indexed":false,"internalType":"bytes32","name":"webForm","type":"bytes32"}],"name":"LogApplicationCreation","type":"event"},{"constant":true,"inputs":[],"name":"DEFAULT_COMPLETION_FUNCTION","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_Upgradeable","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_APPLICATIONS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_APPLICATION_ACCESS_POINTS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"bytes32","name":"_accessPointId","type":"bytes32"},{"internalType":"uint8","name":"_dataType","type":"uint8"},{"internalType":"enum BpmModel.Direction","name":"_direction","type":"uint8"}],"name":"addAccessPoint","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"enum BpmModel.ApplicationType","name":"_type","type":"uint8"},{"internalType":"address","name":"_location","type":"address"},{"internalType":"bytes4","name":"_function","type":"bytes4"},{"internalType":"bytes32","name":"_webForm","type":"bytes32"}],"name":"addApplication","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getAccessPointAtIndex","outputs":[{"internalType":"bytes32","name":"accessPointId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"bytes32","name":"_accessPointId","type":"bytes32"}],"name":"getAccessPointData","outputs":[{"internalType":"uint8","name":"dataType","type":"uint8"},{"internalType":"enum BpmModel.Direction","name":"direction","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getApplicationAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getApplicationData","outputs":[{"internalType":"uint8","name":"applicationType","type":"uint8"},{"internalType":"address","name":"location","type":"address"},{"internalType":"bytes4","name":"method","type":"bytes4"},{"internalType":"bytes32","name":"webForm","type":"bytes32"},{"internalType":"uint256","name":"accessPointCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getNumberOfAccessPoints","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfApplications","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_successor","type":"address"}],"name":"upgrade","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => unknown;
    const events = { LogApplicationAccessPointCreation: { signature: "E6CD28A5574A35135D11E8D4DBA593166A5980443E10BA70B4B753D4543FCAEC", tagged: (eventId: Buffer, applicationId: Buffer, accessPointId: Buffer, dataType: number, direction: number) => ({ name: "LogApplicationAccessPointCreation", payload: { eventId: eventId, applicationId: applicationId, accessPointId: accessPointId, dataType: dataType, direction: direction } as const } as const) } as const, LogApplicationCreation: { signature: "508C695AB328384FCDBBE37D4484A497A7AA922F6C0239F5FC5CE9D239D6565C", tagged: (eventId: Buffer, applicationId: Buffer, applicationType: number, location: string, method: Buffer, webForm: Buffer) => ({ name: "LogApplicationCreation", payload: { eventId: eventId, applicationId: applicationId, applicationType: applicationType, location: location, method: method, webForm: webForm } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { DEFAULT_COMPLETION_FUNCTION(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).DEFAULT_COMPLETION_FUNCTION();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).DEFAULT_COMPLETION_FUNCTION();
                });
            }, ERC165_ID_Upgradeable(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_Upgradeable();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_Upgradeable();
                });
            }, ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, EVENT_ID_APPLICATIONS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_APPLICATIONS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_APPLICATIONS();
                });
            }, EVENT_ID_APPLICATION_ACCESS_POINTS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_APPLICATION_ACCESS_POINTS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_APPLICATION_ACCESS_POINTS();
                });
            }, addAccessPoint(_id: Buffer, _accessPointId: Buffer, _dataType: number, _direction: number, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addAccessPoint(_id, _accessPointId, _dataType, _direction);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addAccessPoint();
                });
            }, addApplication(_id: Buffer, _type: number, _location: string, _function: Buffer, _webForm: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addApplication(_id, _type, _location, _function, _webForm);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addApplication();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, getAccessPointAtIndex(_id: Buffer, _index: number, call = defaultCall): Promise<{
                accessPointId: Buffer;
            }> {
                const data = encode(client).getAccessPointAtIndex(_id, _index);
                return call<{
                    accessPointId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getAccessPointAtIndex();
                });
            }, getAccessPointData(_id: Buffer, _accessPointId: Buffer, call = defaultCall): Promise<{
                dataType: number;
                direction: number;
            }> {
                const data = encode(client).getAccessPointData(_id, _accessPointId);
                return call<{
                    dataType: number;
                    direction: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getAccessPointData();
                });
            }, getApplicationAtIndex(_idx: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getApplicationAtIndex(_idx);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getApplicationAtIndex();
                });
            }, getApplicationData(_id: Buffer, call = defaultCall): Promise<{
                applicationType: number;
                location: string;
                method: Buffer;
                webForm: Buffer;
                accessPointCount: number;
            }> {
                const data = encode(client).getApplicationData(_id);
                return call<{
                    applicationType: number;
                    location: string;
                    method: Buffer;
                    webForm: Buffer;
                    accessPointCount: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getApplicationData();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getNumberOfAccessPoints(_id: Buffer, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfAccessPoints(_id);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfAccessPoints();
                });
            }, getNumberOfApplications(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfApplications();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfApplications();
                });
            }, upgrade(_successor: string, call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).upgrade(_successor);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).upgrade();
                });
            } } as const, listeners: { LogApplicationAccessPointCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                applicationId: Buffer;
                accessPointId: Buffer;
                dataType: number;
                direction: number;
            }) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown { return client.listen(["E6CD28A5574A35135D11E8D4DBA593166A5980443E10BA70B4B753D4543FCAEC"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.log.data, event?.log.topics).LogApplicationAccessPointCreation()); }, start, end); }, LogApplicationCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                applicationId: Buffer;
                applicationType: number;
                location: string;
                method: Buffer;
                webForm: Buffer;
            }) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown { return client.listen(["508C695AB328384FCDBBE37D4484A497A7AA922F6C0239F5FC5CE9D239D6565C"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.log.data, event?.log.topics).LogApplicationCreation()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        DEFAULT_COMPLETION_FUNCTION: () => { return codec.encodeFunctionData("E72C6737"); },
        ERC165_ID_Upgradeable: () => { return codec.encodeFunctionData("B21C815F"); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        EVENT_ID_APPLICATIONS: () => { return codec.encodeFunctionData("00C4EFA4"); },
        EVENT_ID_APPLICATION_ACCESS_POINTS: () => { return codec.encodeFunctionData("5C646A05"); },
        addAccessPoint: (_id: Buffer, _accessPointId: Buffer, _dataType: number, _direction: number) => { return codec.encodeFunctionData("EFED99B4", _id, _accessPointId, _dataType, _direction); },
        addApplication: (_id: Buffer, _type: number, _location: string, _function: Buffer, _webForm: Buffer) => { return codec.encodeFunctionData("8166B73D", _id, _type, _location, _function, _webForm); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        getAccessPointAtIndex: (_id: Buffer, _index: number) => { return codec.encodeFunctionData("E51D0634", _id, _index); },
        getAccessPointData: (_id: Buffer, _accessPointId: Buffer) => { return codec.encodeFunctionData("E60CED2C", _id, _accessPointId); },
        getApplicationAtIndex: (_idx: number) => { return codec.encodeFunctionData("903E7A15", _idx); },
        getApplicationData: (_id: Buffer) => { return codec.encodeFunctionData("C46DF94E", _id); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getNumberOfAccessPoints: (_id: Buffer) => { return codec.encodeFunctionData("CBD8558E", _id); },
        getNumberOfApplications: () => { return codec.encodeFunctionData("A86DA9B4"); },
        upgrade: (_successor: string) => { return codec.encodeFunctionData("0900F010", _successor); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogApplicationAccessPointCreation: (): {
            eventId: Buffer;
            applicationId: Buffer;
            accessPointId: Buffer;
            dataType: number;
            direction: number;
        } => {
            const [eventId, applicationId, accessPointId, dataType, direction] = codec.decodeEventLog ("E6CD28A5574A35135D11E8D4DBA593166A5980443E10BA70B4B753D4543FCAEC", data, topics);
            return { eventId: eventId, applicationId: applicationId, accessPointId: accessPointId, dataType: dataType, direction: direction };
        },
        LogApplicationCreation: (): {
            eventId: Buffer;
            applicationId: Buffer;
            applicationType: number;
            location: string;
            method: Buffer;
            webForm: Buffer;
        } => {
            const [eventId, applicationId, applicationType, location, method, webForm] = codec.decodeEventLog ("508C695AB328384FCDBBE37D4484A497A7AA922F6C0239F5FC5CE9D239D6565C", data, topics);
            return { eventId: eventId, applicationId: applicationId, applicationType: applicationType, location: location, method: method, webForm: webForm };
        },
        DEFAULT_COMPLETION_FUNCTION: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E72C6737", data); },
        ERC165_ID_Upgradeable: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("B21C815F", data); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        EVENT_ID_APPLICATIONS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("00C4EFA4", data); },
        EVENT_ID_APPLICATION_ACCESS_POINTS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("5C646A05", data); },
        addAccessPoint: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("EFED99B4", data);
            return { error: error };
        },
        addApplication: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("8166B73D", data);
            return { error: error };
        },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        getAccessPointAtIndex: (): {
            accessPointId: Buffer;
        } => {
            const [accessPointId] = codec.decodeFunctionResult ("E51D0634", data);
            return { accessPointId: accessPointId };
        },
        getAccessPointData: (): {
            dataType: number;
            direction: number;
        } => {
            const [dataType, direction] = codec.decodeFunctionResult ("E60CED2C", data);
            return { dataType: dataType, direction: direction };
        },
        getApplicationAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("903E7A15", data); },
        getApplicationData: (): {
            applicationType: number;
            location: string;
            method: Buffer;
            webForm: Buffer;
            accessPointCount: number;
        } => {
            const [applicationType, location, method, webForm, accessPointCount] = codec.decodeFunctionResult ("C46DF94E", data);
            return { applicationType: applicationType, location: location, method: method, webForm: webForm, accessPointCount: accessPointCount };
        },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getNumberOfAccessPoints: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("CBD8558E", data);
            return { size: size };
        },
        getNumberOfApplications: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("A86DA9B4", data);
            return { size: size };
        },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("0900F010", data);
            return { success: success };
        }
    }; };
}