//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module BpmService {
    export const contactName = "BpmService";
    export const abi = '[{"constant":true,"inputs":[],"name":"ERC165_ID_ObjectFactory","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_Upgradeable","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"OBJECT_CLASS_PROCESS_INSTANCE","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_processDefinition","type":"address"},{"internalType":"address","name":"_startedBy","type":"address"},{"internalType":"bytes32","name":"_activityInstanceId","type":"bytes32"}],"name":"createDefaultProcessInstance","outputs":[{"internalType":"contract ProcessInstance","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_pos","type":"uint256"}],"name":"getActivityInstanceAtIndex","outputs":[{"internalType":"bytes32","name":"activityId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_processInstance","type":"address"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getActivityInstanceData","outputs":[{"internalType":"bytes32","name":"activityId","type":"bytes32"},{"internalType":"uint256","name":"created","type":"uint256"},{"internalType":"uint256","name":"completed","type":"uint256"},{"internalType":"address","name":"performer","type":"address"},{"internalType":"address","name":"completedBy","type":"address"},{"internalType":"uint8","name":"state","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_processInstance","type":"address"},{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"getAddressScopeDetails","outputs":[{"internalType":"address","name":"keyAddress","type":"address"},{"internalType":"bytes32","name":"keyContext","type":"bytes32"},{"internalType":"bytes32","name":"fixedScope","type":"bytes32"},{"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"internalType":"address","name":"dataStorage","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_processInstance","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getAddressScopeKeyAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getApplicationRegistry","outputs":[{"internalType":"contract ApplicationRegistry","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getBpmServiceDb","outputs":[{"internalType":"contract BpmServiceDb","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getNumberOfActivityInstances","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_processInstance","type":"address"}],"name":"getNumberOfAddressScopes","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getNumberOfProcessData","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfProcessInstances","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_pos","type":"uint256"}],"name":"getProcessDataAtIndex","outputs":[{"internalType":"bytes32","name":"dataId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_dataId","type":"bytes32"}],"name":"getProcessDataDetails","outputs":[{"internalType":"uint256","name":"uintValue","type":"uint256"},{"internalType":"int256","name":"intValue","type":"int256"},{"internalType":"bytes32","name":"bytes32Value","type":"bytes32"},{"internalType":"address","name":"addressValue","type":"address"},{"internalType":"bool","name":"boolValue","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_pos","type":"uint256"}],"name":"getProcessInstanceAtIndex","outputs":[{"internalType":"address","name":"processInstanceAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getProcessInstanceData","outputs":[{"internalType":"address","name":"processDefinition","type":"address"},{"internalType":"uint8","name":"state","type":"uint8"},{"internalType":"address","name":"startedBy","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_aiId","type":"bytes32"}],"name":"getProcessInstanceForActivity","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getProcessModelRepository","outputs":[{"internalType":"contract ProcessModelRepository","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_processDefinition","type":"address"},{"internalType":"bytes32","name":"_activityInstanceId","type":"bytes32"}],"name":"startProcess","outputs":[{"internalType":"uint256","name":"error","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_modelId","type":"bytes32"},{"internalType":"bytes32","name":"_processDefinitionId","type":"bytes32"},{"internalType":"bytes32","name":"_activityInstanceId","type":"bytes32"}],"name":"startProcessFromRepository","outputs":[{"internalType":"uint256","name":"error","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract ProcessInstance","name":"_pi","type":"address"}],"name":"startProcessInstance","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_successor","type":"address"}],"name":"upgrade","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { ERC165_ID_ObjectFactory(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_ObjectFactory();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_ObjectFactory();
                });
            }, ERC165_ID_Upgradeable(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_Upgradeable();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_Upgradeable();
                });
            }, ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, OBJECT_CLASS_PROCESS_INSTANCE(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).OBJECT_CLASS_PROCESS_INSTANCE();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).OBJECT_CLASS_PROCESS_INSTANCE();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, createDefaultProcessInstance(_processDefinition: string, _startedBy: string, _activityInstanceId: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).createDefaultProcessInstance(_processDefinition, _startedBy, _activityInstanceId);
                return call<[
                    string
                ]>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createDefaultProcessInstance();
                });
            }, getActivityInstanceAtIndex(_address: string, _pos: number, call = defaultCall): Promise<{
                activityId: Buffer;
            }> {
                const data = encode(client).getActivityInstanceAtIndex(_address, _pos);
                return call<{
                    activityId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityInstanceAtIndex();
                });
            }, getActivityInstanceData(_processInstance: string, _id: Buffer, call = defaultCall): Promise<{
                activityId: Buffer;
                created: number;
                completed: number;
                performer: string;
                completedBy: string;
                state: number;
            }> {
                const data = encode(client).getActivityInstanceData(_processInstance, _id);
                return call<{
                    activityId: Buffer;
                    created: number;
                    completed: number;
                    performer: string;
                    completedBy: string;
                    state: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityInstanceData();
                });
            }, getAddressScopeDetails(_processInstance: string, _key: Buffer, call = defaultCall): Promise<{
                keyAddress: string;
                keyContext: Buffer;
                fixedScope: Buffer;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }> {
                const data = encode(client).getAddressScopeDetails(_processInstance, _key);
                return call<{
                    keyAddress: string;
                    keyContext: Buffer;
                    fixedScope: Buffer;
                    dataPath: Buffer;
                    dataStorageId: Buffer;
                    dataStorage: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getAddressScopeDetails();
                });
            }, getAddressScopeKeyAtIndex(_processInstance: string, _index: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getAddressScopeKeyAtIndex(_processInstance, _index);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getAddressScopeKeyAtIndex();
                });
            }, getApplicationRegistry(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getApplicationRegistry();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getApplicationRegistry();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getBpmServiceDb(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getBpmServiceDb();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getBpmServiceDb();
                });
            }, getNumberOfActivityInstances(_address: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfActivityInstances(_address);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfActivityInstances();
                });
            }, getNumberOfAddressScopes(_processInstance: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfAddressScopes(_processInstance);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfAddressScopes();
                });
            }, getNumberOfProcessData(_address: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfProcessData(_address);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfProcessData();
                });
            }, getNumberOfProcessInstances(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfProcessInstances();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfProcessInstances();
                });
            }, getProcessDataAtIndex(_address: string, _pos: number, call = defaultCall): Promise<{
                dataId: Buffer;
            }> {
                const data = encode(client).getProcessDataAtIndex(_address, _pos);
                return call<{
                    dataId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDataAtIndex();
                });
            }, getProcessDataDetails(_address: string, _dataId: Buffer, call = defaultCall): Promise<{
                uintValue: number;
                intValue: number;
                bytes32Value: Buffer;
                addressValue: string;
                boolValue: boolean;
            }> {
                const data = encode(client).getProcessDataDetails(_address, _dataId);
                return call<{
                    uintValue: number;
                    intValue: number;
                    bytes32Value: Buffer;
                    addressValue: string;
                    boolValue: boolean;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDataDetails();
                });
            }, getProcessInstanceAtIndex(_pos: number, call = defaultCall): Promise<{
                processInstanceAddress: string;
            }> {
                const data = encode(client).getProcessInstanceAtIndex(_pos);
                return call<{
                    processInstanceAddress: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessInstanceAtIndex();
                });
            }, getProcessInstanceData(_address: string, call = defaultCall): Promise<{
                processDefinition: string;
                state: number;
                startedBy: string;
            }> {
                const data = encode(client).getProcessInstanceData(_address);
                return call<{
                    processDefinition: string;
                    state: number;
                    startedBy: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessInstanceData();
                });
            }, getProcessInstanceForActivity(_aiId: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessInstanceForActivity(_aiId);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessInstanceForActivity();
                });
            }, getProcessModelRepository(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessModelRepository();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessModelRepository();
                });
            }, startProcess(_processDefinition: string, _activityInstanceId: Buffer, call = defaultCall): Promise<[
                number,
                string
            ]> {
                const data = encode(client).startProcess(_processDefinition, _activityInstanceId);
                return call<[
                    number,
                    string
                ]>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).startProcess();
                });
            }, startProcessFromRepository(_modelId: Buffer, _processDefinitionId: Buffer, _activityInstanceId: Buffer, call = defaultCall): Promise<[
                number,
                string
            ]> {
                const data = encode(client).startProcessFromRepository(_modelId, _processDefinitionId, _activityInstanceId);
                return call<[
                    number,
                    string
                ]>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).startProcessFromRepository();
                });
            }, startProcessInstance(_pi: string, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).startProcessInstance(_pi);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).startProcessInstance();
                });
            }, upgrade(_successor: string, call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).upgrade(_successor);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).upgrade();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_ObjectFactory: () => { return codec.encodeFunctionData("54AF67B7"); },
        ERC165_ID_Upgradeable: () => { return codec.encodeFunctionData("B21C815F"); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        OBJECT_CLASS_PROCESS_INSTANCE: () => { return codec.encodeFunctionData("16CE4DBB"); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        createDefaultProcessInstance: (_processDefinition: string, _startedBy: string, _activityInstanceId: Buffer) => { return codec.encodeFunctionData("1958AA55", _processDefinition, _startedBy, _activityInstanceId); },
        getActivityInstanceAtIndex: (_address: string, _pos: number) => { return codec.encodeFunctionData("8C57C3CC", _address, _pos); },
        getActivityInstanceData: (_processInstance: string, _id: Buffer) => { return codec.encodeFunctionData("3E0560AE", _processInstance, _id); },
        getAddressScopeDetails: (_processInstance: string, _key: Buffer) => { return codec.encodeFunctionData("9561AA32", _processInstance, _key); },
        getAddressScopeKeyAtIndex: (_processInstance: string, _index: number) => { return codec.encodeFunctionData("D10ECE59", _processInstance, _index); },
        getApplicationRegistry: () => { return codec.encodeFunctionData("BF172029"); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getBpmServiceDb: () => { return codec.encodeFunctionData("879B4748"); },
        getNumberOfActivityInstances: (_address: string) => { return codec.encodeFunctionData("1B645F63", _address); },
        getNumberOfAddressScopes: (_processInstance: string) => { return codec.encodeFunctionData("8CBD319A", _processInstance); },
        getNumberOfProcessData: (_address: string) => { return codec.encodeFunctionData("1FF4729E", _address); },
        getNumberOfProcessInstances: () => { return codec.encodeFunctionData("57F31A6C"); },
        getProcessDataAtIndex: (_address: string, _pos: number) => { return codec.encodeFunctionData("2BAA38C3", _address, _pos); },
        getProcessDataDetails: (_address: string, _dataId: Buffer) => { return codec.encodeFunctionData("E18FD821", _address, _dataId); },
        getProcessInstanceAtIndex: (_pos: number) => { return codec.encodeFunctionData("20CC0184", _pos); },
        getProcessInstanceData: (_address: string) => { return codec.encodeFunctionData("E3234C71", _address); },
        getProcessInstanceForActivity: (_aiId: Buffer) => { return codec.encodeFunctionData("9CA651F8", _aiId); },
        getProcessModelRepository: () => { return codec.encodeFunctionData("F97AD99E"); },
        startProcess: (_processDefinition: string, _activityInstanceId: Buffer) => { return codec.encodeFunctionData("1CF5A4C9", _processDefinition, _activityInstanceId); },
        startProcessFromRepository: (_modelId: Buffer, _processDefinitionId: Buffer, _activityInstanceId: Buffer) => { return codec.encodeFunctionData("B82A6E38", _modelId, _processDefinitionId, _activityInstanceId); },
        startProcessInstance: (_pi: string) => { return codec.encodeFunctionData("45D31DA9", _pi); },
        upgrade: (_successor: string) => { return codec.encodeFunctionData("0900F010", _successor); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_ObjectFactory: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("54AF67B7", data); },
        ERC165_ID_Upgradeable: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("B21C815F", data); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        OBJECT_CLASS_PROCESS_INSTANCE: (): [
            string
        ] => { return codec.decodeFunctionResult ("16CE4DBB", data); },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        createDefaultProcessInstance: (): [
            string
        ] => { return codec.decodeFunctionResult ("1958AA55", data); },
        getActivityInstanceAtIndex: (): {
            activityId: Buffer;
        } => {
            const [activityId] = codec.decodeFunctionResult ("8C57C3CC", data);
            return { activityId: activityId };
        },
        getActivityInstanceData: (): {
            activityId: Buffer;
            created: number;
            completed: number;
            performer: string;
            completedBy: string;
            state: number;
        } => {
            const [activityId, created, completed, performer, completedBy, state] = codec.decodeFunctionResult ("3E0560AE", data);
            return { activityId: activityId, created: created, completed: completed, performer: performer, completedBy: completedBy, state: state };
        },
        getAddressScopeDetails: (): {
            keyAddress: string;
            keyContext: Buffer;
            fixedScope: Buffer;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [keyAddress, keyContext, fixedScope, dataPath, dataStorageId, dataStorage] = codec.decodeFunctionResult ("9561AA32", data);
            return { keyAddress: keyAddress, keyContext: keyContext, fixedScope: fixedScope, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getAddressScopeKeyAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("D10ECE59", data); },
        getApplicationRegistry: (): [
            string
        ] => { return codec.decodeFunctionResult ("BF172029", data); },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getBpmServiceDb: (): [
            string
        ] => { return codec.decodeFunctionResult ("879B4748", data); },
        getNumberOfActivityInstances: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("1B645F63", data);
            return { size: size };
        },
        getNumberOfAddressScopes: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("8CBD319A", data);
            return { size: size };
        },
        getNumberOfProcessData: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("1FF4729E", data);
            return { size: size };
        },
        getNumberOfProcessInstances: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("57F31A6C", data);
            return { size: size };
        },
        getProcessDataAtIndex: (): {
            dataId: Buffer;
        } => {
            const [dataId] = codec.decodeFunctionResult ("2BAA38C3", data);
            return { dataId: dataId };
        },
        getProcessDataDetails: (): {
            uintValue: number;
            intValue: number;
            bytes32Value: Buffer;
            addressValue: string;
            boolValue: boolean;
        } => {
            const [uintValue, intValue, bytes32Value, addressValue, boolValue] = codec.decodeFunctionResult ("E18FD821", data);
            return { uintValue: uintValue, intValue: intValue, bytes32Value: bytes32Value, addressValue: addressValue, boolValue: boolValue };
        },
        getProcessInstanceAtIndex: (): {
            processInstanceAddress: string;
        } => {
            const [processInstanceAddress] = codec.decodeFunctionResult ("20CC0184", data);
            return { processInstanceAddress: processInstanceAddress };
        },
        getProcessInstanceData: (): {
            processDefinition: string;
            state: number;
            startedBy: string;
        } => {
            const [processDefinition, state, startedBy] = codec.decodeFunctionResult ("E3234C71", data);
            return { processDefinition: processDefinition, state: state, startedBy: startedBy };
        },
        getProcessInstanceForActivity: (): [
            string
        ] => { return codec.decodeFunctionResult ("9CA651F8", data); },
        getProcessModelRepository: (): [
            string
        ] => { return codec.decodeFunctionResult ("F97AD99E", data); },
        startProcess: (): [
            number,
            string
        ] => { return codec.decodeFunctionResult ("1CF5A4C9", data); },
        startProcessFromRepository: (): [
            number,
            string
        ] => { return codec.decodeFunctionResult ("B82A6E38", data); },
        startProcessInstance: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("45D31DA9", data);
            return { error: error };
        },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("0900F010", data);
            return { success: success };
        }
    }; };
}