//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module DOUG {
    export const contactName = "DOUG";
    export const abi = '[{"constant":false,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"address","name":"_address","type":"address"}],"name":"deploy","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"deployVersion","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"_id","type":"string"}],"name":"lookup","outputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"lookupVersion","outputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"address","name":"_address","type":"address"}],"name":"register","outputs":[{"internalType":"uint8[3]","name":"version","type":"uint8[3]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_id","type":"string"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"registerVersion","outputs":[{"internalType":"uint8[3]","name":"version","type":"uint8[3]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { deploy(_id: string, _address: string, call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).deploy(_id, _address);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).deploy();
                });
            }, deployVersion(_id: string, _address: string, _version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).deployVersion(_id, _address, _version);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).deployVersion();
                });
            }, lookup(_id: string, call = defaultCall): Promise<{
                contractAddress: string;
            }> {
                const data = encode(client).lookup(_id);
                return call<{
                    contractAddress: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).lookup();
                });
            }, lookupVersion(_id: string, _version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                contractAddress: string;
            }> {
                const data = encode(client).lookupVersion(_id, _version);
                return call<{
                    contractAddress: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).lookupVersion();
                });
            }, register(_id: string, _address: string, call = defaultCall): Promise<{
                version: [
                    number,
                    number,
                    number
                ];
            }> {
                const data = encode(client).register(_id, _address);
                return call<{
                    version: [
                        number,
                        number,
                        number
                    ];
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).register();
                });
            }, registerVersion(_id: string, _address: string, _version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                version: [
                    number,
                    number,
                    number
                ];
            }> {
                const data = encode(client).registerVersion(_id, _address, _version);
                return call<{
                    version: [
                        number,
                        number,
                        number
                    ];
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).registerVersion();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        deploy: (_id: string, _address: string) => { return codec.encodeFunctionData("58CD1DFA", _id, _address); },
        deployVersion: (_id: string, _address: string, _version: [
            number,
            number,
            number
        ]) => { return codec.encodeFunctionData("A428E214", _id, _address, _version); },
        lookup: (_id: string) => { return codec.encodeFunctionData("F67187AC", _id); },
        lookupVersion: (_id: string, _version: [
            number,
            number,
            number
        ]) => { return codec.encodeFunctionData("3E012C90", _id, _version); },
        register: (_id: string, _address: string) => { return codec.encodeFunctionData("1E59C529", _id, _address); },
        registerVersion: (_id: string, _address: string, _version: [
            number,
            number,
            number
        ]) => { return codec.encodeFunctionData("ECB9AEE5", _id, _address, _version); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        deploy: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("58CD1DFA", data);
            return { success: success };
        },
        deployVersion: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("A428E214", data);
            return { success: success };
        },
        lookup: (): {
            contractAddress: string;
        } => {
            const [contractAddress] = codec.decodeFunctionResult ("F67187AC", data);
            return { contractAddress: contractAddress };
        },
        lookupVersion: (): {
            contractAddress: string;
        } => {
            const [contractAddress] = codec.decodeFunctionResult ("3E012C90", data);
            return { contractAddress: contractAddress };
        },
        register: (): {
            version: [
                number,
                number,
                number
            ];
        } => {
            const [version] = codec.decodeFunctionResult ("1E59C529", data);
            return { version: version };
        },
        registerVersion: (): {
            version: [
                number,
                number,
                number
            ];
        } => {
            const [version] = codec.decodeFunctionResult ("ECB9AEE5", data);
            return { version: version };
        }
    }; };
}