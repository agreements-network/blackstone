//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CallTx, ContractCodec, Signal, Event, EventStream, listenerFor, Result } from "@hyperledger/burrow";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(returnData);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module ProcessModel {
    export const contactName = "ProcessModel";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"modelAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"versionMajor","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"versionMinor","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"versionPatch","type":"uint256"},{"indexed":false,"internalType":"address","name":"author","type":"address"},{"indexed":false,"internalType":"bool","name":"isPrivate","type":"bool"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"string","name":"modelFileReference","type":"string"}],"name":"LogProcessModelCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"indexed":false,"internalType":"address","name":"modelAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"parameterType","type":"uint256"}],"name":"LogProcessModelDataCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"modelAddress","type":"address"},{"indexed":false,"internalType":"string","name":"modelFileReference","type":"string"}],"name":"LogProcessModelFileReferenceUpdate","type":"event"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_PROCESS_DEFINITIONS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_PROCESS_MODELS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_PROCESS_MODEL_DATA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"OBJECT_CLASS_PROCESS_DEFINITION","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_dataId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"enum DataTypes.ParameterType","name":"_parameterType","type":"uint8"}],"name":"addDataDefinition","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"}],"name":"addParticipant","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_interfaceId","type":"bytes32"}],"name":"addProcessInterface","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_artifactsFinder","type":"address"}],"name":"createProcessDefinition","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAuthor","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"}],"name":"getConditionalParticipant","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getDataDefinitionDetailsAtIndex","outputs":[{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"uint256","name":"parameterType","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getModelFileReference","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfDataDefinitions","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfParticipants","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfProcessDefinitions","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfProcessInterfaces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getParticipantAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getParticipantData","outputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"internalType":"address","name":"dataStorage","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getProcessDefinition","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getProcessDefinitionAtIndex","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"hasParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_interfaceId","type":"bytes32"}],"name":"hasProcessInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"},{"internalType":"address","name":"_author","type":"address"},{"internalType":"bool","name":"_isPrivate","type":"bool"},{"internalType":"string","name":"_modelFileReference","type":"string"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isPrivate","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"_modelFileReference","type":"string"}],"name":"setModelFileReference","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => EventStream;
    const events = { LogProcessModelCreation: { signature: "2DA2152DF872B20ECBAF3B6BB469E4212093286B55955B935B270357AD91E001", tagged: (eventId: Buffer, modelAddress: string, id: Buffer, versionMajor: number, versionMinor: number, versionPatch: number, author: string, isPrivate: boolean, active: boolean, modelFileReference: string) => ({ name: "LogProcessModelCreation", payload: { eventId: eventId, modelAddress: modelAddress, id: id, versionMajor: versionMajor, versionMinor: versionMinor, versionPatch: versionPatch, author: author, isPrivate: isPrivate, active: active, modelFileReference: modelFileReference } as const } as const) } as const, LogProcessModelDataCreation: { signature: "1C8C663AB878CA9FDC7DB26A46A7DCF655CA7BBA1E465D375B58CAD7F9ACB16D", tagged: (eventId: Buffer, dataId: Buffer, dataPath: Buffer, modelAddress: string, parameterType: number) => ({ name: "LogProcessModelDataCreation", payload: { eventId: eventId, dataId: dataId, dataPath: dataPath, modelAddress: modelAddress, parameterType: parameterType } as const } as const) } as const, LogProcessModelFileReferenceUpdate: { signature: "8EDBE78B5566AA795A0BF1299D6FB25E7137F2ACA9F74A3E15A27D50AFCE33F5", tagged: (eventId: Buffer, modelAddress: string, modelFileReference: string) => ({ name: "LogProcessModelFileReferenceUpdate", payload: { eventId: eventId, modelAddress: modelAddress, modelFileReference: modelFileReference } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, EVENT_ID_PROCESS_DEFINITIONS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_PROCESS_DEFINITIONS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_PROCESS_DEFINITIONS();
                });
            }, EVENT_ID_PROCESS_MODELS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_PROCESS_MODELS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_PROCESS_MODELS();
                });
            }, EVENT_ID_PROCESS_MODEL_DATA(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_PROCESS_MODEL_DATA();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_PROCESS_MODEL_DATA();
                });
            }, OBJECT_CLASS_PROCESS_DEFINITION(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).OBJECT_CLASS_PROCESS_DEFINITION();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).OBJECT_CLASS_PROCESS_DEFINITION();
                });
            }, addDataDefinition(_dataId: Buffer, _dataPath: Buffer, _parameterType: number, call = defaultCall): Promise<void> {
                const data = encode(client).addDataDefinition(_dataId, _dataPath, _parameterType);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addDataDefinition();
                });
            }, addParticipant(_id: Buffer, _account: string, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addParticipant(_id, _account, _dataPath, _dataStorageId, _dataStorage);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addParticipant();
                });
            }, addProcessInterface(_interfaceId: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addProcessInterface(_interfaceId);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addProcessInterface();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, compareVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareVersion[0]();
                });
            }, compareVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareVersion[1]();
                });
            }, createProcessDefinition(_id: Buffer, _artifactsFinder: string, call = defaultCall): Promise<{
                newAddress: string;
            }> {
                const data = encode(client).createProcessDefinition(_id, _artifactsFinder);
                return call<{
                    newAddress: string;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createProcessDefinition();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getAuthor(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getAuthor();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getAuthor();
                });
            }, getConditionalParticipant(_dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getConditionalParticipant(_dataPath, _dataStorageId, _dataStorage);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getConditionalParticipant();
                });
            }, getDataDefinitionDetailsAtIndex(_index: number, call = defaultCall): Promise<{
                key: Buffer;
                parameterType: number;
            }> {
                const data = encode(client).getDataDefinitionDetailsAtIndex(_index);
                return call<{
                    key: Buffer;
                    parameterType: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getDataDefinitionDetailsAtIndex();
                });
            }, getId(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getId();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getId();
                });
            }, getModelFileReference(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getModelFileReference();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModelFileReference();
                });
            }, getNumberOfDataDefinitions(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getNumberOfDataDefinitions();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfDataDefinitions();
                });
            }, getNumberOfParticipants(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfParticipants();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfParticipants();
                });
            }, getNumberOfProcessDefinitions(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getNumberOfProcessDefinitions();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfProcessDefinitions();
                });
            }, getNumberOfProcessInterfaces(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getNumberOfProcessInterfaces();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfProcessInterfaces();
                });
            }, getParticipantAtIndex(_idx: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getParticipantAtIndex(_idx);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getParticipantAtIndex();
                });
            }, getParticipantData(_id: Buffer, call = defaultCall): Promise<{
                account: string;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }> {
                const data = encode(client).getParticipantData(_id);
                return call<{
                    account: string;
                    dataPath: Buffer;
                    dataStorageId: Buffer;
                    dataStorage: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getParticipantData();
                });
            }, getProcessDefinition(_id: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessDefinition(_id);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDefinition();
                });
            }, getProcessDefinitionAtIndex(_idx: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessDefinitionAtIndex(_idx);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDefinitionAtIndex();
                });
            }, getVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getVersion();
                });
            }, getVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getVersionMajor();
                });
            }, getVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getVersionMinor();
                });
            }, getVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getVersionPatch();
                });
            }, hasParticipant(_id: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasParticipant(_id);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasParticipant();
                });
            }, hasProcessInterface(_interfaceId: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasProcessInterface(_interfaceId);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasProcessInterface();
                });
            }, initialize(_id: Buffer, _version: [
                number,
                number,
                number
            ], _author: string, _isPrivate: boolean, _modelFileReference: string, call = defaultCall): Promise<void> {
                const data = encode(client).initialize(_id, _version, _author, _isPrivate, _modelFileReference);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).initialize();
                });
            }, isPrivate(call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).isPrivate();
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).isPrivate();
                });
            }, setModelFileReference(_modelFileReference: string, call = defaultCall): Promise<void> {
                const data = encode(client).setModelFileReference(_modelFileReference);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).setModelFileReference();
                });
            } } as const, listeners: { LogProcessModelCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                modelAddress: string;
                id: Buffer;
                versionMajor: number;
                versionMinor: number;
                versionPatch: number;
                author: string;
                isPrivate: boolean;
                active: boolean;
                modelFileReference: string;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["2DA2152DF872B20ECBAF3B6BB469E4212093286B55955B935B270357AD91E001"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogProcessModelCreation()); }, start, end); }, LogProcessModelDataCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                dataId: Buffer;
                dataPath: Buffer;
                modelAddress: string;
                parameterType: number;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["1C8C663AB878CA9FDC7DB26A46A7DCF655CA7BBA1E465D375B58CAD7F9ACB16D"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogProcessModelDataCreation()); }, start, end); }, LogProcessModelFileReferenceUpdate(callback: (err?: Error, event?: {
                eventId: Buffer;
                modelAddress: string;
                modelFileReference: string;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["8EDBE78B5566AA795A0BF1299D6FB25E7137F2ACA9F74A3E15A27D50AFCE33F5"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogProcessModelFileReferenceUpdate()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        EVENT_ID_PROCESS_DEFINITIONS: () => { return codec.encodeFunctionData("BA840F64"); },
        EVENT_ID_PROCESS_MODELS: () => { return codec.encodeFunctionData("429814CD"); },
        EVENT_ID_PROCESS_MODEL_DATA: () => { return codec.encodeFunctionData("15FCB649"); },
        OBJECT_CLASS_PROCESS_DEFINITION: () => { return codec.encodeFunctionData("2B50AA2B"); },
        addDataDefinition: (_dataId: Buffer, _dataPath: Buffer, _parameterType: number) => { return codec.encodeFunctionData("6377C4E2", _dataId, _dataPath, _parameterType); },
        addParticipant: (_id: Buffer, _account: string, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) => { return codec.encodeFunctionData("E5637B2F", _id, _account, _dataPath, _dataStorageId, _dataStorage); },
        addProcessInterface: (_interfaceId: Buffer) => { return codec.encodeFunctionData("AF9BFED0", _interfaceId); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        compareVersion: [(_other: string) => { return codec.encodeFunctionData("AF9F25A5", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("BB7D8C25", _version); }] as const,
        createProcessDefinition: (_id: Buffer, _artifactsFinder: string) => { return codec.encodeFunctionData("EF663E88", _id, _artifactsFinder); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getAuthor: () => { return codec.encodeFunctionData("A5FAA125"); },
        getConditionalParticipant: (_dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) => { return codec.encodeFunctionData("FD735B14", _dataPath, _dataStorageId, _dataStorage); },
        getDataDefinitionDetailsAtIndex: (_index: number) => { return codec.encodeFunctionData("AF23A8D3", _index); },
        getId: () => { return codec.encodeFunctionData("5D1CA631"); },
        getModelFileReference: () => { return codec.encodeFunctionData("093F2AD6"); },
        getNumberOfDataDefinitions: () => { return codec.encodeFunctionData("F4172E7C"); },
        getNumberOfParticipants: () => { return codec.encodeFunctionData("C80C28A2"); },
        getNumberOfProcessDefinitions: () => { return codec.encodeFunctionData("B408F71C"); },
        getNumberOfProcessInterfaces: () => { return codec.encodeFunctionData("7DA706F4"); },
        getParticipantAtIndex: (_idx: number) => { return codec.encodeFunctionData("51EB4554", _idx); },
        getParticipantData: (_id: Buffer) => { return codec.encodeFunctionData("ECD4A335", _id); },
        getProcessDefinition: (_id: Buffer) => { return codec.encodeFunctionData("18D995D5", _id); },
        getProcessDefinitionAtIndex: (_idx: number) => { return codec.encodeFunctionData("DA9D7285", _idx); },
        getVersion: () => { return codec.encodeFunctionData("0D8E6E2C"); },
        getVersionMajor: () => { return codec.encodeFunctionData("0815511B"); },
        getVersionMinor: () => { return codec.encodeFunctionData("93AA73D5"); },
        getVersionPatch: () => { return codec.encodeFunctionData("9AC98F94"); },
        hasParticipant: (_id: Buffer) => { return codec.encodeFunctionData("58F2A46D", _id); },
        hasProcessInterface: (_interfaceId: Buffer) => { return codec.encodeFunctionData("7180F973", _interfaceId); },
        initialize: (_id: Buffer, _version: [
            number,
            number,
            number
        ], _author: string, _isPrivate: boolean, _modelFileReference: string) => { return codec.encodeFunctionData("37E9B161", _id, _version, _author, _isPrivate, _modelFileReference); },
        isPrivate: () => { return codec.encodeFunctionData("FAFF660E"); },
        setModelFileReference: (_modelFileReference: string) => { return codec.encodeFunctionData("03FED10B", _modelFileReference); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogProcessModelCreation: (): {
            eventId: Buffer;
            modelAddress: string;
            id: Buffer;
            versionMajor: number;
            versionMinor: number;
            versionPatch: number;
            author: string;
            isPrivate: boolean;
            active: boolean;
            modelFileReference: string;
        } => {
            const [eventId, modelAddress, id, versionMajor, versionMinor, versionPatch, author, isPrivate, active, modelFileReference] = codec.decodeEventLog ("2DA2152DF872B20ECBAF3B6BB469E4212093286B55955B935B270357AD91E001", data, topics);
            return { eventId: eventId, modelAddress: modelAddress, id: id, versionMajor: versionMajor, versionMinor: versionMinor, versionPatch: versionPatch, author: author, isPrivate: isPrivate, active: active, modelFileReference: modelFileReference };
        },
        LogProcessModelDataCreation: (): {
            eventId: Buffer;
            dataId: Buffer;
            dataPath: Buffer;
            modelAddress: string;
            parameterType: number;
        } => {
            const [eventId, dataId, dataPath, modelAddress, parameterType] = codec.decodeEventLog ("1C8C663AB878CA9FDC7DB26A46A7DCF655CA7BBA1E465D375B58CAD7F9ACB16D", data, topics);
            return { eventId: eventId, dataId: dataId, dataPath: dataPath, modelAddress: modelAddress, parameterType: parameterType };
        },
        LogProcessModelFileReferenceUpdate: (): {
            eventId: Buffer;
            modelAddress: string;
            modelFileReference: string;
        } => {
            const [eventId, modelAddress, modelFileReference] = codec.decodeEventLog ("8EDBE78B5566AA795A0BF1299D6FB25E7137F2ACA9F74A3E15A27D50AFCE33F5", data, topics);
            return { eventId: eventId, modelAddress: modelAddress, modelFileReference: modelFileReference };
        },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        EVENT_ID_PROCESS_DEFINITIONS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("BA840F64", data); },
        EVENT_ID_PROCESS_MODELS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("429814CD", data); },
        EVENT_ID_PROCESS_MODEL_DATA: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("15FCB649", data); },
        OBJECT_CLASS_PROCESS_DEFINITION: (): [
            string
        ] => { return codec.decodeFunctionResult ("2B50AA2B", data); },
        addDataDefinition: (): void => { return; },
        addParticipant: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("E5637B2F", data);
            return { error: error };
        },
        addProcessInterface: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("AF9BFED0", data);
            return { error: error };
        },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        compareVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("AF9F25A5", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("BB7D8C25", data);
                return { result: result };
            }] as const,
        createProcessDefinition: (): {
            newAddress: string;
        } => {
            const [newAddress] = codec.decodeFunctionResult ("EF663E88", data);
            return { newAddress: newAddress };
        },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getAuthor: (): [
            string
        ] => { return codec.decodeFunctionResult ("A5FAA125", data); },
        getConditionalParticipant: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("FD735B14", data); },
        getDataDefinitionDetailsAtIndex: (): {
            key: Buffer;
            parameterType: number;
        } => {
            const [key, parameterType] = codec.decodeFunctionResult ("AF23A8D3", data);
            return { key: key, parameterType: parameterType };
        },
        getId: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("5D1CA631", data); },
        getModelFileReference: (): [
            string
        ] => { return codec.decodeFunctionResult ("093F2AD6", data); },
        getNumberOfDataDefinitions: (): [
            number
        ] => { return codec.decodeFunctionResult ("F4172E7C", data); },
        getNumberOfParticipants: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("C80C28A2", data);
            return { size: size };
        },
        getNumberOfProcessDefinitions: (): [
            number
        ] => { return codec.decodeFunctionResult ("B408F71C", data); },
        getNumberOfProcessInterfaces: (): [
            number
        ] => { return codec.decodeFunctionResult ("7DA706F4", data); },
        getParticipantAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("51EB4554", data); },
        getParticipantData: (): {
            account: string;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [account, dataPath, dataStorageId, dataStorage] = codec.decodeFunctionResult ("ECD4A335", data);
            return { account: account, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getProcessDefinition: (): [
            string
        ] => { return codec.decodeFunctionResult ("18D995D5", data); },
        getProcessDefinitionAtIndex: (): [
            string
        ] => { return codec.decodeFunctionResult ("DA9D7285", data); },
        getVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("0D8E6E2C", data); },
        getVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("0815511B", data); },
        getVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("93AA73D5", data); },
        getVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("9AC98F94", data); },
        hasParticipant: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("58F2A46D", data); },
        hasProcessInterface: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("7180F973", data); },
        initialize: (): void => { return; },
        isPrivate: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("FAFF660E", data); },
        setModelFileReference: (): void => { return; }
    }; };
}