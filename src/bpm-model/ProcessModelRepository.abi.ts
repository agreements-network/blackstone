//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module ProcessModelRepository {
    export const contactName = "ProcessModelRepository";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"modelAddress","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"LogProcessModelActivation","type":"event"},{"constant":true,"inputs":[],"name":"ERC165_ID_ObjectFactory","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_Upgradeable","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"OBJECT_CLASS_PROCESS_DEFINITION","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"OBJECT_CLASS_PROCESS_MODEL","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"contract ProcessModel","name":"_model","type":"address"}],"name":"activateModel","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_processModelAddress","type":"address"},{"internalType":"bytes32","name":"_processDefinitionId","type":"bytes32"}],"name":"createProcessDefinition","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"},{"internalType":"address","name":"_author","type":"address"},{"internalType":"bool","name":"_isPrivate","type":"bool"},{"internalType":"string","name":"_modelFileReference","type":"string"}],"name":"createProcessModel","outputs":[{"internalType":"uint256","name":"error","type":"uint256"},{"internalType":"address","name":"modelAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"address","name":"_processDefinition","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getActivityAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"address","name":"_processDefinition","type":"address"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getActivityData","outputs":[{"internalType":"uint8","name":"activityType","type":"uint8"},{"internalType":"uint8","name":"taskType","type":"uint8"},{"internalType":"uint8","name":"taskBehavior","type":"uint8"},{"internalType":"bytes32","name":"assignee","type":"bytes32"},{"internalType":"bool","name":"multiInstance","type":"bool"},{"internalType":"bytes32","name":"application","type":"bytes32"},{"internalType":"bytes32","name":"subProcessModelId","type":"bytes32"},{"internalType":"bytes32","name":"subProcessDefinitionId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getModel","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getModelAtIndex","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"getModelByVersion","outputs":[{"internalType":"uint256","name":"error","type":"uint256"},{"internalType":"address","name":"modelAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"address","name":"_processDefinition","type":"address"}],"name":"getNumberOfActivities","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfModels","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"}],"name":"getNumberOfProcessDefinitions","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_modelId","type":"bytes32"},{"internalType":"bytes32","name":"_processId","type":"bytes32"}],"name":"getProcessDefinition","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getProcessDefinitionAtIndex","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_successor","type":"address"}],"name":"upgrade","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => unknown;
    const events = { LogProcessModelActivation: { signature: "84FA9B33B792AA71C870495971AA5FF9E7E3E832D76F36BB60D89D2AD5551917", tagged: (eventId: Buffer, modelAddress: string, active: boolean) => ({ name: "LogProcessModelActivation", payload: { eventId: eventId, modelAddress: modelAddress, active: active } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { ERC165_ID_ObjectFactory(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_ObjectFactory();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_ObjectFactory();
                });
            }, ERC165_ID_Upgradeable(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_Upgradeable();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_Upgradeable();
                });
            }, ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, OBJECT_CLASS_PROCESS_DEFINITION(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).OBJECT_CLASS_PROCESS_DEFINITION();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).OBJECT_CLASS_PROCESS_DEFINITION();
                });
            }, OBJECT_CLASS_PROCESS_MODEL(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).OBJECT_CLASS_PROCESS_MODEL();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).OBJECT_CLASS_PROCESS_MODEL();
                });
            }, activateModel(_model: string, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).activateModel(_model);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).activateModel();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, createProcessDefinition(_processModelAddress: string, _processDefinitionId: Buffer, call = defaultCall): Promise<{
                newAddress: string;
            }> {
                const data = encode(client).createProcessDefinition(_processModelAddress, _processDefinitionId);
                return call<{
                    newAddress: string;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createProcessDefinition();
                });
            }, createProcessModel(_id: Buffer, _version: [
                number,
                number,
                number
            ], _author: string, _isPrivate: boolean, _modelFileReference: string, call = defaultCall): Promise<{
                error: number;
                modelAddress: string;
            }> {
                const data = encode(client).createProcessModel(_id, _version, _author, _isPrivate, _modelFileReference);
                return call<{
                    error: number;
                    modelAddress: string;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createProcessModel();
                });
            }, getActivityAtIndex(_model: string, _processDefinition: string, _index: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getActivityAtIndex(_model, _processDefinition, _index);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityAtIndex();
                });
            }, getActivityData(_model: string, _processDefinition: string, _id: Buffer, call = defaultCall): Promise<{
                activityType: number;
                taskType: number;
                taskBehavior: number;
                assignee: Buffer;
                multiInstance: boolean;
                application: Buffer;
                subProcessModelId: Buffer;
                subProcessDefinitionId: Buffer;
            }> {
                const data = encode(client).getActivityData(_model, _processDefinition, _id);
                return call<{
                    activityType: number;
                    taskType: number;
                    taskBehavior: number;
                    assignee: Buffer;
                    multiInstance: boolean;
                    application: Buffer;
                    subProcessModelId: Buffer;
                    subProcessDefinitionId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityData();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getModel(_id: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getModel(_id);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModel();
                });
            }, getModelAtIndex(_idx: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getModelAtIndex(_idx);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModelAtIndex();
                });
            }, getModelByVersion(_id: Buffer, _version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                error: number;
                modelAddress: string;
            }> {
                const data = encode(client).getModelByVersion(_id, _version);
                return call<{
                    error: number;
                    modelAddress: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModelByVersion();
                });
            }, getNumberOfActivities(_model: string, _processDefinition: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfActivities(_model, _processDefinition);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfActivities();
                });
            }, getNumberOfModels(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfModels();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfModels();
                });
            }, getNumberOfProcessDefinitions(_model: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfProcessDefinitions(_model);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfProcessDefinitions();
                });
            }, getProcessDefinition(_modelId: Buffer, _processId: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessDefinition(_modelId, _processId);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDefinition();
                });
            }, getProcessDefinitionAtIndex(_model: string, _idx: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getProcessDefinitionAtIndex(_model, _idx);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getProcessDefinitionAtIndex();
                });
            }, upgrade(_successor: string, call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).upgrade(_successor);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).upgrade();
                });
            } } as const, listeners: { LogProcessModelActivation(callback: (err?: Error, event?: {
                eventId: Buffer;
                modelAddress: string;
                active: boolean;
            }) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown { return client.listen(["84FA9B33B792AA71C870495971AA5FF9E7E3E832D76F36BB60D89D2AD5551917"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.log.data, event?.log.topics).LogProcessModelActivation()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_ObjectFactory: () => { return codec.encodeFunctionData("54AF67B7"); },
        ERC165_ID_Upgradeable: () => { return codec.encodeFunctionData("B21C815F"); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        OBJECT_CLASS_PROCESS_DEFINITION: () => { return codec.encodeFunctionData("2B50AA2B"); },
        OBJECT_CLASS_PROCESS_MODEL: () => { return codec.encodeFunctionData("212718B3"); },
        activateModel: (_model: string) => { return codec.encodeFunctionData("14E0D518", _model); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        createProcessDefinition: (_processModelAddress: string, _processDefinitionId: Buffer) => { return codec.encodeFunctionData("B0DCEEBC", _processModelAddress, _processDefinitionId); },
        createProcessModel: (_id: Buffer, _version: [
            number,
            number,
            number
        ], _author: string, _isPrivate: boolean, _modelFileReference: string) => { return codec.encodeFunctionData("FE2D7895", _id, _version, _author, _isPrivate, _modelFileReference); },
        getActivityAtIndex: (_model: string, _processDefinition: string, _index: number) => { return codec.encodeFunctionData("A73D9874", _model, _processDefinition, _index); },
        getActivityData: (_model: string, _processDefinition: string, _id: Buffer) => { return codec.encodeFunctionData("8F2986CC", _model, _processDefinition, _id); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getModel: (_id: Buffer) => { return codec.encodeFunctionData("21E7C498", _id); },
        getModelAtIndex: (_idx: number) => { return codec.encodeFunctionData("B8CB2516", _idx); },
        getModelByVersion: (_id: Buffer, _version: [
            number,
            number,
            number
        ]) => { return codec.encodeFunctionData("75CD669D", _id, _version); },
        getNumberOfActivities: (_model: string, _processDefinition: string) => { return codec.encodeFunctionData("CA20515E", _model, _processDefinition); },
        getNumberOfModels: () => { return codec.encodeFunctionData("665584A8"); },
        getNumberOfProcessDefinitions: (_model: string) => { return codec.encodeFunctionData("B08E081D", _model); },
        getProcessDefinition: (_modelId: Buffer, _processId: Buffer) => { return codec.encodeFunctionData("619FF7B5", _modelId, _processId); },
        getProcessDefinitionAtIndex: (_model: string, _idx: number) => { return codec.encodeFunctionData("677AEF26", _model, _idx); },
        upgrade: (_successor: string) => { return codec.encodeFunctionData("0900F010", _successor); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogProcessModelActivation: (): {
            eventId: Buffer;
            modelAddress: string;
            active: boolean;
        } => {
            const [eventId, modelAddress, active] = codec.decodeEventLog ("84FA9B33B792AA71C870495971AA5FF9E7E3E832D76F36BB60D89D2AD5551917", data, topics);
            return { eventId: eventId, modelAddress: modelAddress, active: active };
        },
        ERC165_ID_ObjectFactory: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("54AF67B7", data); },
        ERC165_ID_Upgradeable: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("B21C815F", data); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        OBJECT_CLASS_PROCESS_DEFINITION: (): [
            string
        ] => { return codec.decodeFunctionResult ("2B50AA2B", data); },
        OBJECT_CLASS_PROCESS_MODEL: (): [
            string
        ] => { return codec.decodeFunctionResult ("212718B3", data); },
        activateModel: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("14E0D518", data);
            return { error: error };
        },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        createProcessDefinition: (): {
            newAddress: string;
        } => {
            const [newAddress] = codec.decodeFunctionResult ("B0DCEEBC", data);
            return { newAddress: newAddress };
        },
        createProcessModel: (): {
            error: number;
            modelAddress: string;
        } => {
            const [error, modelAddress] = codec.decodeFunctionResult ("FE2D7895", data);
            return { error: error, modelAddress: modelAddress };
        },
        getActivityAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("A73D9874", data); },
        getActivityData: (): {
            activityType: number;
            taskType: number;
            taskBehavior: number;
            assignee: Buffer;
            multiInstance: boolean;
            application: Buffer;
            subProcessModelId: Buffer;
            subProcessDefinitionId: Buffer;
        } => {
            const [activityType, taskType, taskBehavior, assignee, multiInstance, application, subProcessModelId, subProcessDefinitionId] = codec.decodeFunctionResult ("8F2986CC", data);
            return { activityType: activityType, taskType: taskType, taskBehavior: taskBehavior, assignee: assignee, multiInstance: multiInstance, application: application, subProcessModelId: subProcessModelId, subProcessDefinitionId: subProcessDefinitionId };
        },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getModel: (): [
            string
        ] => { return codec.decodeFunctionResult ("21E7C498", data); },
        getModelAtIndex: (): [
            string
        ] => { return codec.decodeFunctionResult ("B8CB2516", data); },
        getModelByVersion: (): {
            error: number;
            modelAddress: string;
        } => {
            const [error, modelAddress] = codec.decodeFunctionResult ("75CD669D", data);
            return { error: error, modelAddress: modelAddress };
        },
        getNumberOfActivities: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("CA20515E", data);
            return { size: size };
        },
        getNumberOfModels: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("665584A8", data);
            return { size: size };
        },
        getNumberOfProcessDefinitions: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("B08E081D", data);
            return { size: size };
        },
        getProcessDefinition: (): [
            string
        ] => { return codec.decodeFunctionResult ("619FF7B5", data); },
        getProcessDefinitionAtIndex: (): [
            string
        ] => { return codec.decodeFunctionResult ("677AEF26", data); },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("0900F010", data);
            return { success: success };
        }
    }; };
}