//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CallTx, ContractCodec, Signal, Event, EventStream, listenerFor, Result } from "@hyperledger/burrow";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(returnData);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module ProcessDefinition {
    export const contactName = "ProcessDefinition";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"processDefinitionAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"activityId","type":"bytes32"},{"indexed":false,"internalType":"uint8","name":"activityType","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"taskType","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"taskBehavior","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"participantId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"multiInstance","type":"bool"},{"indexed":false,"internalType":"bytes32","name":"application","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"subProcessModelId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"subProcessDefinitionId","type":"bytes32"}],"name":"LogActivityDefinitionCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"processDefinitionAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"activityId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataMappingId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"dataStorage","type":"address"},{"indexed":false,"internalType":"uint256","name":"direction","type":"uint256"}],"name":"LogDataMappingCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventURN","type":"bytes32"},{"indexed":false,"internalType":"address","name":"processDefinitionAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"uint8","name":"intermediateEventType","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"intermediateEventBehavior","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"dataStorage","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestampConstant","type":"uint256"},{"indexed":false,"internalType":"string","name":"durationConstant","type":"string"}],"name":"LogIntermediateEventDefinitionCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"processDefinitionAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"interfaceId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"modelId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"modelAddress","type":"address"}],"name":"LogProcessDefinitionCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"processDefinitionAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"interfaceId","type":"bytes32"}],"name":"LogProcessDefinitionInterfaceIdUpdate","type":"event"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_ACTIVITY_DEFINITIONS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_DATA_MAPPINGS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_INTERM_EVENT_DEFINITIONS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_PROCESS_DEFINITIONS","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"enum BpmModel.EventType","name":"_eventType","type":"uint8"},{"internalType":"enum BpmModel.BoundaryEventBehavior","name":"_eventBehavior","type":"uint8"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint256","name":"_timestampConstant","type":"uint256"},{"internalType":"string","name":"_durationConstant","type":"string"}],"name":"addBoundaryEvent","outputs":[{"internalType":"bytes32","name":"eventId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"address","name":"_fixedTarget","type":"address"},{"internalType":"string","name":"_actionFunction","type":"string"}],"name":"addBoundaryEventAction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"bytes32","name":"_interfaceId","type":"bytes32"}],"name":"addProcessInterfaceImplementation","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"enum BpmModel.ActivityType","name":"_activityType","type":"uint8"},{"internalType":"enum BpmModel.TaskType","name":"_taskType","type":"uint8"},{"internalType":"enum BpmModel.TaskBehavior","name":"_behavior","type":"uint8"},{"internalType":"bytes32","name":"_assignee","type":"bytes32"},{"internalType":"bool","name":"_multiInstance","type":"bool"},{"internalType":"bytes32","name":"_application","type":"bytes32"},{"internalType":"bytes32","name":"_subProcessModelId","type":"bytes32"},{"internalType":"bytes32","name":"_subProcessDefinitionId","type":"bytes32"}],"name":"createActivityDefinition","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"enum BpmModel.Direction","name":"_direction","type":"uint8"},{"internalType":"bytes32","name":"_accessPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"}],"name":"createDataMapping","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"enum BpmModel.GatewayType","name":"_type","type":"uint8"}],"name":"createGateway","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"enum BpmModel.EventType","name":"_eventType","type":"uint8"},{"internalType":"enum BpmModel.IntermediateEventBehavior","name":"_eventBehavior","type":"uint8"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint256","name":"_timestampConstant","type":"uint256"},{"internalType":"string","name":"_durationConstant","type":"string"}],"name":"createIntermediateEvent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_source","type":"bytes32"},{"internalType":"bytes32","name":"_target","type":"bytes32"}],"name":"createTransition","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"address","name":"_value","type":"address"}],"name":"createTransitionConditionForAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"bool","name":"_value","type":"bool"}],"name":"createTransitionConditionForBool","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"createTransitionConditionForBytes32","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_lhDataPath","type":"bytes32"},{"internalType":"bytes32","name":"_lhDataStorageId","type":"bytes32"},{"internalType":"address","name":"_lhDataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"bytes32","name":"_rhDataPath","type":"bytes32"},{"internalType":"bytes32","name":"_rhDataStorageId","type":"bytes32"},{"internalType":"address","name":"_rhDataStorage","type":"address"}],"name":"createTransitionConditionForDataStorage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"int256","name":"_value","type":"int256"}],"name":"createTransitionConditionForInt","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"string","name":"_value","type":"string"}],"name":"createTransitionConditionForString","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"},{"internalType":"bytes32","name":"_dataPath","type":"bytes32"},{"internalType":"bytes32","name":"_dataStorageId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"},{"internalType":"uint8","name":"_operator","type":"uint8"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"createTransitionConditionForUint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_participantId","type":"bytes32"}],"name":"getActivitiesForParticipant","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getActivityAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getActivityData","outputs":[{"internalType":"uint8","name":"activityType","type":"uint8"},{"internalType":"uint8","name":"taskType","type":"uint8"},{"internalType":"uint8","name":"taskBehavior","type":"uint8"},{"internalType":"bytes32","name":"assignee","type":"bytes32"},{"internalType":"bool","name":"multiInstance","type":"bool"},{"internalType":"bytes32","name":"application","type":"bytes32"},{"internalType":"bytes32","name":"subProcessModelId","type":"bytes32"},{"internalType":"bytes32","name":"subProcessDefinitionId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getActivityGraphDetails","outputs":[{"internalType":"bytes32","name":"predecessor","type":"bytes32"},{"internalType":"bytes32","name":"successor","type":"bytes32"},{"internalType":"bytes32[]","name":"boundaryEventIds","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getBoundaryEventGraphDetails","outputs":[{"internalType":"enum BpmModel.EventType","name":"eventType","type":"uint8"},{"internalType":"enum BpmModel.BoundaryEventBehavior","name":"eventBehavior","type":"uint8"},{"internalType":"bytes32","name":"successor","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getElementType","outputs":[{"internalType":"enum BpmModel.ModelElementType","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getGatewayGraphDetails","outputs":[{"internalType":"bytes32[]","name":"inputs","type":"bytes32[]"},{"internalType":"bytes32[]","name":"outputs","type":"bytes32[]"},{"internalType":"enum BpmModel.GatewayType","name":"gatewayType","type":"uint8"},{"internalType":"bytes32","name":"defaultOutput","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getImplementedProcessInterfaceAtIndex","outputs":[{"internalType":"address","name":"modelAddress","type":"address"},{"internalType":"bytes32","name":"interfaceId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getInDataMappingDetails","outputs":[{"internalType":"bytes32","name":"dataMappingId","type":"bytes32"},{"internalType":"bytes32","name":"accessPath","type":"bytes32"},{"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"internalType":"address","name":"dataStorage","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getInDataMappingIdAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"}],"name":"getInDataMappingKeys","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getIntermediateEventDatetimeAndOffset","outputs":[{"internalType":"bytes32","name":"datetimeDataPath","type":"bytes32"},{"internalType":"bytes32","name":"datetimeDataStorageId","type":"bytes32"},{"internalType":"address","name":"datetimeDataStorage","type":"address"},{"internalType":"bytes32","name":"offsetDataPath","type":"bytes32"},{"internalType":"bytes32","name":"offsetDataStorageId","type":"bytes32"},{"internalType":"address","name":"offsetDataStorage","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getIntermediateEventGraphDetails","outputs":[{"internalType":"enum BpmModel.EventType","name":"eventType","type":"uint8"},{"internalType":"enum BpmModel.IntermediateEventBehavior","name":"eventBehavior","type":"uint8"},{"internalType":"bytes32","name":"predecessor","type":"bytes32"},{"internalType":"bytes32","name":"successor","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getModel","outputs":[{"internalType":"contract ProcessModel","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getModelId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfActivities","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfImplementedProcessInterfaces","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"}],"name":"getNumberOfInDataMappings","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"}],"name":"getNumberOfOutDataMappings","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getOutDataMappingDetails","outputs":[{"internalType":"bytes32","name":"dataMappingId","type":"bytes32"},{"internalType":"bytes32","name":"accessPath","type":"bytes32"},{"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"internalType":"address","name":"dataStorage","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"},{"internalType":"uint256","name":"_idx","type":"uint256"}],"name":"getOutDataMappingIdAtIndex","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_activityId","type":"bytes32"}],"name":"getOutDataMappingKeys","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getStartActivity","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getTimerEventDetails","outputs":[{"internalType":"bytes32","name":"dataPath","type":"bytes32"},{"internalType":"bytes32","name":"dataStorageId","type":"bytes32"},{"internalType":"address","name":"dataStorage","type":"address"},{"internalType":"uint256","name":"timestampConstant","type":"uint256"},{"internalType":"string","name":"durationConstant","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_model","type":"address"},{"internalType":"bytes32","name":"_interfaceId","type":"bytes32"}],"name":"implementsProcessInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_model","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"modelElementExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_sourceId","type":"bytes32"},{"internalType":"bytes32","name":"_targetId","type":"bytes32"},{"internalType":"address","name":"_dataStorage","type":"address"}],"name":"resolveTransitionCondition","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_gatewayId","type":"bytes32"},{"internalType":"bytes32","name":"_targetElementId","type":"bytes32"}],"name":"setDefaultTransition","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"bytes32","name":"_datetimeDataPath","type":"bytes32"},{"internalType":"bytes32","name":"_datetimeDataStorageId","type":"bytes32"},{"internalType":"address","name":"_datetimeDataStorage","type":"address"},{"internalType":"bytes32","name":"_offsetDataPath","type":"bytes32"},{"internalType":"bytes32","name":"_offsetDataStorageId","type":"bytes32"},{"internalType":"address","name":"_offsetDataStorage","type":"address"}],"name":"setIntermediateEventDatetimeAndOffset","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"validate","outputs":[{"internalType":"bool","name":"result","type":"bool"},{"internalType":"bytes32","name":"errorMessage","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => EventStream;
    const events = { LogActivityDefinitionCreation: { signature: "8535517F68417FECB5815FC8EE689D6176B52551602CD478F4869FA464105D4E", tagged: (eventId: Buffer, processDefinitionAddress: string, activityId: Buffer, activityType: number, taskType: number, taskBehavior: number, participantId: Buffer, multiInstance: boolean, application: Buffer, subProcessModelId: Buffer, subProcessDefinitionId: Buffer) => ({ name: "LogActivityDefinitionCreation", payload: { eventId: eventId, processDefinitionAddress: processDefinitionAddress, activityId: activityId, activityType: activityType, taskType: taskType, taskBehavior: taskBehavior, participantId: participantId, multiInstance: multiInstance, application: application, subProcessModelId: subProcessModelId, subProcessDefinitionId: subProcessDefinitionId } as const } as const) } as const, LogDataMappingCreation: { signature: "8F625BB1B0890F994D35093A4593A61E7D37802F8F6E6D454C6826FBD517067E", tagged: (eventId: Buffer, processDefinitionAddress: string, activityId: Buffer, dataMappingId: Buffer, dataPath: Buffer, dataStorageId: Buffer, dataStorage: string, direction: number) => ({ name: "LogDataMappingCreation", payload: { eventId: eventId, processDefinitionAddress: processDefinitionAddress, activityId: activityId, dataMappingId: dataMappingId, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage, direction: direction } as const } as const) } as const, LogIntermediateEventDefinitionCreation: { signature: "FFCC9917FD665BC2A9845E37C738003462EFDB9CE57700A86AAE2ACD73ACE689", tagged: (eventURN: Buffer, processDefinitionAddress: string, eventId: Buffer, intermediateEventType: number, intermediateEventBehavior: number, dataPath: Buffer, dataStorageId: Buffer, dataStorage: string, timestampConstant: number, durationConstant: string) => ({ name: "LogIntermediateEventDefinitionCreation", payload: { eventURN: eventURN, processDefinitionAddress: processDefinitionAddress, eventId: eventId, intermediateEventType: intermediateEventType, intermediateEventBehavior: intermediateEventBehavior, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage, timestampConstant: timestampConstant, durationConstant: durationConstant } as const } as const) } as const, LogProcessDefinitionCreation: { signature: "38D94ABEB96A84AB50E93C24191394BF293459AED56A464639DFA03ACDABA445", tagged: (eventId: Buffer, processDefinitionAddress: string, id: Buffer, interfaceId: Buffer, modelId: Buffer, modelAddress: string) => ({ name: "LogProcessDefinitionCreation", payload: { eventId: eventId, processDefinitionAddress: processDefinitionAddress, id: id, interfaceId: interfaceId, modelId: modelId, modelAddress: modelAddress } as const } as const) } as const, LogProcessDefinitionInterfaceIdUpdate: { signature: "71E1CAF18038EC62CCE99F19463F24D1083D26DD1FCC8A956A1821C9F07FBC1C", tagged: (eventId: Buffer, processDefinitionAddress: string, interfaceId: Buffer) => ({ name: "LogProcessDefinitionInterfaceIdUpdate", payload: { eventId: eventId, processDefinitionAddress: processDefinitionAddress, interfaceId: interfaceId } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, EVENT_ID_ACTIVITY_DEFINITIONS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_ACTIVITY_DEFINITIONS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_ACTIVITY_DEFINITIONS();
                });
            }, EVENT_ID_DATA_MAPPINGS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_DATA_MAPPINGS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_DATA_MAPPINGS();
                });
            }, EVENT_ID_INTERM_EVENT_DEFINITIONS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_INTERM_EVENT_DEFINITIONS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_INTERM_EVENT_DEFINITIONS();
                });
            }, EVENT_ID_PROCESS_DEFINITIONS(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_PROCESS_DEFINITIONS();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_PROCESS_DEFINITIONS();
                });
            }, addBoundaryEvent(_activityId: Buffer, _id: Buffer, _eventType: number, _eventBehavior: number, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _timestampConstant: number, _durationConstant: string, call = defaultCall): Promise<{
                eventId: Buffer;
            }> {
                const data = encode(client).addBoundaryEvent(_activityId, _id, _eventType, _eventBehavior, _dataPath, _dataStorageId, _dataStorage, _timestampConstant, _durationConstant);
                return call<{
                    eventId: Buffer;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addBoundaryEvent();
                });
            }, addBoundaryEventAction(_id: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _fixedTarget: string, _actionFunction: string, call = defaultCall): Promise<void> {
                const data = encode(client).addBoundaryEventAction(_id, _dataPath, _dataStorageId, _dataStorage, _fixedTarget, _actionFunction);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addBoundaryEventAction();
                });
            }, addProcessInterfaceImplementation(_model: string, _interfaceId: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addProcessInterfaceImplementation(_model, _interfaceId);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addProcessInterfaceImplementation();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, createActivityDefinition(_id: Buffer, _activityType: number, _taskType: number, _behavior: number, _assignee: Buffer, _multiInstance: boolean, _application: Buffer, _subProcessModelId: Buffer, _subProcessDefinitionId: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).createActivityDefinition(_id, _activityType, _taskType, _behavior, _assignee, _multiInstance, _application, _subProcessModelId, _subProcessDefinitionId);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createActivityDefinition();
                });
            }, createDataMapping(_activityId: Buffer, _direction: number, _accessPath: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, call = defaultCall): Promise<void> {
                const data = encode(client).createDataMapping(_activityId, _direction, _accessPath, _dataPath, _dataStorageId, _dataStorage);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createDataMapping();
                });
            }, createGateway(_id: Buffer, _type: number, call = defaultCall): Promise<void> {
                const data = encode(client).createGateway(_id, _type);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createGateway();
                });
            }, createIntermediateEvent(_id: Buffer, _eventType: number, _eventBehavior: number, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _timestampConstant: number, _durationConstant: string, call = defaultCall): Promise<void> {
                const data = encode(client).createIntermediateEvent(_id, _eventType, _eventBehavior, _dataPath, _dataStorageId, _dataStorage, _timestampConstant, _durationConstant);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createIntermediateEvent();
                });
            }, createTransition(_source: Buffer, _target: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).createTransition(_source, _target);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransition();
                });
            }, createTransitionConditionForAddress(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: string, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForAddress(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForAddress();
                });
            }, createTransitionConditionForBool(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: boolean, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForBool(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForBool();
                });
            }, createTransitionConditionForBytes32(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: Buffer, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForBytes32(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForBytes32();
                });
            }, createTransitionConditionForDataStorage(_gatewayId: Buffer, _targetElementId: Buffer, _lhDataPath: Buffer, _lhDataStorageId: Buffer, _lhDataStorage: string, _operator: number, _rhDataPath: Buffer, _rhDataStorageId: Buffer, _rhDataStorage: string, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForDataStorage(_gatewayId, _targetElementId, _lhDataPath, _lhDataStorageId, _lhDataStorage, _operator, _rhDataPath, _rhDataStorageId, _rhDataStorage);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForDataStorage();
                });
            }, createTransitionConditionForInt(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: number, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForInt(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForInt();
                });
            }, createTransitionConditionForString(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: string, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForString(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForString();
                });
            }, createTransitionConditionForUint(_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: number, call = defaultCall): Promise<void> {
                const data = encode(client).createTransitionConditionForUint(_gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createTransitionConditionForUint();
                });
            }, getActivitiesForParticipant(_participantId: Buffer, call = defaultCall): Promise<[
                Buffer[]
            ]> {
                const data = encode(client).getActivitiesForParticipant(_participantId);
                return call<[
                    Buffer[]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivitiesForParticipant();
                });
            }, getActivityAtIndex(_index: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getActivityAtIndex(_index);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityAtIndex();
                });
            }, getActivityData(_id: Buffer, call = defaultCall): Promise<{
                activityType: number;
                taskType: number;
                taskBehavior: number;
                assignee: Buffer;
                multiInstance: boolean;
                application: Buffer;
                subProcessModelId: Buffer;
                subProcessDefinitionId: Buffer;
            }> {
                const data = encode(client).getActivityData(_id);
                return call<{
                    activityType: number;
                    taskType: number;
                    taskBehavior: number;
                    assignee: Buffer;
                    multiInstance: boolean;
                    application: Buffer;
                    subProcessModelId: Buffer;
                    subProcessDefinitionId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityData();
                });
            }, getActivityGraphDetails(_id: Buffer, call = defaultCall): Promise<{
                predecessor: Buffer;
                successor: Buffer;
                boundaryEventIds: Buffer[];
            }> {
                const data = encode(client).getActivityGraphDetails(_id);
                return call<{
                    predecessor: Buffer;
                    successor: Buffer;
                    boundaryEventIds: Buffer[];
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getActivityGraphDetails();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getBoundaryEventGraphDetails(_id: Buffer, call = defaultCall): Promise<{
                eventType: number;
                eventBehavior: number;
                successor: Buffer;
            }> {
                const data = encode(client).getBoundaryEventGraphDetails(_id);
                return call<{
                    eventType: number;
                    eventBehavior: number;
                    successor: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getBoundaryEventGraphDetails();
                });
            }, getElementType(_id: Buffer, call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getElementType(_id);
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getElementType();
                });
            }, getGatewayGraphDetails(_id: Buffer, call = defaultCall): Promise<{
                inputs: Buffer[];
                outputs: Buffer[];
                gatewayType: number;
                defaultOutput: Buffer;
            }> {
                const data = encode(client).getGatewayGraphDetails(_id);
                return call<{
                    inputs: Buffer[];
                    outputs: Buffer[];
                    gatewayType: number;
                    defaultOutput: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getGatewayGraphDetails();
                });
            }, getId(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getId();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getId();
                });
            }, getImplementedProcessInterfaceAtIndex(_idx: number, call = defaultCall): Promise<{
                modelAddress: string;
                interfaceId: Buffer;
            }> {
                const data = encode(client).getImplementedProcessInterfaceAtIndex(_idx);
                return call<{
                    modelAddress: string;
                    interfaceId: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getImplementedProcessInterfaceAtIndex();
                });
            }, getInDataMappingDetails(_activityId: Buffer, _id: Buffer, call = defaultCall): Promise<{
                dataMappingId: Buffer;
                accessPath: Buffer;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }> {
                const data = encode(client).getInDataMappingDetails(_activityId, _id);
                return call<{
                    dataMappingId: Buffer;
                    accessPath: Buffer;
                    dataPath: Buffer;
                    dataStorageId: Buffer;
                    dataStorage: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getInDataMappingDetails();
                });
            }, getInDataMappingIdAtIndex(_activityId: Buffer, _idx: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getInDataMappingIdAtIndex(_activityId, _idx);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getInDataMappingIdAtIndex();
                });
            }, getInDataMappingKeys(_activityId: Buffer, call = defaultCall): Promise<[
                Buffer[]
            ]> {
                const data = encode(client).getInDataMappingKeys(_activityId);
                return call<[
                    Buffer[]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getInDataMappingKeys();
                });
            }, getIntermediateEventDatetimeAndOffset(_id: Buffer, call = defaultCall): Promise<{
                datetimeDataPath: Buffer;
                datetimeDataStorageId: Buffer;
                datetimeDataStorage: string;
                offsetDataPath: Buffer;
                offsetDataStorageId: Buffer;
                offsetDataStorage: string;
            }> {
                const data = encode(client).getIntermediateEventDatetimeAndOffset(_id);
                return call<{
                    datetimeDataPath: Buffer;
                    datetimeDataStorageId: Buffer;
                    datetimeDataStorage: string;
                    offsetDataPath: Buffer;
                    offsetDataStorageId: Buffer;
                    offsetDataStorage: string;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).getIntermediateEventDatetimeAndOffset();
                });
            }, getIntermediateEventGraphDetails(_id: Buffer, call = defaultCall): Promise<{
                eventType: number;
                eventBehavior: number;
                predecessor: Buffer;
                successor: Buffer;
            }> {
                const data = encode(client).getIntermediateEventGraphDetails(_id);
                return call<{
                    eventType: number;
                    eventBehavior: number;
                    predecessor: Buffer;
                    successor: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getIntermediateEventGraphDetails();
                });
            }, getModel(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getModel();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModel();
                });
            }, getModelId(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getModelId();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getModelId();
                });
            }, getNumberOfActivities(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getNumberOfActivities();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfActivities();
                });
            }, getNumberOfImplementedProcessInterfaces(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfImplementedProcessInterfaces();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfImplementedProcessInterfaces();
                });
            }, getNumberOfInDataMappings(_activityId: Buffer, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfInDataMappings(_activityId);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfInDataMappings();
                });
            }, getNumberOfOutDataMappings(_activityId: Buffer, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfOutDataMappings(_activityId);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfOutDataMappings();
                });
            }, getOutDataMappingDetails(_activityId: Buffer, _id: Buffer, call = defaultCall): Promise<{
                dataMappingId: Buffer;
                accessPath: Buffer;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }> {
                const data = encode(client).getOutDataMappingDetails(_activityId, _id);
                return call<{
                    dataMappingId: Buffer;
                    accessPath: Buffer;
                    dataPath: Buffer;
                    dataStorageId: Buffer;
                    dataStorage: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getOutDataMappingDetails();
                });
            }, getOutDataMappingIdAtIndex(_activityId: Buffer, _idx: number, call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getOutDataMappingIdAtIndex(_activityId, _idx);
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getOutDataMappingIdAtIndex();
                });
            }, getOutDataMappingKeys(_activityId: Buffer, call = defaultCall): Promise<[
                Buffer[]
            ]> {
                const data = encode(client).getOutDataMappingKeys(_activityId);
                return call<[
                    Buffer[]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getOutDataMappingKeys();
                });
            }, getStartActivity(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).getStartActivity();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getStartActivity();
                });
            }, getTimerEventDetails(_id: Buffer, call = defaultCall): Promise<{
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
                timestampConstant: number;
                durationConstant: string;
            }> {
                const data = encode(client).getTimerEventDetails(_id);
                return call<{
                    dataPath: Buffer;
                    dataStorageId: Buffer;
                    dataStorage: string;
                    timestampConstant: number;
                    durationConstant: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getTimerEventDetails();
                });
            }, implementsProcessInterface(_model: string, _interfaceId: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).implementsProcessInterface(_model, _interfaceId);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).implementsProcessInterface();
                });
            }, initialize(_id: Buffer, _model: string, call = defaultCall): Promise<void> {
                const data = encode(client).initialize(_id, _model);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).initialize();
                });
            }, isValid(call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).isValid();
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).isValid();
                });
            }, modelElementExists(_id: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).modelElementExists(_id);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).modelElementExists();
                });
            }, resolveTransitionCondition(_sourceId: Buffer, _targetId: Buffer, _dataStorage: string, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).resolveTransitionCondition(_sourceId, _targetId, _dataStorage);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).resolveTransitionCondition();
                });
            }, setDefaultTransition(_gatewayId: Buffer, _targetElementId: Buffer, call = defaultCall): Promise<void> {
                const data = encode(client).setDefaultTransition(_gatewayId, _targetElementId);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).setDefaultTransition();
                });
            }, setIntermediateEventDatetimeAndOffset(_id: Buffer, _datetimeDataPath: Buffer, _datetimeDataStorageId: Buffer, _datetimeDataStorage: string, _offsetDataPath: Buffer, _offsetDataStorageId: Buffer, _offsetDataStorage: string, call = defaultCall): Promise<void> {
                const data = encode(client).setIntermediateEventDatetimeAndOffset(_id, _datetimeDataPath, _datetimeDataStorageId, _datetimeDataStorage, _offsetDataPath, _offsetDataStorageId, _offsetDataStorage);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).setIntermediateEventDatetimeAndOffset();
                });
            }, validate(call = defaultCall): Promise<{
                result: boolean;
                errorMessage: Buffer;
            }> {
                const data = encode(client).validate();
                return call<{
                    result: boolean;
                    errorMessage: Buffer;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).validate();
                });
            } } as const, listeners: { LogActivityDefinitionCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                processDefinitionAddress: string;
                activityId: Buffer;
                activityType: number;
                taskType: number;
                taskBehavior: number;
                participantId: Buffer;
                multiInstance: boolean;
                application: Buffer;
                subProcessModelId: Buffer;
                subProcessDefinitionId: Buffer;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["8535517F68417FECB5815FC8EE689D6176B52551602CD478F4869FA464105D4E"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogActivityDefinitionCreation()); }, start, end); }, LogDataMappingCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                processDefinitionAddress: string;
                activityId: Buffer;
                dataMappingId: Buffer;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
                direction: number;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["8F625BB1B0890F994D35093A4593A61E7D37802F8F6E6D454C6826FBD517067E"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogDataMappingCreation()); }, start, end); }, LogIntermediateEventDefinitionCreation(callback: (err?: Error, event?: {
                eventURN: Buffer;
                processDefinitionAddress: string;
                eventId: Buffer;
                intermediateEventType: number;
                intermediateEventBehavior: number;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
                timestampConstant: number;
                durationConstant: string;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["FFCC9917FD665BC2A9845E37C738003462EFDB9CE57700A86AAE2ACD73ACE689"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogIntermediateEventDefinitionCreation()); }, start, end); }, LogProcessDefinitionCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                processDefinitionAddress: string;
                id: Buffer;
                interfaceId: Buffer;
                modelId: Buffer;
                modelAddress: string;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["38D94ABEB96A84AB50E93C24191394BF293459AED56A464639DFA03ACDABA445"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogProcessDefinitionCreation()); }, start, end); }, LogProcessDefinitionInterfaceIdUpdate(callback: (err?: Error, event?: {
                eventId: Buffer;
                processDefinitionAddress: string;
                interfaceId: Buffer;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["71E1CAF18038EC62CCE99F19463F24D1083D26DD1FCC8A956A1821C9F07FBC1C"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogProcessDefinitionInterfaceIdUpdate()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        EVENT_ID_ACTIVITY_DEFINITIONS: () => { return codec.encodeFunctionData("AF201B90"); },
        EVENT_ID_DATA_MAPPINGS: () => { return codec.encodeFunctionData("6983067E"); },
        EVENT_ID_INTERM_EVENT_DEFINITIONS: () => { return codec.encodeFunctionData("FD946FCD"); },
        EVENT_ID_PROCESS_DEFINITIONS: () => { return codec.encodeFunctionData("BA840F64"); },
        addBoundaryEvent: (_activityId: Buffer, _id: Buffer, _eventType: number, _eventBehavior: number, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _timestampConstant: number, _durationConstant: string) => { return codec.encodeFunctionData("581654CE", _activityId, _id, _eventType, _eventBehavior, _dataPath, _dataStorageId, _dataStorage, _timestampConstant, _durationConstant); },
        addBoundaryEventAction: (_id: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _fixedTarget: string, _actionFunction: string) => { return codec.encodeFunctionData("89A392E6", _id, _dataPath, _dataStorageId, _dataStorage, _fixedTarget, _actionFunction); },
        addProcessInterfaceImplementation: (_model: string, _interfaceId: Buffer) => { return codec.encodeFunctionData("F001897D", _model, _interfaceId); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        createActivityDefinition: (_id: Buffer, _activityType: number, _taskType: number, _behavior: number, _assignee: Buffer, _multiInstance: boolean, _application: Buffer, _subProcessModelId: Buffer, _subProcessDefinitionId: Buffer) => { return codec.encodeFunctionData("BDE6EF58", _id, _activityType, _taskType, _behavior, _assignee, _multiInstance, _application, _subProcessModelId, _subProcessDefinitionId); },
        createDataMapping: (_activityId: Buffer, _direction: number, _accessPath: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) => { return codec.encodeFunctionData("C5930E29", _activityId, _direction, _accessPath, _dataPath, _dataStorageId, _dataStorage); },
        createGateway: (_id: Buffer, _type: number) => { return codec.encodeFunctionData("32D37781", _id, _type); },
        createIntermediateEvent: (_id: Buffer, _eventType: number, _eventBehavior: number, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _timestampConstant: number, _durationConstant: string) => { return codec.encodeFunctionData("D1CC1BDE", _id, _eventType, _eventBehavior, _dataPath, _dataStorageId, _dataStorage, _timestampConstant, _durationConstant); },
        createTransition: (_source: Buffer, _target: Buffer) => { return codec.encodeFunctionData("6C28E102", _source, _target); },
        createTransitionConditionForAddress: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: string) => { return codec.encodeFunctionData("DD2F3E84", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        createTransitionConditionForBool: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: boolean) => { return codec.encodeFunctionData("3D34113E", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        createTransitionConditionForBytes32: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: Buffer) => { return codec.encodeFunctionData("23FF5DD3", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        createTransitionConditionForDataStorage: (_gatewayId: Buffer, _targetElementId: Buffer, _lhDataPath: Buffer, _lhDataStorageId: Buffer, _lhDataStorage: string, _operator: number, _rhDataPath: Buffer, _rhDataStorageId: Buffer, _rhDataStorage: string) => { return codec.encodeFunctionData("B2816749", _gatewayId, _targetElementId, _lhDataPath, _lhDataStorageId, _lhDataStorage, _operator, _rhDataPath, _rhDataStorageId, _rhDataStorage); },
        createTransitionConditionForInt: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: number) => { return codec.encodeFunctionData("26417651", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        createTransitionConditionForString: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: string) => { return codec.encodeFunctionData("8EFB695C", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        createTransitionConditionForUint: (_gatewayId: Buffer, _targetElementId: Buffer, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string, _operator: number, _value: number) => { return codec.encodeFunctionData("5316C206", _gatewayId, _targetElementId, _dataPath, _dataStorageId, _dataStorage, _operator, _value); },
        getActivitiesForParticipant: (_participantId: Buffer) => { return codec.encodeFunctionData("14E42605", _participantId); },
        getActivityAtIndex: (_index: number) => { return codec.encodeFunctionData("3BF2C2A0", _index); },
        getActivityData: (_id: Buffer) => { return codec.encodeFunctionData("758CBD2E", _id); },
        getActivityGraphDetails: (_id: Buffer) => { return codec.encodeFunctionData("5B4025E1", _id); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getBoundaryEventGraphDetails: (_id: Buffer) => { return codec.encodeFunctionData("57CFEF6C", _id); },
        getElementType: (_id: Buffer) => { return codec.encodeFunctionData("9C4AA334", _id); },
        getGatewayGraphDetails: (_id: Buffer) => { return codec.encodeFunctionData("79238A10", _id); },
        getId: () => { return codec.encodeFunctionData("5D1CA631"); },
        getImplementedProcessInterfaceAtIndex: (_idx: number) => { return codec.encodeFunctionData("4B53BE1D", _idx); },
        getInDataMappingDetails: (_activityId: Buffer, _id: Buffer) => { return codec.encodeFunctionData("E3621D20", _activityId, _id); },
        getInDataMappingIdAtIndex: (_activityId: Buffer, _idx: number) => { return codec.encodeFunctionData("15064393", _activityId, _idx); },
        getInDataMappingKeys: (_activityId: Buffer) => { return codec.encodeFunctionData("3D9A2352", _activityId); },
        getIntermediateEventDatetimeAndOffset: (_id: Buffer) => { return codec.encodeFunctionData("21BCDCC2", _id); },
        getIntermediateEventGraphDetails: (_id: Buffer) => { return codec.encodeFunctionData("48191A40", _id); },
        getModel: () => { return codec.encodeFunctionData("A0BFA1E0"); },
        getModelId: () => { return codec.encodeFunctionData("361A5672"); },
        getNumberOfActivities: () => { return codec.encodeFunctionData("006129D9"); },
        getNumberOfImplementedProcessInterfaces: () => { return codec.encodeFunctionData("B24B4BCC"); },
        getNumberOfInDataMappings: (_activityId: Buffer) => { return codec.encodeFunctionData("2B8C74CE", _activityId); },
        getNumberOfOutDataMappings: (_activityId: Buffer) => { return codec.encodeFunctionData("AE73D8B3", _activityId); },
        getOutDataMappingDetails: (_activityId: Buffer, _id: Buffer) => { return codec.encodeFunctionData("3A70DCEF", _activityId, _id); },
        getOutDataMappingIdAtIndex: (_activityId: Buffer, _idx: number) => { return codec.encodeFunctionData("3796D3A4", _activityId, _idx); },
        getOutDataMappingKeys: (_activityId: Buffer) => { return codec.encodeFunctionData("08A104AA", _activityId); },
        getStartActivity: () => { return codec.encodeFunctionData("0F9C79E2"); },
        getTimerEventDetails: (_id: Buffer) => { return codec.encodeFunctionData("20DE4E0A", _id); },
        implementsProcessInterface: (_model: string, _interfaceId: Buffer) => { return codec.encodeFunctionData("77198ED4", _model, _interfaceId); },
        initialize: (_id: Buffer, _model: string) => { return codec.encodeFunctionData("6910E334", _id, _model); },
        isValid: () => { return codec.encodeFunctionData("BB5D40EB"); },
        modelElementExists: (_id: Buffer) => { return codec.encodeFunctionData("E3C83A16", _id); },
        resolveTransitionCondition: (_sourceId: Buffer, _targetId: Buffer, _dataStorage: string) => { return codec.encodeFunctionData("5478A0C9", _sourceId, _targetId, _dataStorage); },
        setDefaultTransition: (_gatewayId: Buffer, _targetElementId: Buffer) => { return codec.encodeFunctionData("21A0C66F", _gatewayId, _targetElementId); },
        setIntermediateEventDatetimeAndOffset: (_id: Buffer, _datetimeDataPath: Buffer, _datetimeDataStorageId: Buffer, _datetimeDataStorage: string, _offsetDataPath: Buffer, _offsetDataStorageId: Buffer, _offsetDataStorage: string) => { return codec.encodeFunctionData("01CDFC90", _id, _datetimeDataPath, _datetimeDataStorageId, _datetimeDataStorage, _offsetDataPath, _offsetDataStorageId, _offsetDataStorage); },
        validate: () => { return codec.encodeFunctionData("6901F668"); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogActivityDefinitionCreation: (): {
            eventId: Buffer;
            processDefinitionAddress: string;
            activityId: Buffer;
            activityType: number;
            taskType: number;
            taskBehavior: number;
            participantId: Buffer;
            multiInstance: boolean;
            application: Buffer;
            subProcessModelId: Buffer;
            subProcessDefinitionId: Buffer;
        } => {
            const [eventId, processDefinitionAddress, activityId, activityType, taskType, taskBehavior, participantId, multiInstance, application, subProcessModelId, subProcessDefinitionId] = codec.decodeEventLog ("8535517F68417FECB5815FC8EE689D6176B52551602CD478F4869FA464105D4E", data, topics);
            return { eventId: eventId, processDefinitionAddress: processDefinitionAddress, activityId: activityId, activityType: activityType, taskType: taskType, taskBehavior: taskBehavior, participantId: participantId, multiInstance: multiInstance, application: application, subProcessModelId: subProcessModelId, subProcessDefinitionId: subProcessDefinitionId };
        },
        LogDataMappingCreation: (): {
            eventId: Buffer;
            processDefinitionAddress: string;
            activityId: Buffer;
            dataMappingId: Buffer;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
            direction: number;
        } => {
            const [eventId, processDefinitionAddress, activityId, dataMappingId, dataPath, dataStorageId, dataStorage, direction] = codec.decodeEventLog ("8F625BB1B0890F994D35093A4593A61E7D37802F8F6E6D454C6826FBD517067E", data, topics);
            return { eventId: eventId, processDefinitionAddress: processDefinitionAddress, activityId: activityId, dataMappingId: dataMappingId, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage, direction: direction };
        },
        LogIntermediateEventDefinitionCreation: (): {
            eventURN: Buffer;
            processDefinitionAddress: string;
            eventId: Buffer;
            intermediateEventType: number;
            intermediateEventBehavior: number;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
            timestampConstant: number;
            durationConstant: string;
        } => {
            const [eventURN, processDefinitionAddress, eventId, intermediateEventType, intermediateEventBehavior, dataPath, dataStorageId, dataStorage, timestampConstant, durationConstant] = codec.decodeEventLog ("FFCC9917FD665BC2A9845E37C738003462EFDB9CE57700A86AAE2ACD73ACE689", data, topics);
            return { eventURN: eventURN, processDefinitionAddress: processDefinitionAddress, eventId: eventId, intermediateEventType: intermediateEventType, intermediateEventBehavior: intermediateEventBehavior, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage, timestampConstant: timestampConstant, durationConstant: durationConstant };
        },
        LogProcessDefinitionCreation: (): {
            eventId: Buffer;
            processDefinitionAddress: string;
            id: Buffer;
            interfaceId: Buffer;
            modelId: Buffer;
            modelAddress: string;
        } => {
            const [eventId, processDefinitionAddress, id, interfaceId, modelId, modelAddress] = codec.decodeEventLog ("38D94ABEB96A84AB50E93C24191394BF293459AED56A464639DFA03ACDABA445", data, topics);
            return { eventId: eventId, processDefinitionAddress: processDefinitionAddress, id: id, interfaceId: interfaceId, modelId: modelId, modelAddress: modelAddress };
        },
        LogProcessDefinitionInterfaceIdUpdate: (): {
            eventId: Buffer;
            processDefinitionAddress: string;
            interfaceId: Buffer;
        } => {
            const [eventId, processDefinitionAddress, interfaceId] = codec.decodeEventLog ("71E1CAF18038EC62CCE99F19463F24D1083D26DD1FCC8A956A1821C9F07FBC1C", data, topics);
            return { eventId: eventId, processDefinitionAddress: processDefinitionAddress, interfaceId: interfaceId };
        },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        EVENT_ID_ACTIVITY_DEFINITIONS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("AF201B90", data); },
        EVENT_ID_DATA_MAPPINGS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("6983067E", data); },
        EVENT_ID_INTERM_EVENT_DEFINITIONS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("FD946FCD", data); },
        EVENT_ID_PROCESS_DEFINITIONS: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("BA840F64", data); },
        addBoundaryEvent: (): {
            eventId: Buffer;
        } => {
            const [eventId] = codec.decodeFunctionResult ("581654CE", data);
            return { eventId: eventId };
        },
        addBoundaryEventAction: (): void => { return; },
        addProcessInterfaceImplementation: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("F001897D", data);
            return { error: error };
        },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        createActivityDefinition: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("BDE6EF58", data);
            return { error: error };
        },
        createDataMapping: (): void => { return; },
        createGateway: (): void => { return; },
        createIntermediateEvent: (): void => { return; },
        createTransition: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("6C28E102", data);
            return { error: error };
        },
        createTransitionConditionForAddress: (): void => { return; },
        createTransitionConditionForBool: (): void => { return; },
        createTransitionConditionForBytes32: (): void => { return; },
        createTransitionConditionForDataStorage: (): void => { return; },
        createTransitionConditionForInt: (): void => { return; },
        createTransitionConditionForString: (): void => { return; },
        createTransitionConditionForUint: (): void => { return; },
        getActivitiesForParticipant: (): [
            Buffer[]
        ] => { return codec.decodeFunctionResult ("14E42605", data); },
        getActivityAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("3BF2C2A0", data); },
        getActivityData: (): {
            activityType: number;
            taskType: number;
            taskBehavior: number;
            assignee: Buffer;
            multiInstance: boolean;
            application: Buffer;
            subProcessModelId: Buffer;
            subProcessDefinitionId: Buffer;
        } => {
            const [activityType, taskType, taskBehavior, assignee, multiInstance, application, subProcessModelId, subProcessDefinitionId] = codec.decodeFunctionResult ("758CBD2E", data);
            return { activityType: activityType, taskType: taskType, taskBehavior: taskBehavior, assignee: assignee, multiInstance: multiInstance, application: application, subProcessModelId: subProcessModelId, subProcessDefinitionId: subProcessDefinitionId };
        },
        getActivityGraphDetails: (): {
            predecessor: Buffer;
            successor: Buffer;
            boundaryEventIds: Buffer[];
        } => {
            const [predecessor, successor, boundaryEventIds] = codec.decodeFunctionResult ("5B4025E1", data);
            return { predecessor: predecessor, successor: successor, boundaryEventIds: boundaryEventIds };
        },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getBoundaryEventGraphDetails: (): {
            eventType: number;
            eventBehavior: number;
            successor: Buffer;
        } => {
            const [eventType, eventBehavior, successor] = codec.decodeFunctionResult ("57CFEF6C", data);
            return { eventType: eventType, eventBehavior: eventBehavior, successor: successor };
        },
        getElementType: (): [
            number
        ] => { return codec.decodeFunctionResult ("9C4AA334", data); },
        getGatewayGraphDetails: (): {
            inputs: Buffer[];
            outputs: Buffer[];
            gatewayType: number;
            defaultOutput: Buffer;
        } => {
            const [inputs, outputs, gatewayType, defaultOutput] = codec.decodeFunctionResult ("79238A10", data);
            return { inputs: inputs, outputs: outputs, gatewayType: gatewayType, defaultOutput: defaultOutput };
        },
        getId: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("5D1CA631", data); },
        getImplementedProcessInterfaceAtIndex: (): {
            modelAddress: string;
            interfaceId: Buffer;
        } => {
            const [modelAddress, interfaceId] = codec.decodeFunctionResult ("4B53BE1D", data);
            return { modelAddress: modelAddress, interfaceId: interfaceId };
        },
        getInDataMappingDetails: (): {
            dataMappingId: Buffer;
            accessPath: Buffer;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [dataMappingId, accessPath, dataPath, dataStorageId, dataStorage] = codec.decodeFunctionResult ("E3621D20", data);
            return { dataMappingId: dataMappingId, accessPath: accessPath, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getInDataMappingIdAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("15064393", data); },
        getInDataMappingKeys: (): [
            Buffer[]
        ] => { return codec.decodeFunctionResult ("3D9A2352", data); },
        getIntermediateEventDatetimeAndOffset: (): {
            datetimeDataPath: Buffer;
            datetimeDataStorageId: Buffer;
            datetimeDataStorage: string;
            offsetDataPath: Buffer;
            offsetDataStorageId: Buffer;
            offsetDataStorage: string;
        } => {
            const [datetimeDataPath, datetimeDataStorageId, datetimeDataStorage, offsetDataPath, offsetDataStorageId, offsetDataStorage] = codec.decodeFunctionResult ("21BCDCC2", data);
            return { datetimeDataPath: datetimeDataPath, datetimeDataStorageId: datetimeDataStorageId, datetimeDataStorage: datetimeDataStorage, offsetDataPath: offsetDataPath, offsetDataStorageId: offsetDataStorageId, offsetDataStorage: offsetDataStorage };
        },
        getIntermediateEventGraphDetails: (): {
            eventType: number;
            eventBehavior: number;
            predecessor: Buffer;
            successor: Buffer;
        } => {
            const [eventType, eventBehavior, predecessor, successor] = codec.decodeFunctionResult ("48191A40", data);
            return { eventType: eventType, eventBehavior: eventBehavior, predecessor: predecessor, successor: successor };
        },
        getModel: (): [
            string
        ] => { return codec.decodeFunctionResult ("A0BFA1E0", data); },
        getModelId: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("361A5672", data); },
        getNumberOfActivities: (): [
            number
        ] => { return codec.decodeFunctionResult ("006129D9", data); },
        getNumberOfImplementedProcessInterfaces: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("B24B4BCC", data);
            return { size: size };
        },
        getNumberOfInDataMappings: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("2B8C74CE", data);
            return { size: size };
        },
        getNumberOfOutDataMappings: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("AE73D8B3", data);
            return { size: size };
        },
        getOutDataMappingDetails: (): {
            dataMappingId: Buffer;
            accessPath: Buffer;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [dataMappingId, accessPath, dataPath, dataStorageId, dataStorage] = codec.decodeFunctionResult ("3A70DCEF", data);
            return { dataMappingId: dataMappingId, accessPath: accessPath, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getOutDataMappingIdAtIndex: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("3796D3A4", data); },
        getOutDataMappingKeys: (): [
            Buffer[]
        ] => { return codec.decodeFunctionResult ("08A104AA", data); },
        getStartActivity: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("0F9C79E2", data); },
        getTimerEventDetails: (): {
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
            timestampConstant: number;
            durationConstant: string;
        } => {
            const [dataPath, dataStorageId, dataStorage, timestampConstant, durationConstant] = codec.decodeFunctionResult ("20DE4E0A", data);
            return { dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage, timestampConstant: timestampConstant, durationConstant: durationConstant };
        },
        implementsProcessInterface: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("77198ED4", data); },
        initialize: (): void => { return; },
        isValid: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("BB5D40EB", data); },
        modelElementExists: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("E3C83A16", data); },
        resolveTransitionCondition: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("5478A0C9", data); },
        setDefaultTransition: (): void => { return; },
        setIntermediateEventDatetimeAndOffset: (): void => { return; },
        validate: (): {
            result: boolean;
            errorMessage: Buffer;
        } => {
            const [result, errorMessage] = codec.decodeFunctionResult ("6901F668", data);
            return { result: result, errorMessage: errorMessage };
        }
    }; };
}