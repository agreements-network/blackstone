//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module DateRelations {
    export function Deploy<Tx>(client: Provider<Tx>, agreements_AgreementsAPI_sol_AgreementsAPI: string, commons_base_ErrorsLib_sol_ErrorsLib: string, commons_utils_Strings_sol_Strings: string): Promise<string> {
        let bytecode = "6080604052600160008060016000806301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508260016000600381106200006a57fe5b602091828204019190066101000a81548160ff021916908360ff16021790555081600180600381106200009957fe5b602091828204019190066101000a81548160ff021916908360ff160217905550806001600260038110620000c957fe5b602091828204019190066101000a81548160ff021916908360ff1602179055506200014060405160200180807f676574417274696661637456657273696f6e2829000000000000000000000000815250601401905060405160208183030381529060405280519060200120620001e160201b60201c565b50505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001db60405160200180807f7570677261646528616464726573732900000000000000000000000000000000815250601001905060405160208183030381529060405280519060200120620001e160201b60201c565b620002ce565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062002e90602f913960400191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b612bb280620002de6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063756b2e6c11610097578063b21c815f11610066578063b21c815f1461051c578063e10533c614610578578063e7284879146105d4578063f085f6dd1461061e57610100565b8063756b2e6c146103f55780637589adb71461043b57806378bc0b0d1461045f578063ac83ec7c146104d857610100565b80634ddaf8f2116100d35780634ddaf8f2146102cf57806357e0ebca1461032b5780635c0301381461034f57806364afab72146103a757610100565b806301ffc9a7146101055780630900f0101461016a578063222a3a32146101c657806335657e6814610273575b600080fd5b6101506004803603602081101561011b57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610642565b604051808215151515815260200191505060405180910390f35b6101ac6004803603602081101561018057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a9565b604051808215151515815260200191505060405180910390f35b610271600480360360808110156101dc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184600183028401116401000000008311171561026157600080fd5b9091929391929390505050610b3e565b005b6102b56004803603602081101561028957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115cd565b604051808215151515815260200191505060405180910390f35b610311600480360360208110156102e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d8565b604051808215151515815260200191505060405180910390f35b6103336115e3565b604051808260ff1660ff16815260200191505060405180910390f35b6103916004803603602081101561036557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061160e565b6040518082815260200191505060405180910390f35b6103f3600480360360408110156103bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061170a565b005b6103fd611b9f565b6040518082600360200280838360005b8381101561042857808201518184015260208101905061040d565b5050505090500191505060405180910390f35b610443611c10565b604051808260ff1660ff16815260200191505060405180910390f35b6104c26004803603606081101561047557600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611c3a565b6040518082815260200191505060405180910390f35b61051a600480360360208110156104ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb0565b005b6105246120b1565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6105806120fb565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6105dc612145565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062661216f565b604051808260ff1660ff16815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561071f61219a565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610780578082015181840152602081019050610765565b50505050905090810190601f1680156107ad5780820380516001836020036101000a031916815260200191505b5084810383526023815260200180612b396023913960400184810382526027815260200180612ac3602791396040019550505050505060006040518083038186803b1580156107fb57600080fd5b505af415801561080f573d6000803e3d6000fd5b505050508173__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60016108398461160e565b126108426121d7565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156108a3578082015181840152602081019050610888565b50505050905090810190601f1680156108d05780820380516001836020036101000a031916815260200191505b5084810383526029815260200180612aea602991396040018481038252604b815260200180612a13604b91396060019550505050505060006040518083038186803b15801561091e57600080fd5b505af4158015610932573d6000803e3d6000fd5b5050505061093f836115d8565b8015610a0157508273ffffffffffffffffffffffffffffffffffffffff166335657e68306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b505050506040513d60208110156109ef57600080fd5b81019080805190602001909291905050505b915073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef8315610a27612214565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610a88578082015181840152602081019050610a6d565b50505050905090810190601f168015610ab55780820380516001836020036101000a031916815260200191505b508481038352601b8152602001807f41627374726163745570677261646561626c652e75706772616465000000000081525060200184810382526040815260200180612a83604091396040019550505050505060006040518083038186803b158015610b2057600080fd5b505af4158015610b34573d6000803e3d6000fd5b5050505050919050565b84600073__$4bfedefce7d76215a620e01b46747fdc01$__6360b7f43d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015610bbb57600080fd5b505af4158015610bcf573d6000803e3d6000fd5b505050506040513d6040811015610be557600080fd5b8101908080519060200190929190805190602001909291905050505080915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e8857610de7604051806060016040528060228152602001612b5c602291398373ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__635a27587990916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015610ce957600080fd5b505af4158015610cfd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610d2757600080fd5b8101908080516040519392919084640100000000821115610d4757600080fd5b83820191506020820185811115610d5d57600080fd5b8251866001820283011164010000000082111715610d7a57600080fd5b8083526020830192505050908051906020019080838360005b83811015610dae578082015181840152602081019050610d93565b50505050905090810190601f168015610ddb5780820380516001836020036101000a031916815260200191505b50604052505050612251565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e4d578082015181840152602081019050610e32565b50505050905090810190601f168015610e7a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b868686610e96838383612319565b15611413576113728273__$1483b111869e15ef6c698c5f10f0d4a934$__6315f05b0590916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b158015610eef57600080fd5b505af4158015610f03573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610f2d57600080fd5b8101908080516040519392919084640100000000821115610f4d57600080fd5b83820191506020820185811115610f6357600080fd5b8251866001820283011164010000000082111715610f8057600080fd5b8083526020830192505050908051906020019080838360005b83811015610fb4578082015181840152602081019050610f99565b50505050905090810190601f168015610fe15780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600e81526020017f206f6e2061677265656d656e74200000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__630b39ed4790916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156110b157600080fd5b505af41580156110c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110ef57600080fd5b810190808051604051939291908464010000000082111561110f57600080fd5b8382019150602082018581111561112557600080fd5b825186600182028301116401000000008211171561114257600080fd5b8083526020830192505050908051906020019080838360005b8381101561117657808201518184015260208101905061115b565b50505050905090810190601f1680156111a35780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280601081526020017f697320646572697665642066726f6d20000000000000000000000000000000008152508573__$1483b111869e15ef6c698c5f10f0d4a934$__6315f05b0590916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561123157600080fd5b505af4158015611245573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561126f57600080fd5b810190808051604051939291908464010000000082111561128f57600080fd5b838201915060208201858111156112a557600080fd5b82518660018202830111640100000000821117156112c257600080fd5b8083526020830192505050908051906020019080838360005b838110156112f65780820151818401526020810190506112db565b50505050905090810190601f1680156113235780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600581526020017f44617465200000000000000000000000000000000000000000000000000000008152506124e29095949392919063ffffffff16565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113d85780820151818401526020810190506113bd565b50505050905090810190601f1680156114055780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b600061141f8b8b6126fa565b90508060036000838152602001908152602001600020600001819055508a6003600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600360008381526020019081526020016000206002018190555088600360008381526020019081526020016000206003018190555087876003600084815260200190815260200160002060040191906114ec9291906128ac565b5060016003600083815260200190815260200160002060050160006101000a81548160ff021916908315150217905550898b73ffffffffffffffffffffffffffffffffffffffff167f414e3a2f2f646174652d72656c6174696f6e00000000000000000000000000007f24afacb07df9e937e5b31845655a77bebfb01411f47269091a2762a471e80fb88c8c8c60405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a45050505050505050505050565b600060019050919050565b600060019050919050565b600060016000600381106115f357fe5b602091828204019190069054906101000a900460ff16905090565b60006117036001600380602002604051908101604052809291908260038015611672576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841161163b5790505b50505050508373ffffffffffffffffffffffffffffffffffffffff1663756b2e6c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156116bd57600080fd5b505afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060608110156116f657600080fd5b8101908091905050612762565b9050919050565b81600073__$4bfedefce7d76215a620e01b46747fdc01$__6360b7f43d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561178757600080fd5b505af415801561179b573d6000803e3d6000fd5b505050506040513d60408110156117b157600080fd5b8101908080519060200190929190805190602001909291905050505080915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a54576119b3604051806060016040528060228152602001612b5c602291398373ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__635a27587990916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156118b557600080fd5b505af41580156118c9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156118f357600080fd5b810190808051604051939291908464010000000082111561191357600080fd5b8382019150602082018581111561192957600080fd5b825186600182028301116401000000008211171561194657600080fd5b8083526020830192505050908051906020019080838360005b8381101561197a57808201518184015260208101905061195f565b50505050905090810190601f1680156119a75780820380516001836020036101000a031916815260200191505b50604052505050612251565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a195780820151818401526020810190506119fe565b50505050905090810190601f168015611a465780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000611a6085856126fa565b9050600360008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000611ac5919061292c565b6005820160006101000a81549060ff0219169055505060036000828152602001908152602001600020600201546003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f414e3a2f2f646174652d72656c6174696f6e00000000000000000000000000007f0891ad488d66c49e5d5aa5a66c9f0dba033a462c1ab343fc68de60024450b74a60006040518082815260200191505060405180910390a45050505050565b611ba7612974565b6001600380602002604051908101604052809291908260038015611c06576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411611bcf5790505b5050505050905090565b600060018060038110611c1f57fe5b602091828204019190069054906101000a900460ff16905090565b6000611ca96001600380602002604051908101604052809291908260038015611c9e576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411611c675790505b505050505083612762565b9050919050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d2461219a565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015611d85578082015181840152602081019050611d6a565b50505050905090810190601f168015611db25780820380516001836020036101000a031916815260200191505b5084810383526023815260200180612b396023913960400184810382526027815260200180612ac3602791396040019550505050505060006040518083038186803b158015611e0057600080fd5b505af4158015611e14573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611e6a612815565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015611ecb578082015181840152602081019050611eb0565b50505050905090810190601f168015611ef85780820380516001836020036101000a031916815260200191505b5084810383526025815260200180612a5e6025913960400184810382526026815260200180612b13602691396040019550505050505060006040518083038186803b158015611f4657600080fd5b505af4158015611f5a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120ae5780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd5b062c07f8a61fda452024e9c9d7db09548980e5f298d0f5cab47c3c9c172b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b60405160200180807f757067726164652861646472657373290000000000000000000000000000000081525060100190506040516020818303038152906040528051906020012081565b60405160200180807f676574417274696661637456657273696f6e282900000000000000000000000081525060140190506040516020818303038152906040528051906020012081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160026003811061217f57fe5b602091828204019190069054906101000a900460ff16905090565b60606040518060400160405280600681526020017f4552523430330000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b606082826040516020018083805190602001908083835b6020831061228b5780518252602082019150602081019050602083039250612268565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106122dc57805182526020820191506020810190506020830392506122b9565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60008183141561232c57600190506124db565b612334612996565b6003600061234287866126fa565b81526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124685780601f1061243d57610100808354040283529160200191612468565b820191906000526020600020905b81548152906001019060200180831161244b57829003601f168201915b505050505081526020016005820160009054906101000a900460ff16151515158152505090508060a001516124a15760009150506124db565b83816060015114156124b75760019150506124db565b6124c685858360600151612319565b156124d55760019150506124db565b60009150505b9392505050565b60608686868686866040516020018087805190602001908083835b6020831061252057805182526020820191506020810190506020830392506124fd565b6001836020036101000a03801982511681845116808217855250505050505090500186805190602001908083835b60208310612571578051825260208201915060208101905060208303925061254e565b6001836020036101000a03801982511681845116808217855250505050505090500185805190602001908083835b602083106125c2578051825260208201915060208101905060208303925061259f565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b6020831061261357805182526020820191506020810190506020830392506125f0565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083106126645780518252602082019150602081019050602083039250612641565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106126b55780518252602082019150602081019050602083039250612692565b6001836020036101000a038019825116818451168082178552505050505050905001965050505050505060405160208183030381529060405290509695505050505050565b60008282604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019250505060405160208183030381529060405280519060200120905092915050565b60006127908360006003811061277457fe5b60200201518360006003811061278657fe5b6020020151612852565b9050600081146127a25780905061280f565b6127ce836001600381106127b257fe5b6020020151836001600381106127c457fe5b6020020151612852565b9050600081146127e05780905061280f565b61280c836002600381106127f057fe5b60200201518360026003811061280257fe5b6020020151612852565b90505b92915050565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b60008260ff168260ff16141561286b57600090506128a6565b8260ff168260ff1610156128a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506128a6565b600190505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128ed57803560ff191683800117855561291b565b8280016001018555821561291b579182015b8281111561291a5782358255916020019190600101906128ff565b5b50905061292891906129ed565b5090565b50805460018160011615610100020316600290046000825580601f106129525750612971565b601f01602090049060005260206000209081019061297091906129ed565b5b50565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060c0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160008019168152602001606081526020016000151581525090565b612a0f91905b80821115612a0b5760008160009055506001016129f3565b5090565b9056fe546865207570677261646520737563636573736f72206d75737420686176652061206869676865722076657273696f6e207468616e207468652063757272656e7420636f6e74726163742e557067726164654f776e65642e7472616e73666572557067726164654f776e6572736869704f6e65206f66206d696772617465546f202f206d69677261746546726f6d2072657475726e65642066616c73652e2041626f7274696e6720757067726164652e546865206d73672e73656e646572206973206e6f74207468652075706772616465206f776e657241627374726163745570677261646561626c652e7072655f68696768657256657273696f6e4f6e6c79546865206e65772075706772616465206f776e6572206d757374206e6f74206265204e554c4c557067726164654f776e65642e7072655f6f6e6c794279557067726164654f776e657243616c6c6572206973206e6f7420706172747920746f2061677265656d656e743a20a265627a7a723158208dc3050861cc1d35ebab93e88ac6d70b8d2d09ff5c2ef2803ab2afa85f4804a564736f6c634300050c0032466f7262696464656e2076616c7565203078666666666666666620666f722045524331363520696e74657266616365";
        bytecode = Replace(bytecode, "$4bfedefce7d76215a620e01b46747fdc01$", agreements_AgreementsAPI_sol_AgreementsAPI);
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        bytecode = Replace(bytecode, "$1483b111869e15ef6c698c5f10f0d4a934$", commons_utils_Strings_sol_Strings);
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogDeleteAgreementDateRelation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogDeleteAgreementDateRelation", this.address, callback); }
        LogInitAgreementDateRelation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogInitAgreementDateRelation", this.address, callback); }
        LogUpgradeOwnerChanged(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogUpgradeOwnerChanged", this.address, callback); }
        ERC165_ID_Upgradeable() {
            const data = Encode(this.client).ERC165_ID_Upgradeable();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_Upgradeable();
            });
        }
        ERC165_ID_VERSIONED_ARTIFACT() {
            const data = Encode(this.client).ERC165_ID_VERSIONED_ARTIFACT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_VERSIONED_ARTIFACT();
            });
        }
        compareArtifactVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareArtifactVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareArtifactVersion();
            });
        }
        getArtifactVersion() {
            const data = Encode(this.client).getArtifactVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersion();
            });
        }
        getArtifactVersionMajor() {
            const data = Encode(this.client).getArtifactVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMajor();
            });
        }
        getArtifactVersionMinor() {
            const data = Encode(this.client).getArtifactVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMinor();
            });
        }
        getArtifactVersionPatch() {
            const data = Encode(this.client).getArtifactVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionPatch();
            });
        }
        getUpgradeOwner() {
            const data = Encode(this.client).getUpgradeOwner();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getUpgradeOwner();
            });
        }
        migrateFrom() {
            const data = Encode(this.client).migrateFrom();
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).migrateFrom();
            });
        }
        migrateTo() {
            const data = Encode(this.client).migrateTo();
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).migrateTo();
            });
        }
        relate(agreementAddress: string, derived: Buffer, base: Buffer, offset: string) {
            const data = Encode(this.client).relate(agreementAddress, derived, base, offset);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).relate();
            });
        }
        remove(agreementAddress: string, derived: Buffer) {
            const data = Encode(this.client).remove(agreementAddress, derived);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).remove();
            });
        }
        supportsInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        transferUpgradeOwnership(_newOwner: string) {
            const data = Encode(this.client).transferUpgradeOwnership(_newOwner);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferUpgradeOwnership();
            });
        }
        upgrade(_successor: string) {
            const data = Encode(this.client).upgrade(_successor);
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).upgrade();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ERC165_ID_Upgradeable: () => { return client.encode("B21C815F", []); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return client.encode("E10533C6", []); },
        compareArtifactVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("5C030138", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("78BC0B0D", ["uint8[3]"], _version);
        },
        getArtifactVersion: () => { return client.encode("756B2E6C", []); },
        getArtifactVersionMajor: () => { return client.encode("57E0EBCA", []); },
        getArtifactVersionMinor: () => { return client.encode("7589ADB7", []); },
        getArtifactVersionPatch: () => { return client.encode("F085F6DD", []); },
        getUpgradeOwner: () => { return client.encode("E7284879", []); },
        migrateFrom: () => { return client.encode("35657E68", []); },
        migrateTo: () => { return client.encode("4DDAF8F2", []); },
        relate: (agreementAddress: string, derived: Buffer, base: Buffer, offset: string) => { return client.encode("222A3A32", ["address", "bytes32", "bytes32", "string"], agreementAddress, derived, base, offset); },
        remove: (agreementAddress: string, derived: Buffer) => { return client.encode("64AFAB72", ["address", "bytes32"], agreementAddress, derived); },
        supportsInterface: (_interfaceId: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceId); },
        transferUpgradeOwnership: (_newOwner: string) => { return client.encode("AC83EC7C", ["address"], _newOwner); },
        upgrade: (_successor: string) => { return client.encode("0900F010", ["address"], _successor); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ERC165_ID_Upgradeable: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        compareArtifactVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        getArtifactVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getArtifactVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        getUpgradeOwner: (): [string] => { return client.decode(data, ["address"]); },
        migrateFrom: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        },
        migrateTo: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        },
        relate: (): void => { return; },
        remove: (): void => { return; },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferUpgradeOwnership: (): void => { return; },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        }
    }; };
}