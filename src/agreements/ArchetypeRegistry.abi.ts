//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CallTx, ContractCodec, Signal, Event, EventStream, listenerFor, Result } from "@hyperledger/burrow";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(returnData);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module ArchetypeRegistry {
    export const contactName = "ArchetypeRegistry";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"packageId","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"LogArchetypePackageActivation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"packageId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"author","type":"address"},{"indexed":false,"internalType":"bool","name":"isPrivate","type":"bool"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"LogArchetypePackageCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"packageId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"archetypeAddress","type":"address"}],"name":"LogArchetypeToPackageUpdate","type":"event"},{"constant":true,"inputs":[],"name":"ERC165_ID_ObjectFactory","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_Upgradeable","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERC165_ID_VERSIONED_ARTIFACT","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_ARCHETYPES","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_ARCHETYPE_PACKAGES","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EVENT_ID_ARCHETYPE_PACKAGE_MAP","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"OBJECT_CLASS_ARCHETYPE","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_author","type":"address"}],"name":"activatePackage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_packageId","type":"bytes32"},{"internalType":"address","name":"_archetype","type":"address"}],"name":"addArchetypeToPackage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"string","name":"_fileReference","type":"string"}],"name":"addDocument","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"bytes2","name":"_country","type":"bytes2"},{"internalType":"bytes32","name":"_region","type":"bytes32"}],"name":"addJurisdiction","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"bytes2[]","name":"_countries","type":"bytes2[]"},{"internalType":"bytes32[]","name":"_regions","type":"bytes32[]"}],"name":"addJurisdictions","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"enum DataTypes.ParameterType","name":"_parameterType","type":"uint8"},{"internalType":"bytes32","name":"_parameterName","type":"bytes32"}],"name":"addParameter","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"enum DataTypes.ParameterType[]","name":"_parameterTypes","type":"uint8[]"},{"internalType":"bytes32[]","name":"_parameterNames","type":"bytes32[]"}],"name":"addParameters","outputs":[{"internalType":"uint256","name":"error","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_other","type":"address"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint8[3]","name":"_version","type":"uint8[3]"}],"name":"compareArtifactVersion","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bool","name":"_isPrivate","type":"bool"},{"internalType":"bool","name":"_active","type":"bool"},{"internalType":"address","name":"_author","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_formationProcess","type":"address"},{"internalType":"address","name":"_executionProcess","type":"address"},{"internalType":"bytes32","name":"_packageId","type":"bytes32"},{"internalType":"address[]","name":"_governingArchetypes","type":"address[]"}],"name":"createArchetype","outputs":[{"internalType":"address","name":"archetype","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_author","type":"address"},{"internalType":"bool","name":"_isPrivate","type":"bool"},{"internalType":"bool","name":"_active","type":"bool"}],"name":"createArchetypePackage","outputs":[{"internalType":"uint256","name":"error","type":"uint256"},{"internalType":"bytes32","name":"id","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_author","type":"address"}],"name":"deactivatePackage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getArchetypeAtIndex","outputs":[{"internalType":"address","name":"archetype","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getArchetypeAtIndexInPackage","outputs":[{"internalType":"address","name":"archetype","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"}],"name":"getArchetypeData","outputs":[{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"author","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"bool","name":"isPrivate","type":"bool"},{"internalType":"address","name":"successor","type":"address"},{"internalType":"address","name":"formationProcessDefinition","type":"address"},{"internalType":"address","name":"executionProcessDefinition","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getArchetypePackageAtIndex","outputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getArchetypePackageData","outputs":[{"internalType":"address","name":"author","type":"address"},{"internalType":"bool","name":"isPrivate","type":"bool"},{"internalType":"bool","name":"active","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"}],"name":"getArchetypeSuccessor","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArchetypesSize","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersion","outputs":[{"internalType":"uint8[3]","name":"","type":"uint8[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMajor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionMinor","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getArtifactVersionPatch","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getGoverningArchetypeAtIndex","outputs":[{"internalType":"address","name":"archetype","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getJurisdictionAtIndexForArchetype","outputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"getJurisdictionDataForArchetype","outputs":[{"internalType":"bytes2","name":"country","type":"bytes2"},{"internalType":"bytes32","name":"region","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfArchetypePackages","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getNumberOfArchetypesInPackage","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"}],"name":"getNumberOfGoverningArchetypes","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"}],"name":"getNumberOfJurisdictionsForArchetype","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getParameterByArchetypeAtIndex","outputs":[{"internalType":"bytes32","name":"name","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"bytes32","name":"_name","type":"bytes32"}],"name":"getParameterByArchetypeData","outputs":[{"internalType":"uint256","name":"position","type":"uint256"},{"internalType":"enum DataTypes.ParameterType","name":"parameterType","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_archetype","type":"address"}],"name":"getParametersByArchetypeSize","outputs":[{"internalType":"uint256","name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_packageId","type":"bytes32"},{"internalType":"address","name":"_archetype","type":"address"}],"name":"packageHasArchetype","outputs":[{"internalType":"bool","name":"hasArchetype","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_archetype","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setArchetypePrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_successor","type":"address"}],"name":"upgrade","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => EventStream;
    const events = { LogArchetypePackageActivation: { signature: "F28FC5959B58C6DCD0FF491115678E72221B7AC69DB1275AF9265EDDEBCEC890", tagged: (eventId: Buffer, packageId: Buffer, active: boolean) => ({ name: "LogArchetypePackageActivation", payload: { eventId: eventId, packageId: packageId, active: active } as const } as const) } as const, LogArchetypePackageCreation: { signature: "F1C38AB7ABE967E483BB00E2556571B33037426B77DDB27A2704A68930053A9B", tagged: (eventId: Buffer, packageId: Buffer, author: string, isPrivate: boolean, active: boolean) => ({ name: "LogArchetypePackageCreation", payload: { eventId: eventId, packageId: packageId, author: author, isPrivate: isPrivate, active: active } as const } as const) } as const, LogArchetypeToPackageUpdate: { signature: "C4121BE009B542B8D5F15B21E4B055CBF761E5B1FAC3ECEEBF4A330949480B9C", tagged: (eventId: Buffer, packageId: Buffer, archetypeAddress: string) => ({ name: "LogArchetypeToPackageUpdate", payload: { eventId: eventId, packageId: packageId, archetypeAddress: archetypeAddress } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { ERC165_ID_ObjectFactory(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_ObjectFactory();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_ObjectFactory();
                });
            }, ERC165_ID_Upgradeable(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_Upgradeable();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_Upgradeable();
                });
            }, ERC165_ID_VERSIONED_ARTIFACT(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).ERC165_ID_VERSIONED_ARTIFACT();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).ERC165_ID_VERSIONED_ARTIFACT();
                });
            }, EVENT_ID_ARCHETYPES(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_ARCHETYPES();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_ARCHETYPES();
                });
            }, EVENT_ID_ARCHETYPE_PACKAGES(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_ARCHETYPE_PACKAGES();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_ARCHETYPE_PACKAGES();
                });
            }, EVENT_ID_ARCHETYPE_PACKAGE_MAP(call = defaultCall): Promise<[
                Buffer
            ]> {
                const data = encode(client).EVENT_ID_ARCHETYPE_PACKAGE_MAP();
                return call<[
                    Buffer
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).EVENT_ID_ARCHETYPE_PACKAGE_MAP();
                });
            }, OBJECT_CLASS_ARCHETYPE(call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).OBJECT_CLASS_ARCHETYPE();
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).OBJECT_CLASS_ARCHETYPE();
                });
            }, activatePackage(_id: Buffer, _author: string, call = defaultCall): Promise<void> {
                const data = encode(client).activatePackage(_id, _author);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).activatePackage();
                });
            }, addArchetypeToPackage(_packageId: Buffer, _archetype: string, call = defaultCall): Promise<void> {
                const data = encode(client).addArchetypeToPackage(_packageId, _archetype);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addArchetypeToPackage();
                });
            }, addDocument(_archetype: string, _fileReference: string, call = defaultCall): Promise<void> {
                const data = encode(client).addDocument(_archetype, _fileReference);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addDocument();
                });
            }, addJurisdiction(_archetype: string, _country: Buffer, _region: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addJurisdiction(_archetype, _country, _region);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addJurisdiction();
                });
            }, addJurisdictions(_archetype: string, _countries: Buffer[], _regions: Buffer[], call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addJurisdictions(_archetype, _countries, _regions);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addJurisdictions();
                });
            }, addParameter(_archetype: string, _parameterType: number, _parameterName: Buffer, call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addParameter(_archetype, _parameterType, _parameterName);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addParameter();
                });
            }, addParameters(_archetype: string, _parameterTypes: number[], _parameterNames: Buffer[], call = defaultCall): Promise<{
                error: number;
            }> {
                const data = encode(client).addParameters(_archetype, _parameterTypes, _parameterNames);
                return call<{
                    error: number;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).addParameters();
                });
            }, compareArtifactVersion(_other: string, call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[0](_other);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[0]();
                });
            }, compareArtifactVersion_1(_version: [
                number,
                number,
                number
            ], call = defaultCall): Promise<{
                result: number;
            }> {
                const data = encode(client).compareArtifactVersion[1](_version);
                return call<{
                    result: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).compareArtifactVersion[1]();
                });
            }, createArchetype(_price: number, _isPrivate: boolean, _active: boolean, _author: string, _owner: string, _formationProcess: string, _executionProcess: string, _packageId: Buffer, _governingArchetypes: string[], call = defaultCall): Promise<{
                archetype: string;
            }> {
                const data = encode(client).createArchetype(_price, _isPrivate, _active, _author, _owner, _formationProcess, _executionProcess, _packageId, _governingArchetypes);
                return call<{
                    archetype: string;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createArchetype();
                });
            }, createArchetypePackage(_author: string, _isPrivate: boolean, _active: boolean, call = defaultCall): Promise<{
                error: number;
                id: Buffer;
            }> {
                const data = encode(client).createArchetypePackage(_author, _isPrivate, _active);
                return call<{
                    error: number;
                    id: Buffer;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).createArchetypePackage();
                });
            }, deactivatePackage(_id: Buffer, _author: string, call = defaultCall): Promise<void> {
                const data = encode(client).deactivatePackage(_id, _author);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).deactivatePackage();
                });
            }, getArchetypeAtIndex(_index: number, call = defaultCall): Promise<{
                archetype: string;
            }> {
                const data = encode(client).getArchetypeAtIndex(_index);
                return call<{
                    archetype: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypeAtIndex();
                });
            }, getArchetypeAtIndexInPackage(_id: Buffer, _index: number, call = defaultCall): Promise<{
                archetype: string;
            }> {
                const data = encode(client).getArchetypeAtIndexInPackage(_id, _index);
                return call<{
                    archetype: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypeAtIndexInPackage();
                });
            }, getArchetypeData(_archetype: string, call = defaultCall): Promise<{
                price: number;
                author: string;
                owner: string;
                active: boolean;
                isPrivate: boolean;
                successor: string;
                formationProcessDefinition: string;
                executionProcessDefinition: string;
            }> {
                const data = encode(client).getArchetypeData(_archetype);
                return call<{
                    price: number;
                    author: string;
                    owner: string;
                    active: boolean;
                    isPrivate: boolean;
                    successor: string;
                    formationProcessDefinition: string;
                    executionProcessDefinition: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypeData();
                });
            }, getArchetypePackageAtIndex(_index: number, call = defaultCall): Promise<{
                id: Buffer;
            }> {
                const data = encode(client).getArchetypePackageAtIndex(_index);
                return call<{
                    id: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypePackageAtIndex();
                });
            }, getArchetypePackageData(_id: Buffer, call = defaultCall): Promise<{
                author: string;
                isPrivate: boolean;
                active: boolean;
            }> {
                const data = encode(client).getArchetypePackageData(_id);
                return call<{
                    author: string;
                    isPrivate: boolean;
                    active: boolean;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypePackageData();
                });
            }, getArchetypeSuccessor(_archetype: string, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).getArchetypeSuccessor(_archetype);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypeSuccessor();
                });
            }, getArchetypesSize(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getArchetypesSize();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArchetypesSize();
                });
            }, getArtifactVersion(call = defaultCall): Promise<[
                [
                    number,
                    number,
                    number
                ]
            ]> {
                const data = encode(client).getArtifactVersion();
                return call<[
                    [
                        number,
                        number,
                        number
                    ]
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersion();
                });
            }, getArtifactVersionMajor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMajor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMajor();
                });
            }, getArtifactVersionMinor(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionMinor();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionMinor();
                });
            }, getArtifactVersionPatch(call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).getArtifactVersionPatch();
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getArtifactVersionPatch();
                });
            }, getGoverningArchetypeAtIndex(_archetype: string, _index: number, call = defaultCall): Promise<{
                archetype: string;
            }> {
                const data = encode(client).getGoverningArchetypeAtIndex(_archetype, _index);
                return call<{
                    archetype: string;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getGoverningArchetypeAtIndex();
                });
            }, getJurisdictionAtIndexForArchetype(_archetype: string, _index: number, call = defaultCall): Promise<{
                key: Buffer;
            }> {
                const data = encode(client).getJurisdictionAtIndexForArchetype(_archetype, _index);
                return call<{
                    key: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getJurisdictionAtIndexForArchetype();
                });
            }, getJurisdictionDataForArchetype(_archetype: string, _key: Buffer, call = defaultCall): Promise<{
                country: Buffer;
                region: Buffer;
            }> {
                const data = encode(client).getJurisdictionDataForArchetype(_archetype, _key);
                return call<{
                    country: Buffer;
                    region: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getJurisdictionDataForArchetype();
                });
            }, getNumberOfArchetypePackages(call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfArchetypePackages();
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfArchetypePackages();
                });
            }, getNumberOfArchetypesInPackage(_id: Buffer, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfArchetypesInPackage(_id);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfArchetypesInPackage();
                });
            }, getNumberOfGoverningArchetypes(_archetype: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfGoverningArchetypes(_archetype);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfGoverningArchetypes();
                });
            }, getNumberOfJurisdictionsForArchetype(_archetype: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getNumberOfJurisdictionsForArchetype(_archetype);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getNumberOfJurisdictionsForArchetype();
                });
            }, getParameterByArchetypeAtIndex(_archetype: string, _index: number, call = defaultCall): Promise<{
                name: Buffer;
            }> {
                const data = encode(client).getParameterByArchetypeAtIndex(_archetype, _index);
                return call<{
                    name: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getParameterByArchetypeAtIndex();
                });
            }, getParameterByArchetypeData(_archetype: string, _name: Buffer, call = defaultCall): Promise<{
                position: number;
                parameterType: number;
            }> {
                const data = encode(client).getParameterByArchetypeData(_archetype, _name);
                return call<{
                    position: number;
                    parameterType: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getParameterByArchetypeData();
                });
            }, getParametersByArchetypeSize(_archetype: string, call = defaultCall): Promise<{
                size: number;
            }> {
                const data = encode(client).getParametersByArchetypeSize(_archetype);
                return call<{
                    size: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).getParametersByArchetypeSize();
                });
            }, packageHasArchetype(_packageId: Buffer, _archetype: string, call = defaultCall): Promise<{
                hasArchetype: boolean;
            }> {
                const data = encode(client).packageHasArchetype(_packageId, _archetype);
                return call<{
                    hasArchetype: boolean;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).packageHasArchetype();
                });
            }, setArchetypePrice(_archetype: string, _price: number, call = defaultCall): Promise<void> {
                const data = encode(client).setArchetypePrice(_archetype, _price);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).setArchetypePrice();
                });
            }, upgrade(_successor: string, call = defaultCall): Promise<{
                success: boolean;
            }> {
                const data = encode(client).upgrade(_successor);
                return call<{
                    success: boolean;
                }>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).upgrade();
                });
            } } as const, listeners: { LogArchetypePackageActivation(callback: (err?: Error, event?: {
                eventId: Buffer;
                packageId: Buffer;
                active: boolean;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["F28FC5959B58C6DCD0FF491115678E72221B7AC69DB1275AF9265EDDEBCEC890"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogArchetypePackageActivation()); }, start, end); }, LogArchetypePackageCreation(callback: (err?: Error, event?: {
                eventId: Buffer;
                packageId: Buffer;
                author: string;
                isPrivate: boolean;
                active: boolean;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["F1C38AB7ABE967E483BB00E2556571B33037426B77DDB27A2704A68930053A9B"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogArchetypePackageCreation()); }, start, end); }, LogArchetypeToPackageUpdate(callback: (err?: Error, event?: {
                eventId: Buffer;
                packageId: Buffer;
                archetypeAddress: string;
            }) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream { return client.listen(["C4121BE009B542B8D5F15B21E4B055CBF761E5B1FAC3ECEEBF4A330949480B9C"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.getLog()?.getData_asU8(), event?.getLog()?.getTopicsList_asU8()).LogArchetypeToPackageUpdate()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        ERC165_ID_ObjectFactory: () => { return codec.encodeFunctionData("54AF67B7"); },
        ERC165_ID_Upgradeable: () => { return codec.encodeFunctionData("B21C815F"); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return codec.encodeFunctionData("E10533C6"); },
        EVENT_ID_ARCHETYPES: () => { return codec.encodeFunctionData("378AFC8C"); },
        EVENT_ID_ARCHETYPE_PACKAGES: () => { return codec.encodeFunctionData("3921F39F"); },
        EVENT_ID_ARCHETYPE_PACKAGE_MAP: () => { return codec.encodeFunctionData("A84C8382"); },
        OBJECT_CLASS_ARCHETYPE: () => { return codec.encodeFunctionData("F34D4D6F"); },
        activatePackage: (_id: Buffer, _author: string) => { return codec.encodeFunctionData("E8AA4459", _id, _author); },
        addArchetypeToPackage: (_packageId: Buffer, _archetype: string) => { return codec.encodeFunctionData("B8019B68", _packageId, _archetype); },
        addDocument: (_archetype: string, _fileReference: string) => { return codec.encodeFunctionData("65668764", _archetype, _fileReference); },
        addJurisdiction: (_archetype: string, _country: Buffer, _region: Buffer) => { return codec.encodeFunctionData("F0B5C5A2", _archetype, _country, _region); },
        addJurisdictions: (_archetype: string, _countries: Buffer[], _regions: Buffer[]) => { return codec.encodeFunctionData("C22AF3A4", _archetype, _countries, _regions); },
        addParameter: (_archetype: string, _parameterType: number, _parameterName: Buffer) => { return codec.encodeFunctionData("846AF908", _archetype, _parameterType, _parameterName); },
        addParameters: (_archetype: string, _parameterTypes: number[], _parameterNames: Buffer[]) => { return codec.encodeFunctionData("8F9AB49A", _archetype, _parameterTypes, _parameterNames); },
        compareArtifactVersion: [(_other: string) => { return codec.encodeFunctionData("5C030138", _other); }, (_version: [
                number,
                number,
                number
            ]) => { return codec.encodeFunctionData("78BC0B0D", _version); }] as const,
        createArchetype: (_price: number, _isPrivate: boolean, _active: boolean, _author: string, _owner: string, _formationProcess: string, _executionProcess: string, _packageId: Buffer, _governingArchetypes: string[]) => { return codec.encodeFunctionData("4DBCD737", _price, _isPrivate, _active, _author, _owner, _formationProcess, _executionProcess, _packageId, _governingArchetypes); },
        createArchetypePackage: (_author: string, _isPrivate: boolean, _active: boolean) => { return codec.encodeFunctionData("80557F01", _author, _isPrivate, _active); },
        deactivatePackage: (_id: Buffer, _author: string) => { return codec.encodeFunctionData("86F89290", _id, _author); },
        getArchetypeAtIndex: (_index: number) => { return codec.encodeFunctionData("D119D31E", _index); },
        getArchetypeAtIndexInPackage: (_id: Buffer, _index: number) => { return codec.encodeFunctionData("861F6214", _id, _index); },
        getArchetypeData: (_archetype: string) => { return codec.encodeFunctionData("72A61096", _archetype); },
        getArchetypePackageAtIndex: (_index: number) => { return codec.encodeFunctionData("FF93E8FB", _index); },
        getArchetypePackageData: (_id: Buffer) => { return codec.encodeFunctionData("1BA8F89C", _id); },
        getArchetypeSuccessor: (_archetype: string) => { return codec.encodeFunctionData("6C3AD00E", _archetype); },
        getArchetypesSize: () => { return codec.encodeFunctionData("077738D8"); },
        getArtifactVersion: () => { return codec.encodeFunctionData("756B2E6C"); },
        getArtifactVersionMajor: () => { return codec.encodeFunctionData("57E0EBCA"); },
        getArtifactVersionMinor: () => { return codec.encodeFunctionData("7589ADB7"); },
        getArtifactVersionPatch: () => { return codec.encodeFunctionData("F085F6DD"); },
        getGoverningArchetypeAtIndex: (_archetype: string, _index: number) => { return codec.encodeFunctionData("0662931D", _archetype, _index); },
        getJurisdictionAtIndexForArchetype: (_archetype: string, _index: number) => { return codec.encodeFunctionData("1095479D", _archetype, _index); },
        getJurisdictionDataForArchetype: (_archetype: string, _key: Buffer) => { return codec.encodeFunctionData("587BCFDA", _archetype, _key); },
        getNumberOfArchetypePackages: () => { return codec.encodeFunctionData("11D751E1"); },
        getNumberOfArchetypesInPackage: (_id: Buffer) => { return codec.encodeFunctionData("A2960207", _id); },
        getNumberOfGoverningArchetypes: (_archetype: string) => { return codec.encodeFunctionData("A60A0666", _archetype); },
        getNumberOfJurisdictionsForArchetype: (_archetype: string) => { return codec.encodeFunctionData("F0EAA7AC", _archetype); },
        getParameterByArchetypeAtIndex: (_archetype: string, _index: number) => { return codec.encodeFunctionData("7E712DCB", _archetype, _index); },
        getParameterByArchetypeData: (_archetype: string, _name: Buffer) => { return codec.encodeFunctionData("9E4A88CF", _archetype, _name); },
        getParametersByArchetypeSize: (_archetype: string) => { return codec.encodeFunctionData("E7C541FE", _archetype); },
        packageHasArchetype: (_packageId: Buffer, _archetype: string) => { return codec.encodeFunctionData("5BADA39A", _packageId, _archetype); },
        setArchetypePrice: (_archetype: string, _price: number) => { return codec.encodeFunctionData("0ECFF8A1", _archetype, _price); },
        upgrade: (_successor: string) => { return codec.encodeFunctionData("0900F010", _successor); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogArchetypePackageActivation: (): {
            eventId: Buffer;
            packageId: Buffer;
            active: boolean;
        } => {
            const [eventId, packageId, active] = codec.decodeEventLog ("F28FC5959B58C6DCD0FF491115678E72221B7AC69DB1275AF9265EDDEBCEC890", data, topics);
            return { eventId: eventId, packageId: packageId, active: active };
        },
        LogArchetypePackageCreation: (): {
            eventId: Buffer;
            packageId: Buffer;
            author: string;
            isPrivate: boolean;
            active: boolean;
        } => {
            const [eventId, packageId, author, isPrivate, active] = codec.decodeEventLog ("F1C38AB7ABE967E483BB00E2556571B33037426B77DDB27A2704A68930053A9B", data, topics);
            return { eventId: eventId, packageId: packageId, author: author, isPrivate: isPrivate, active: active };
        },
        LogArchetypeToPackageUpdate: (): {
            eventId: Buffer;
            packageId: Buffer;
            archetypeAddress: string;
        } => {
            const [eventId, packageId, archetypeAddress] = codec.decodeEventLog ("C4121BE009B542B8D5F15B21E4B055CBF761E5B1FAC3ECEEBF4A330949480B9C", data, topics);
            return { eventId: eventId, packageId: packageId, archetypeAddress: archetypeAddress };
        },
        ERC165_ID_ObjectFactory: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("54AF67B7", data); },
        ERC165_ID_Upgradeable: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("B21C815F", data); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("E10533C6", data); },
        EVENT_ID_ARCHETYPES: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("378AFC8C", data); },
        EVENT_ID_ARCHETYPE_PACKAGES: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("3921F39F", data); },
        EVENT_ID_ARCHETYPE_PACKAGE_MAP: (): [
            Buffer
        ] => { return codec.decodeFunctionResult ("A84C8382", data); },
        OBJECT_CLASS_ARCHETYPE: (): [
            string
        ] => { return codec.decodeFunctionResult ("F34D4D6F", data); },
        activatePackage: (): void => { return; },
        addArchetypeToPackage: (): void => { return; },
        addDocument: (): void => { return; },
        addJurisdiction: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("F0B5C5A2", data);
            return { error: error };
        },
        addJurisdictions: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("C22AF3A4", data);
            return { error: error };
        },
        addParameter: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("846AF908", data);
            return { error: error };
        },
        addParameters: (): {
            error: number;
        } => {
            const [error] = codec.decodeFunctionResult ("8F9AB49A", data);
            return { error: error };
        },
        compareArtifactVersion: [(): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("5C030138", data);
                return { result: result };
            }, (): {
                result: number;
            } => {
                const [result] = codec.decodeFunctionResult ("78BC0B0D", data);
                return { result: result };
            }] as const,
        createArchetype: (): {
            archetype: string;
        } => {
            const [archetype] = codec.decodeFunctionResult ("4DBCD737", data);
            return { archetype: archetype };
        },
        createArchetypePackage: (): {
            error: number;
            id: Buffer;
        } => {
            const [error, id] = codec.decodeFunctionResult ("80557F01", data);
            return { error: error, id: id };
        },
        deactivatePackage: (): void => { return; },
        getArchetypeAtIndex: (): {
            archetype: string;
        } => {
            const [archetype] = codec.decodeFunctionResult ("D119D31E", data);
            return { archetype: archetype };
        },
        getArchetypeAtIndexInPackage: (): {
            archetype: string;
        } => {
            const [archetype] = codec.decodeFunctionResult ("861F6214", data);
            return { archetype: archetype };
        },
        getArchetypeData: (): {
            price: number;
            author: string;
            owner: string;
            active: boolean;
            isPrivate: boolean;
            successor: string;
            formationProcessDefinition: string;
            executionProcessDefinition: string;
        } => {
            const [price, author, owner, active, isPrivate, successor, formationProcessDefinition, executionProcessDefinition] = codec.decodeFunctionResult ("72A61096", data);
            return { price: price, author: author, owner: owner, active: active, isPrivate: isPrivate, successor: successor, formationProcessDefinition: formationProcessDefinition, executionProcessDefinition: executionProcessDefinition };
        },
        getArchetypePackageAtIndex: (): {
            id: Buffer;
        } => {
            const [id] = codec.decodeFunctionResult ("FF93E8FB", data);
            return { id: id };
        },
        getArchetypePackageData: (): {
            author: string;
            isPrivate: boolean;
            active: boolean;
        } => {
            const [author, isPrivate, active] = codec.decodeFunctionResult ("1BA8F89C", data);
            return { author: author, isPrivate: isPrivate, active: active };
        },
        getArchetypeSuccessor: (): [
            string
        ] => { return codec.decodeFunctionResult ("6C3AD00E", data); },
        getArchetypesSize: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("077738D8", data);
            return { size: size };
        },
        getArtifactVersion: (): [
            [
                number,
                number,
                number
            ]
        ] => { return codec.decodeFunctionResult ("756B2E6C", data); },
        getArtifactVersionMajor: (): [
            number
        ] => { return codec.decodeFunctionResult ("57E0EBCA", data); },
        getArtifactVersionMinor: (): [
            number
        ] => { return codec.decodeFunctionResult ("7589ADB7", data); },
        getArtifactVersionPatch: (): [
            number
        ] => { return codec.decodeFunctionResult ("F085F6DD", data); },
        getGoverningArchetypeAtIndex: (): {
            archetype: string;
        } => {
            const [archetype] = codec.decodeFunctionResult ("0662931D", data);
            return { archetype: archetype };
        },
        getJurisdictionAtIndexForArchetype: (): {
            key: Buffer;
        } => {
            const [key] = codec.decodeFunctionResult ("1095479D", data);
            return { key: key };
        },
        getJurisdictionDataForArchetype: (): {
            country: Buffer;
            region: Buffer;
        } => {
            const [country, region] = codec.decodeFunctionResult ("587BCFDA", data);
            return { country: country, region: region };
        },
        getNumberOfArchetypePackages: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("11D751E1", data);
            return { size: size };
        },
        getNumberOfArchetypesInPackage: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("A2960207", data);
            return { size: size };
        },
        getNumberOfGoverningArchetypes: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("A60A0666", data);
            return { size: size };
        },
        getNumberOfJurisdictionsForArchetype: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("F0EAA7AC", data);
            return { size: size };
        },
        getParameterByArchetypeAtIndex: (): {
            name: Buffer;
        } => {
            const [name] = codec.decodeFunctionResult ("7E712DCB", data);
            return { name: name };
        },
        getParameterByArchetypeData: (): {
            position: number;
            parameterType: number;
        } => {
            const [position, parameterType] = codec.decodeFunctionResult ("9E4A88CF", data);
            return { position: position, parameterType: parameterType };
        },
        getParametersByArchetypeSize: (): {
            size: number;
        } => {
            const [size] = codec.decodeFunctionResult ("E7C541FE", data);
            return { size: size };
        },
        packageHasArchetype: (): {
            hasArchetype: boolean;
        } => {
            const [hasArchetype] = codec.decodeFunctionResult ("5BADA39A", data);
            return { hasArchetype: hasArchetype };
        },
        setArchetypePrice: (): void => { return; },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = codec.decodeFunctionResult ("0900F010", data);
            return { success: success };
        }
    }; };
}