//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module RenewalWindowManager {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string, _service: string): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b50604051611dfb380380611dfb8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611d67806100946000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e3b23bf1461005c5780635d536544146100c0578063867c715114610142578063a837c737146101ba578063f472b918146101f2575b600080fd5b6100be6004803603604081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610301565b005b610140600480360360a08110156100d657600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061051e565b005b6101b86004803603608081101561015857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610938565b005b6101f0600480360360408110156101d057600080fd5b810190808035906020019092919080359060200190929190505050611370565b005b6102ff600480360360a081101561020857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460018302840111640100000000831117156102ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611762565b005b60008090505b8173ffffffffffffffffffffffffffffffffffffffff1663d779c8a16040518163ffffffff1660e01b815260040160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d602081101561037757600080fd5b81019080805190602001909291905050508110156105195760008273ffffffffffffffffffffffffffffffffffffffff16636a78a815836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d602081101561040c57600080fd5b810190808051906020019092919050505090507f414e3a2f2f61677265656d656e742d77696e646f772d6d616e616765720000007f3c21115bafb882d47eee93f2b1226502c46a815fda34550c15d9e939013b7eed848684604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a2508080600101915050610307565b505050565b60608373ffffffffffffffffffffffffffffffffffffffff166340514a1a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a08110156105a457600080fd5b810190808051906020019092919080519060200190929190805160405193929190846401000000008211156105d857600080fd5b838201915060208201858111156105ee57600080fd5b825186600182028301116401000000008211171561060b57600080fd5b8083526020830192505050908051906020019080838360005b8381101561063f578082015181840152602081019050610624565b50505050905090810190601f16801561066c5780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561068f57600080fd5b838201915060208201858111156106a557600080fd5b82518660018202830111640100000000821117156106c257600080fd5b8083526020830192505050908051906020019080838360005b838110156106f65780820151818401526020810190506106db565b50505050905090810190601f1680156107235780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561074657600080fd5b8382019150602082018581111561075c57600080fd5b825186600182028301116401000000008211171561077957600080fd5b8083526020830192505050908051906020019080838360005b838110156107ad578082015181840152602081019050610792565b50505050905090810190601f1680156107da5780820380516001836020036101000a031916815260200191505b506040525050509091929350909192509091509050809150507f414e3a2f2f61677265656d656e742d77696e646f772d6d616e616765720000007f1ca185d316a47657d0fba2271a328a254c2d8554ea0bf4f8cc9850d68c7f391a878787878787604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108f15780820151818401526020810190506108d6565b50505050905090810190601f16801561091e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a2505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663481ea63d856040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156109b557600080fd5b505af11580156109c9573d6000803e3d6000fd5b505050506040513d60208110156109df57600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a44611b9f565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610aa5578082015181840152602081019050610a8a565b50505050905090810190601f168015610ad25780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c57696e646f774d616e616765722e636f6d706c65746500000081525060200184810382526036815260200180611c23603691396040019550505050505060006040518083038186803b158015610b3d57600080fd5b505af4158015610b51573d6000803e3d6000fd5b50505050600060608273ffffffffffffffffffffffffffffffffffffffff166340514a1a6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b9f57600080fd5b505afa158015610bb3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a0811015610bdd57600080fd5b81019080805190602001909291908051906020019092919080516040519392919084640100000000821115610c1157600080fd5b83820191506020820185811115610c2757600080fd5b8251866001820283011164010000000082111715610c4457600080fd5b8083526020830192505050908051906020019080838360005b83811015610c78578082015181840152602081019050610c5d565b50505050905090810190601f168015610ca55780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610cc857600080fd5b83820191506020820185811115610cde57600080fd5b8251866001820283011164010000000082111715610cfb57600080fd5b8083526020830192505050908051906020019080838360005b83811015610d2f578082015181840152602081019050610d14565b50505050905090810190601f168015610d5c5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610d7f57600080fd5b83820191506020820185811115610d9557600080fd5b8251866001820283011164010000000082111715610db257600080fd5b8083526020830192505050908051906020019080838360005b83811015610de6578082015181840152602081019050610dcb565b50505050905090810190601f168015610e135780820380516001836020036101000a031916815260200191505b50604052505050909192935090915050809250819350505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60008414610e51611b9f565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610eb2578082015181840152602081019050610e97565b50505050905090810190601f168015610edf5780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c57696e646f774d616e616765722e636f6d706c65746500000081525060200184810382526040815260200180611c59604091396040019550505050505060006040518083038186803b158015610f4a57600080fd5b505af4158015610f5e573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef6000835114610f89611b9f565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610fea578082015181840152602081019050610fcf565b50505050905090810190601f1680156110175780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c57696e646f774d616e616765722e636f6d706c6574650000008152506020018481038252603d815260200180611cf6603d91396040019550505050505060006040518083038186803b15801561108257600080fd5b505af4158015611096573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16638c2a4dae6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110e257600080fd5b505af11580156110f6573d6000803e3d6000fd5b505050506111078688858585611762565b6111118784610301565b7f414e3a2f2f61677265656d656e742d77696e646f772d6d616e616765720000007fdf1cd343c529c60efdd91510c41749ec31757eec18e41320cf894fd57b0a61338787868b898888604051808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611242578082015181840152602081019050611227565b50505050905090810190601f16801561126f5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a261128f8686858a8661051e565b866001600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600088815260200190815260200160002060010160146101000a81548160ff02191690831515021790555050505050505050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef6001600085815260200190815260200160002060010160149054906101000a900460ff16156113b7611bdc565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156114185780820151818401526020810190506113fd565b50505050905090810190601f1680156114455780820380516001836020036101000a031916815260200191505b508481038352602b815260200180611c99602b913960400184810382526032815260200180611cc4603291396040019550505050505060006040518083038186803b15801561149357600080fd5b505af41580156114a7573d6000803e3d6000fd5b5050505060006001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663c6e8dfd0846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561157457600080fd5b505af1158015611588573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663c0647c2e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115d457600080fd5b505af11580156115e8573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166368180951866000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561169657600080fd5b505af11580156116aa573d6000803e3d6000fd5b505050506040513d60208110156116c057600080fd5b810190808051906020019092919050505090506116db611c19565b81141561175b5760016000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549060ff021916905550505b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663a32dd3b2877f70656e64696e67557365725461736b49640000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156117df57600080fd5b505af11580156117f3573d6000803e3d6000fd5b505050506040513d602081101561180957600080fd5b8101908080519060200190929190505050905060008114611b975760008090505b8573ffffffffffffffffffffffffffffffffffffffff1663d8619d806040518163ffffffff1660e01b815260040160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d602081101561189a57600080fd5b8101908080519060200190929190505050811015611b955760008673ffffffffffffffffffffffffffffffffffffffff166321cb9b63836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d602081101561192f57600080fd5b810190808051906020019092919050505090506000808873ffffffffffffffffffffffffffffffffffffffff1663db8168fc846040518263ffffffff1660e01b81526004018082815260200191505060c06040518083038186803b15801561199657600080fd5b505afa1580156119aa573d6000803e3d6000fd5b505050506040513d60c08110156119c057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050505093505050915081851415611b85577f414e3a2f2f61677265656d656e742d77696e646f772d6d616e616765720000007f0dc7d163f19432808c3206ef71e818b2a1a182c882e42681e9b0cfb09bd6b83584848b8d868d8d604051808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b44578082015181840152602081019050611b29565b50505050905090810190601f168015611b715780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a25b505050808060010191505061182a565b505b505050505050565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b6000600190509056fe456d7074792061677265656d656e74206164647265737320666f756e64206f6e20676976656e2050726f63657373496e7374616e636565787069726174696f6e4461746520697320302e204d75737420626520612076616c69642074696d6520666f7220616374697669747920746f20636c6f73652e52656e6577616c57696e646f774d616e616765722e7465726d696e61746552656e6577616c57696e646f775468652070726f7669646564204163746976697479496e7374616e6365204944206973206e6f742072656769737465726564636c6f73654f666673657420697320656d7074792e204d75737420626520612076616c69642049534f2038363031206f666673657420737472696e672ea265627a7a7231582012614223de4b9875fdd1787ec5294c5ac95f4d1a1fb281bda3e29a67fcabb0f764736f6c634300050c0032";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        const data = bytecode + client.encode("", ["address"], _service);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogAgreementExpirationTimestampRequest(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogAgreementExpirationTimestampRequest", this.address, callback); }
        LogPendingUserTaskCloseOffset(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogPendingUserTaskCloseOffset", this.address, callback); }
        LogRenewalVoteNotificationTrigger(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogRenewalVoteNotificationTrigger", this.address, callback); }
        LogRenewalWindowCloseOffset(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogRenewalWindowCloseOffset", this.address, callback); }
        complete(_piAddress: string, _activityInstanceId: Buffer, _activityId: Buffer, _txPerformer: string) {
            const data = Encode(this.client).complete(_piAddress, _activityInstanceId, _activityId, _txPerformer);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).complete();
            });
        }
        emitExpirationTimestampRequest(_activityInstanceId: Buffer, _activityId: Buffer, _agreement: string, _piAddress: string, _expirationDate: number) {
            const data = Encode(this.client).emitExpirationTimestampRequest(_activityInstanceId, _activityId, _agreement, _piAddress, _expirationDate);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).emitExpirationTimestampRequest();
            });
        }
        emitFranchiseeDetails(_piAddress: string, _agreement: string) {
            const data = Encode(this.client).emitFranchiseeDetails(_piAddress, _agreement);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).emitFranchiseeDetails();
            });
        }
        emitPendingUserTaskDetails(_activityInstanceId: Buffer, _piAddress: string, _agreement: string, _datetime: number, _offset: string) {
            const data = Encode(this.client).emitPendingUserTaskDetails(_activityInstanceId, _piAddress, _agreement, _datetime, _offset);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).emitPendingUserTaskDetails();
            });
        }
        terminateRenewalWindow(_terminateActivityId: Buffer, _nextExpirationDate: number) {
            const data = Encode(this.client).terminateRenewalWindow(_terminateActivityId, _nextExpirationDate);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).terminateRenewalWindow();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        complete: (_piAddress: string, _activityInstanceId: Buffer, _activityId: Buffer, _txPerformer: string) => { return client.encode("867C7151", ["address", "bytes32", "bytes32", "address"], _piAddress, _activityInstanceId, _activityId, _txPerformer); },
        emitExpirationTimestampRequest: (_activityInstanceId: Buffer, _activityId: Buffer, _agreement: string, _piAddress: string, _expirationDate: number) => { return client.encode("5D536544", ["bytes32", "bytes32", "address", "address", "int256"], _activityInstanceId, _activityId, _agreement, _piAddress, _expirationDate); },
        emitFranchiseeDetails: (_piAddress: string, _agreement: string) => { return client.encode("2E3B23BF", ["address", "address"], _piAddress, _agreement); },
        emitPendingUserTaskDetails: (_activityInstanceId: Buffer, _piAddress: string, _agreement: string, _datetime: number, _offset: string) => { return client.encode("F472B918", ["bytes32", "address", "address", "int256", "string"], _activityInstanceId, _piAddress, _agreement, _datetime, _offset); },
        terminateRenewalWindow: (_terminateActivityId: Buffer, _nextExpirationDate: number) => { return client.encode("A837C737", ["bytes32", "int256"], _terminateActivityId, _nextExpirationDate); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        complete: (): void => { return; },
        emitExpirationTimestampRequest: (): void => { return; },
        emitFranchiseeDetails: (): void => { return; },
        emitPendingUserTaskDetails: (): void => { return; },
        terminateRenewalWindow: (): void => { return; }
    }; };
}