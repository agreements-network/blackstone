//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module RenewalInitializer {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b506104c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806308e3ca751461003b578063867c715114610059575b600080fd5b6100436100d1565b6040518082815260200191505060405180910390f35b6100cf6004803603608081101561006f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100f5565b005b7f72656e6577616c4c6f6f704261636b000000000000000000000000000000000081565b60008473ffffffffffffffffffffffffffffffffffffffff1663481ea63d856040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561017257600080fd5b505af1158015610186573d6000803e3d6000fd5b505050506040513d602081101561019c57600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610201610419565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610262578082015181840152602081019050610247565b50505050905090810190601f16801561028f5780820380516001836020036101000a031916815260200191505b508481038352601b8152602001807f52656e6577616c496e697469616c697a65722e636f6d706c657465000000000081525060200184810382526036815260200180610457603691396040019550505050505060006040518083038186803b1580156102fa57600080fd5b505af415801561030e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166372ea18266040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16639cc222bd857f72656e6577616c4c6f6f704261636b000000000000000000000000000000000060006040518463ffffffff1660e01b815260040180848152602001838152602001821515151581526020019350505050600060405180830381600087803b1580156103fa57600080fd5b505af115801561040e573d6000803e3d6000fd5b505050505050505050565b60606040518060400160405280600681526020017f455252363030000000000000000000000000000000000000000000000000000081525090509056fe456d7074792061677265656d656e74206164647265737320666f756e64206f6e20676976656e2050726f63657373496e7374616e6365a265627a7a72315820058ca931de5ff4f2129cc2dba89b2e460c6317e039a6bb15ba462f48272d643f64736f6c634300050c0032";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        DATA_ID_RENEWAL_LOOP_BACK() {
            const data = Encode(this.client).DATA_ID_RENEWAL_LOOP_BACK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).DATA_ID_RENEWAL_LOOP_BACK();
            });
        }
        complete(_piAddress: string, _activityInstanceId: Buffer) {
            const data = Encode(this.client).complete(_piAddress, _activityInstanceId);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).complete();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        DATA_ID_RENEWAL_LOOP_BACK: () => { return client.encode("08E3CA75", []); },
        complete: (_piAddress: string, _activityInstanceId: Buffer) => { return client.encode("867C7151", ["address", "bytes32"], _piAddress, _activityInstanceId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        DATA_ID_RENEWAL_LOOP_BACK: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        complete: (): void => { return; }
    }; };
}