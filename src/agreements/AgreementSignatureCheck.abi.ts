//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module AgreementSignatureCheck {
    export const contactName = "AgreementSignatureCheck";
    export const abi = '[{"constant":false,"inputs":[{"internalType":"address","name":"_piAddress","type":"address"},{"internalType":"bytes32","name":"_activityInstanceId","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"_txPerformer","type":"address"}],"name":"complete","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    export const bytecode = '608060405234801561001057600080fd5b50610398806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063867c715114610030575b600080fd5b6100a66004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100a8565b005b60008473ffffffffffffffffffffffffffffffffffffffff1663481ea63d856040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561012557600080fd5b505af1158015610139573d6000803e3d6000fd5b505050506040513d602081101561014f57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806102fd6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16637f91fb7d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561026557600080fd5b505afa158015610279573d6000803e3d6000fd5b505050506040513d602081101561028f57600080fd5b81019080805190602001909291905050506102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806103216043913960600191505060405180910390fd5b505050505056fe556e61626c6520746f206c6f6361746520616e2041637469766541677265656d656e742e41637469766541677265656d656e74206973206e6f74207369676e65642062792074686520706572666f726d696e6720757365722e20526576657274696e67202e2e2ea265627a7a72315820832f6038a36c9120315c9c3217e82e1fcc0f84882797224812bd20c106fd6d5b64736f6c63430005110032';
    export const deployedBytecode = '608060405234801561001057600080fd5b506004361061002b5760003560e01c8063867c715114610030575b600080fd5b6100a66004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100a8565b005b60008473ffffffffffffffffffffffffffffffffffffffff1663481ea63d856040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561012557600080fd5b505af1158015610139573d6000803e3d6000fd5b505050506040513d602081101561014f57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806102fd6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16637f91fb7d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561026557600080fd5b505afa158015610279573d6000803e3d6000fd5b505050506040513d602081101561028f57600080fd5b81019080805190602001909291905050506102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806103216043913960600191505060405180910390fd5b505050505056fe556e61626c6520746f206c6f6361746520616e2041637469766541677265656d656e742e41637469766541677265656d656e74206973206e6f74207369676e65642062792074686520706572666f726d696e6720757365722e20526576657274696e67202e2e2ea265627a7a72315820832f6038a36c9120315c9c3217e82e1fcc0f84882797224812bd20c106fd6d5b64736f6c63430005110032';
    export function deploy(client: Provider, withContractMeta: boolean = false): Promise<string> {
        const codec = client.contractCodec(abi);
        const data = Buffer.concat([Buffer.from(bytecode, "hex"), codec.encodeDeploy()]);
        return client.deploy(data, withContractMeta ? [{ abi: AgreementSignatureCheck.abi, codeHash: new Keccak(256).update(AgreementSignatureCheck.deployedBytecode, "hex").digest("binary") }] : undefined);
    }
    export async function deployContract(client: Provider, withContractMeta: boolean = false): Promise<Contract> { const address = await deploy(client, withContractMeta); return contract(client, address); }
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { complete(_piAddress: string, _activityInstanceId: Buffer, _txPerformer: string, call = defaultCall): Promise<void> {
                const data = encode(client).complete(_piAddress, _activityInstanceId, _txPerformer);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).complete();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        complete: (_piAddress: string, _activityInstanceId: Buffer, _txPerformer: string) => { return codec.encodeFunctionData("867C7151", _piAddress, _activityInstanceId, _txPerformer); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        complete: (): void => { return; }
    }; };
}