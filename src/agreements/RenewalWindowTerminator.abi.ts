//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module RenewalWindowTerminator {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string, _service: string): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b506040516116c13803806116c18339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061162d806100946000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632cefae8714610046578063446df76114610074578063867c715114610197575b600080fd5b6100726004803603602081101561005c57600080fd5b810190808035906020019092919050505061020f565b005b610195600480360360e081101561008a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561010f57600080fd5b82018360208201111561012157600080fd5b8035906020019184600183028401116401000000008311171561014357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610629565b005b61020d600480360360808110156101ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4e565b005b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461029461144e565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156102f55780820151818401526020810190506102da565b50505050905090810190601f1680156103225780820380516001836020036101000a031916815260200191505b508481038352602b815260200180611508602b913960400184810382526032815260200180611533603291396040019550505050505060006040518083038186803b15801561037057600080fd5b505af4158015610384573d6000803e3d6000fd5b5050505060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166368180951846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b505050506040513d602081101561049457600080fd5b810190808051906020019092919050505090506104af61148b565b81141561058a576001600084815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f414e3a2f2f72656e6577616c2d636c6f73652d6f6666736574000000000000007f10418fb35e328d845a5797584c499af90e9bcdc2848d64a18fa1f8f1df2e8a7a84846001604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a2610624565b7f414e3a2f2f72656e6577616c2d636c6f73652d6f6666736574000000000000007f10418fb35e328d845a5797584c499af90e9bcdc2848d64a18fa1f8f1df2e8a7a84846000604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a25b505050565b60008673ffffffffffffffffffffffffffffffffffffffff1663a32dd3b2897f72656e6577616c416374697669747949640000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156106a657600080fd5b505af11580156106ba573d6000803e3d6000fd5b505050506040513d60208110156106d057600080fd5b8101908080519060200190929190505050905060008773ffffffffffffffffffffffffffffffffffffffff1663d8619d806040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b8101908080519060200190929190505050905060008090505b81811015610a425760008973ffffffffffffffffffffffffffffffffffffffff166321cb9b63836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d60208110156107f357600080fd5b810190808051906020019092919050505090506000808b73ffffffffffffffffffffffffffffffffffffffff1663db8168fc846040518263ffffffff1660e01b81526004018082815260200191505060c06040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d60c081101561088457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050505050935050509150600086141580156108df57508186145b15610a32577f414e3a2f2f72656e6577616c2d636c6f73652d6f6666736574000000000000007fe9232beea05c3d6ccbf3713ada0687842c095d7f9841a0a9c5f1331999c0274884848e858f8f8f8f604051808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109f05780820151818401526020810190506109d5565b50505050905090810190601f168015610a1d5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a25b505050808060010191505061076e565b50505050505050505050565b60008060008673ffffffffffffffffffffffffffffffffffffffff1663481ea63d876040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050506040513d6020811015610af857600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610b5d611494565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610bbe578082015181840152602081019050610ba3565b50505050905090810190601f168015610beb5780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c4f6666736574456d69747465722e636f6d706c657465000000815250602001848103825260368152602001806114d2603691396040019550505050505060006040518083038186803b158015610c5657600080fd5b505af4158015610c6a573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff16632ceb8b18877f6461746574696d650000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b158015610ce657600080fd5b505afa158015610cfa573d6000803e3d6000fd5b505050506040513d6040811015610d1057600080fd5b8101908080519060200190929190805190602001909291905050509050809350508673ffffffffffffffffffffffffffffffffffffffff16632ceb8b18877f6461746574696d654f66667365740000000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d6040811015610dd357600080fd5b81019080805190602001909291908051906020019092919050505090508092505060008773ffffffffffffffffffffffffffffffffffffffff166337e567a0887f6461746574696d650000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505050506040513d6020811015610e9b57600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60008314610ed4611494565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015610f35578082015181840152602081019050610f1a565b50505050905090810190601f168015610f625780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c4f6666736574456d69747465722e636f6d706c657465000000815250602001848103825260478152602001806115b2604791396060019550505050505060006040518083038186803b158015610fcd57600080fd5b505af4158015610fe1573d6000803e3d6000fd5b5050505060608873ffffffffffffffffffffffffffffffffffffffff166326a3ba26897f6461746574696d654f66667365740000000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110a057600080fd5b81019080805160405193929190846401000000008211156110c057600080fd5b838201915060208201858111156110d657600080fd5b82518660018202830111640100000000821117156110f357600080fd5b8083526020830192505050908051906020019080838360005b8381101561112757808201518184015260208101905061110c565b50505050905090810190601f1680156111545780820380516001836020036101000a031916815260200191505b50604052505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef6000835114611184611494565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156111e55780820151818401526020810190506111ca565b50505050905090810190601f1680156112125780820380516001836020036101000a031916815260200191505b508481038352601d8152602001807f52656e6577616c4f6666736574456d69747465722e636f6d706c6574650000008152506020018481038252604d815260200180611565604d91396060019550505050505060006040518083038186803b15801561127d57600080fd5b505af4158015611291573d6000803e3d6000fd5b505050506112a4888a8588868987610629565b7f414e3a2f2f72656e6577616c2d636c6f73652d6f6666736574000000000000007f9949c4366ab27e144f3c27f4193acedc63478d9b097dce5715ae099cafd8a48d8989868a8a888b89604051808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113b0578082015181840152602081019050611395565b50505050905090810190601f1680156113dd5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a288600160008a815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b60006001905090565b60606040518060400160405280600681526020017f455252363030000000000000000000000000000000000000000000000000000081525090509056fe456d7074792061677265656d656e74206164647265737320666f756e64206f6e20676976656e2050726f63657373496e7374616e636552656e6577616c4f6666736574456d69747465722e7465726d696e61746552656e6577616c57696e646f775468652070726f7669646564204163746976697479496e7374616e6365204944206973206e6f7420726567697374657265646461746574696d654f66667365742064617461206d617070696e6720697320656d7074792e204d75737420626520612076616c69642049534f2038363031206f666673657420737472696e672e6461746574696d652064617461206d617070696e6720697320302e204d75737420626520612076616c69642074696d6520666f7220616374697669747920746f20636c6f73652ea265627a7a72315820f5928d980a505ddc17a23e9ec69829ee0d289120e281f0a7a5494f307a638ae764736f6c634300050c0032";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        const data = bytecode + client.encode("", ["address"], _service);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogRenewalEventActivityCloseOffset(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogRenewalEventActivityCloseOffset", this.address, callback); }
        LogRenewalOffsetEmitterCompletion(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogRenewalOffsetEmitterCompletion", this.address, callback); }
        LogRenewalUserTaskCloseOffset(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogRenewalUserTaskCloseOffset", this.address, callback); }
        complete(_piAddress: string, _activityInstanceId: Buffer, _activityId: Buffer, _txPerformer: string) {
            const data = Encode(this.client).complete(_piAddress, _activityInstanceId, _activityId, _txPerformer);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).complete();
            });
        }
        emitRenewalActivityInstanceDetails(_activityInstanceId: Buffer, _piAddress: string, _agreement: string, _datetimeDataPath: Buffer, _datetime: number, _offsetDataPath: Buffer, _offset: string) {
            const data = Encode(this.client).emitRenewalActivityInstanceDetails(_activityInstanceId, _piAddress, _agreement, _datetimeDataPath, _datetime, _offsetDataPath, _offset);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).emitRenewalActivityInstanceDetails();
            });
        }
        terminateRenewalWindow(_terminateActivityId: Buffer) {
            const data = Encode(this.client).terminateRenewalWindow(_terminateActivityId);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).terminateRenewalWindow();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        complete: (_piAddress: string, _activityInstanceId: Buffer, _activityId: Buffer, _txPerformer: string) => { return client.encode("867C7151", ["address", "bytes32", "bytes32", "address"], _piAddress, _activityInstanceId, _activityId, _txPerformer); },
        emitRenewalActivityInstanceDetails: (_activityInstanceId: Buffer, _piAddress: string, _agreement: string, _datetimeDataPath: Buffer, _datetime: number, _offsetDataPath: Buffer, _offset: string) => { return client.encode("446DF761", ["bytes32", "address", "address", "bytes32", "int256", "bytes32", "string"], _activityInstanceId, _piAddress, _agreement, _datetimeDataPath, _datetime, _offsetDataPath, _offset); },
        terminateRenewalWindow: (_terminateActivityId: Buffer) => { return client.encode("2CEFAE87", ["bytes32"], _terminateActivityId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        complete: (): void => { return; },
        emitRenewalActivityInstanceDetails: (): void => { return; },
        terminateRenewalWindow: (): void => { return; }
    }; };
}