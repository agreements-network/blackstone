//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module RenewalEvaluator {
    export const contactName = "RenewalEvaluator";
    export const abi = '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"eventURN","type":"bytes32"},{"indexed":false,"internalType":"address","name":"agreementAddress","type":"address"},{"indexed":false,"internalType":"address","name":"party","type":"address"},{"indexed":false,"internalType":"bool","name":"agreementWillRenew","type":"bool"}],"name":"LogRenewalResultNotificationTrigger","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"_piAddress","type":"address"},{"internalType":"bytes32","name":"_activityInstanceId","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"name":"complete","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
    export const bytecode = '608060405234801561001057600080fd5b50610550806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063867c715114610030575b600080fd5b6100a66004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100a8565b005b60008060008673ffffffffffffffffffffffffffffffffffffffff1663481ea63d876040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561012857600080fd5b505af115801561013c573d6000803e3d6000fd5b505050506040513d602081101561015257600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166304fce0156040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d60208110156101d757600080fd5b8101908080519060200190929190505050905060008090505b8273ffffffffffffffffffffffffffffffffffffffff16637f8093816040518163ffffffff1660e01b815260040160206040518083038186803b15801561023657600080fd5b505afa15801561024a573d6000803e3d6000fd5b505050506040513d602081101561026057600080fd5b81019080805190602001909291905050508110156103d4577f414e3a2f2f61677265656d656e742d72656e6577616c2d6576616c7561746f727f78f2b0d3cb3809f8d46488d25dc6052b618bd3d2f61a6215187b06a1ca381fff848573ffffffffffffffffffffffffffffffffffffffff166379ce3cb2856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d602081101561033657600080fd5b810190808051906020019092919050505085604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a280806001019150506101f0565b508773ffffffffffffffffffffffffffffffffffffffff1663d6256976887f72656e6577616c4c6f6f704261636b00000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d604081101561047757600080fd5b81019080805190602001909291908051906020019092919050505080945081955050508373ffffffffffffffffffffffffffffffffffffffff16631cb3554084836040518363ffffffff1660e01b8152600401808381526020018215151515815260200192505050600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b50505050505050505050505056fea265627a7a723158209cedd9bbf9c8f5ef364dac1d7188bc5704583cd49b72eaf70988ae31209e625864736f6c63430005110032';
    export const deployedBytecode = '608060405234801561001057600080fd5b506004361061002b5760003560e01c8063867c715114610030575b600080fd5b6100a66004803603608081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100a8565b005b60008060008673ffffffffffffffffffffffffffffffffffffffff1663481ea63d876040518263ffffffff1660e01b815260040180828152602001807f61677265656d656e740000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561012857600080fd5b505af115801561013c573d6000803e3d6000fd5b505050506040513d602081101561015257600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166304fce0156040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d60208110156101d757600080fd5b8101908080519060200190929190505050905060008090505b8273ffffffffffffffffffffffffffffffffffffffff16637f8093816040518163ffffffff1660e01b815260040160206040518083038186803b15801561023657600080fd5b505afa15801561024a573d6000803e3d6000fd5b505050506040513d602081101561026057600080fd5b81019080805190602001909291905050508110156103d4577f414e3a2f2f61677265656d656e742d72656e6577616c2d6576616c7561746f727f78f2b0d3cb3809f8d46488d25dc6052b618bd3d2f61a6215187b06a1ca381fff848573ffffffffffffffffffffffffffffffffffffffff166379ce3cb2856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d602081101561033657600080fd5b810190808051906020019092919050505085604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a280806001019150506101f0565b508773ffffffffffffffffffffffffffffffffffffffff1663d6256976887f72656e6577616c4c6f6f704261636b00000000000000000000000000000000006040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d604081101561047757600080fd5b81019080805190602001909291908051906020019092919050505080945081955050508373ffffffffffffffffffffffffffffffffffffffff16631cb3554084836040518363ffffffff1660e01b8152600401808381526020018215151515815260200192505050600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b50505050505050505050505056fea265627a7a723158209cedd9bbf9c8f5ef364dac1d7188bc5704583cd49b72eaf70988ae31209e625864736f6c63430005110032';
    export function deploy(client: Provider, withContractMeta: boolean = false): Promise<string> {
        const codec = client.contractCodec(abi);
        const data = Buffer.concat([Buffer.from(bytecode, "hex"), codec.encodeDeploy()]);
        return client.deploy(data, withContractMeta ? [{ abi: RenewalEvaluator.abi, codeHash: new Keccak(256).update(RenewalEvaluator.deployedBytecode, "hex").digest("binary") }] : undefined);
    }
    export async function deployContract(client: Provider, withContractMeta: boolean = false): Promise<Contract> { const address = await deploy(client, withContractMeta); return contract(client, address); }
    type EventRegistry = typeof events;
    export type EventName = keyof EventRegistry;
    export type TaggedPayload<T extends EventName> = ReturnType<EventRegistry[T]["tagged"]> & {
        event: Event;
    };
    export type SolidityEvent<T extends EventName> = TaggedPayload<T>["payload"];
    export type TypedListener<T extends EventName> = (callback: (err?: Error, event?: TaggedPayload<T>) => void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number) => unknown;
    const events = { LogRenewalResultNotificationTrigger: { signature: "78F2B0D3CB3809F8D46488D25DC6052B618BD3D2F61A6215187B06A1CA381FFF", tagged: (eventURN: Buffer, agreementAddress: string, party: string, agreementWillRenew: boolean) => ({ name: "LogRenewalResultNotificationTrigger", payload: { eventURN: eventURN, agreementAddress: agreementAddress, party: party, agreementWillRenew: agreementWillRenew } as const } as const) } as const } as const;
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { complete(_piAddress: string, _activityInstanceId: Buffer, call = defaultCall): Promise<void> {
                const data = encode(client).complete(_piAddress, _activityInstanceId);
                return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
                    return decode(client, data).complete();
                });
            } } as const, listeners: { LogRenewalResultNotificationTrigger(callback: (err?: Error, event?: {
                eventURN: Buffer;
                agreementAddress: string;
                party: string;
                agreementWillRenew: boolean;
            }) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown { return client.listen(["78F2B0D3CB3809F8D46488D25DC6052B618BD3D2F61A6215187B06A1CA381FFF"], address, (err?: Error, event?: Event) => { if (err)
                return callback(err); return callback(undefined, decode(client, event?.log.data, event?.log.topics).LogRenewalResultNotificationTrigger()); }, start, end); } } as const, listenerFor: <T extends EventName>(eventNames: T[]): TypedListener<T> => listenerFor(client, address, events, decode, eventNames) as unknown as TypedListener<T>, listener: listenerFor(client, address, events, decode, Object.keys(events) as EventName[]) as TypedListener<EventName> } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        complete: (_piAddress: string, _activityInstanceId: Buffer) => { return codec.encodeFunctionData("867C7151", _piAddress, _activityInstanceId); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        LogRenewalResultNotificationTrigger: (): {
            eventURN: Buffer;
            agreementAddress: string;
            party: string;
            agreementWillRenew: boolean;
        } => {
            const [eventURN, agreementAddress, party, agreementWillRenew] = codec.decodeEventLog ("78F2B0D3CB3809F8D46488D25DC6052B618BD3D2F61A6215187B06A1CA381FFF", data, topics);
            return { eventURN: eventURN, agreementAddress: agreementAddress, party: party, agreementWillRenew: agreementWillRenew };
        },
        complete: (): void => { return; }
    }; };
}