import { expect } from 'chai';
import { padBytes, padBytesNN } from '../bytes';

describe('bytes32', () => {
  it('pads bytes32 value in the arcane way', () => {
    expect(padBytes(Buffer.from('RenewalWindowManager'), 32)).to.deep.equal(
      Buffer.from([
        0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x61, 0x67,
        0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ]),
    );
  });

  it('pads byteNN according to their ABI type', () => {
    const args = ['foo', { antelopes: true }, 'not a very long string', 'silly old goatee'];
    padBytesNN(['bytes4', 'frogman', 'bytes32', 'bytes16'], args);
    expect(args).to.deep.equal([
      Buffer.from([0x66, 0x6f, 0x6f, 0x00]),
      { antelopes: true },
      Buffer.from([
        0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ]),
      Buffer.from('silly old goatee'),
    ]);
  });
});
