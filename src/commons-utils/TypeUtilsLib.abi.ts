//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CallTx, ContractCodec, Signal, Event, EventStream, listenerFor, Result } from "@hyperledger/burrow";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(returnData);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module TypeUtilsLib {
    export const contactName = "TypeUtilsLib";
    export const abi = '[{"constant":true,"inputs":[{"internalType":"bytes32","name":"self","type":"bytes32"}],"name":"contentLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"isEmpty","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"s","type":"string"}],"name":"toBytes32","outputs":[{"internalType":"bytes32","name":"result","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes","name":"b","type":"bytes"}],"name":"toBytes32","outputs":[{"internalType":"bytes32","name":"result","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"v","type":"uint256"}],"name":"toBytes32","outputs":[{"internalType":"bytes32","name":"ret","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"x","type":"bytes32"}],"name":"toString","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes","name":"b","type":"bytes"}],"name":"toUint","outputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}]';
    export const bytecode = '61086d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c806373aafb531161006557806373aafb531461026c5780638529d576146102ae5780638e8567ae1461037d578063b11a19e8146103c357610087565b806327df8f2a1461008c57806331654b091461015b57806347f534311461019d575b600080fd5b610145600480360360208110156100a257600080fd5b81019080803590602001906401000000008111156100bf57600080fd5b8201836020820111156100d157600080fd5b803590602001918460018302840111640100000000831117156100f357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061046a565b6040518082815260200191505060405180910390f35b6101876004803603602081101561017157600080fd5b8101908080359060200190929190505050610478565b6040518082815260200191505060405180910390f35b610256600480360360208110156101b357600080fd5b81019080803590602001906401000000008111156101d057600080fd5b8201836020820111156101e257600080fd5b8035906020019184600183028401116401000000008311171561020457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610590565b6040518082815260200191505060405180910390f35b6102986004803603602081101561028257600080fd5b810190808035906020019092919050505061059e565b6040518082815260200191505060405180910390f35b610367600480360360208110156102c457600080fd5b81019080803590602001906401000000008111156102e157600080fd5b8201836020820111156102f357600080fd5b8035906020019184600183028401116401000000008311171561031557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610640565b6040518082815260200191505060405180910390f35b6103a96004803603602081101561039357600080fd5b8101908080359060200190929190505050610693565b604051808215151515815260200191505060405180910390f35b6103ef600480360360208110156103d957600080fd5b81019080803590602001909291905050506106a7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042f578082015181840152602081019050610414565b50505050905090810190601f16801561045c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600060208201519050919050565b60008060008360001c141561049157600091505061058b565b60006fffffffffffffffffffffffffffffffff8460001c1614156104d9576010810190507001000000000000000000000000000000008360001c816104d257fe5b0460001b92505b600067ffffffffffffffff8460001c16141561051157600881019050680100000000000000008360001c8161050a57fe5b0460001b92505b600063ffffffff8460001c161415610541576004810190506401000000008360001c8161053a57fe5b0460001b92505b600061ffff8460001c16141561056d57600281019050620100008360001c8161056657fe5b0460001b92505b600060ff8460001c161415610583576001810190505b806020039150505b919050565b600060208201519050919050565b6000808214156105d0577f30000000000000000000000000000000000000000000000000000000000000009050610638565b5b6000821115610637576101008160001c816105e857fe5b0460001b90507f01000000000000000000000000000000000000000000000000000000000000006030600a848161061b57fe5b06010260001b81179050600a828161062f57fe5b0491506105d1565b5b809050919050565b600080600090505b825181101561068d576001810183510360080260020a83828151811061066a57fe5b602001015160f81c60f81b60f81c60ff1602820191508080600101915050610648565b50919050565b60008061069f83610478565b149050919050565b60608060206040519080825280601f01601f1916602001820160405280156106de5781602001600182028038833980820191505090505b509050600080905060008090505b60208110156107885760008160080260020a8660001c0260001b9050600060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461077a578084848151811061074257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082806001019350505b5080806001019150506106ec565b6060826040519080825280601f01601f1916602001820160405280156107bd5781602001600182028038833980820191505090505b509050600091505b8282101561082c578382815181106107d957fe5b602001015160f81c60f81b8183815181106107f057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250506107c5565b8094505050505091905056fea265627a7a72315820b6fc170a74ac333e5baadff1c4b15139bdaa78a08d897057233a5bbb268fe45b64736f6c63430005110032';
    export function deploy(client: Provider): Promise<string> {
        const codec = client.contractCodec(abi);
        let linkedBytecode = bytecode;
        const data = Buffer.concat([Buffer.from(linkedBytecode, "hex"), codec.encodeDeploy()]);
        const payload = client.payload(data);
        return client.deploy(payload);
    }
    export async function deployContract(client: Provider): Promise<Contract> { const address = await deploy(client); return contract(client, address); }
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { contentLength(self: Buffer, call = defaultCall): Promise<[
                number
            ]> {
                const data = encode(client).contentLength(self);
                return call<[
                    number
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).contentLength();
                });
            }, isEmpty(_value: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).isEmpty(_value);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).isEmpty();
                });
            }, toBytes32(s: string, call = defaultCall): Promise<{
                result: Buffer;
            }> {
                const data = encode(client).toBytes32[0](s);
                return call<{
                    result: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toBytes32[0]();
                });
            }, toBytes32_1(b: Buffer, call = defaultCall): Promise<{
                result: Buffer;
            }> {
                const data = encode(client).toBytes32[1](b);
                return call<{
                    result: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toBytes32[1]();
                });
            }, toBytes32_2(v: number, call = defaultCall): Promise<{
                ret: Buffer;
            }> {
                const data = encode(client).toBytes32[2](v);
                return call<{
                    ret: Buffer;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toBytes32[2]();
                });
            }, toString(x: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toString(x);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toString();
                });
            }, toUint(b: Buffer, call = defaultCall): Promise<{
                number: number;
            }> {
                const data = encode(client).toUint(b);
                return call<{
                    number: number;
                }>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toUint();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        contentLength: (self: Buffer) => { return codec.encodeFunctionData("31654B09", self); },
        isEmpty: (_value: Buffer) => { return codec.encodeFunctionData("8E8567AE", _value); },
        toBytes32: [(s: string) => { return codec.encodeFunctionData("27DF8F2A", s); }, (b: Buffer) => { return codec.encodeFunctionData("47F53431", b); }, (v: number) => { return codec.encodeFunctionData("73AAFB53", v); }] as const,
        toString: (x: Buffer) => { return codec.encodeFunctionData("B11A19E8", x); },
        toUint: (b: Buffer) => { return codec.encodeFunctionData("8529D576", b); }
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        contentLength: (): [
            number
        ] => { return codec.decodeFunctionResult ("31654B09", data); },
        isEmpty: (): [
            boolean
        ] => { return codec.decodeFunctionResult ("8E8567AE", data); },
        toBytes32: [(): {
                result: Buffer;
            } => {
                const [result] = codec.decodeFunctionResult ("27DF8F2A", data);
                return { result: result };
            }, (): {
                result: Buffer;
            } => {
                const [result] = codec.decodeFunctionResult ("47F53431", data);
                return { result: result };
            }, (): {
                ret: Buffer;
            } => {
                const [ret] = codec.decodeFunctionResult ("73AAFB53", data);
                return { ret: ret };
            }] as const,
        toString: (): [
            string
        ] => { return codec.decodeFunctionResult ("B11A19E8", data); },
        toUint: (): {
            number: number;
        } => {
            const [number] = codec.decodeFunctionResult ("8529D576", data);
            return { number: number };
        }
    }; };
}