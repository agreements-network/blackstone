//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CancelStreamSignal, ContractCodec, Event, linker, listenerFor, Result, Keccak } from "@hyperledger/burrow";
interface Provider {
    deploy(data: string | Uint8Array, contractMeta?: {
        abi: string;
        codeHash: Uint8Array;
    }[]): Promise<Address>;
    call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => CancelStreamSignal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): unknown;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
    return callback(returnData);
}
export module Strings {
    export const contactName = "Strings";
    export const abi = '[{"constant":true,"inputs":[{"internalType":"string","name":"value","type":"string"}],"name":"quote","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"value","type":"address"}],"name":"quote","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"value","type":"bytes32"}],"name":"quote","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"value","type":"bytes32"}],"name":"toHex","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"toHex","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"toHex","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes","name":"value","type":"bytes"}],"name":"toHex","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"toString","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"toString","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"value","type":"bytes32"}],"name":"toString","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"}]';
    export const bytecode = '6110d9610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c80636900a3ae116100705780636900a3ae146104a9578063a322c40e14610550578063b11a19e8146105f7578063bf1792b31461069e578063c5bec6fc14610745576100a8565b8063088f0dc2146100ad5780630b39ed47146101e157806315f05b051461029e57806349e894d8146103455780635a275879146103ec575b600080fd5b610166600480360360208110156100c357600080fd5b81019080803590602001906401000000008111156100e057600080fd5b8201836020820111156100f257600080fd5b8035906020019184600183028401116401000000008311171561011457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610879565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a657808201518184015260208101905061018b565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610223600480360360208110156101f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610263578082015181840152602081019050610248565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ca600480360360208110156102b457600080fd5b8101908080359060200190929190505050610911565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030a5780820151818401526020810190506102ef565b50505050905090810190601f1680156103375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103716004803603602081101561035b57600080fd5b810190808035906020019092919050505061092b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b1578082015181840152602081019050610396565b50505050905090810190601f1680156103de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61042e6004803603602081101561040257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061095c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104d5600480360360208110156104bf57600080fd5b81019080803590602001909291905050506109bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105155780820151818401526020810190506104fa565b50505050905090810190601f1680156105425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61057c6004803603602081101561056657600080fd5b8101908080359060200190929190505050610b6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105bc5780820151818401526020810190506105a1565b50505050905090810190601f1680156105e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106236004803603602081101561060d57600080fd5b8101908080359060200190929190505050610bdb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610663578082015181840152602081019050610648565b50505050905090810190601f1680156106905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106ca600480360360208110156106b457600080fd5b8101908080359060200190929190505050610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561070a5780820151818401526020810190506106ef565b50505050905090810190601f1680156107375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107fe6004803603602081101561075b57600080fd5b810190808035906020019064010000000081111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460018302840111640100000000831117156107ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d11565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083e578082015181840152602081019050610823565b50505050905090810190601f16801561086b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606108f06040518060400160405280600181526020017f2700000000000000000000000000000000000000000000000000000000000000815250836040518060400160405280600181526020017f2700000000000000000000000000000000000000000000000000000000000000815250610ec0565b9050919050565b606061090a6109058361095c565b610879565b9050919050565b606061092461091f83610bdb565b610879565b9050919050565b60606109558260405160200180828152602001915050604051602081830303815290604052610d11565b9050919050565b60606109b582604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052610d11565b9050919050565b606060008090506060604e6040519080825280601f01601f1916602001820160405280156109f95781602001600182028038833980820191505090505b5090506000841415610a44576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525092505050610b69565b5b60008414610ab7576000600a8581610a5957fe5b0690508060300160f81b828480600101955081518110610a7557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610aae57fe5b04945050610a45565b6060826040519080825280601f01601f191660200182016040528015610aec5781602001600182028038833980820191505090505b50905060008090505b83811015610b61578281600186030381518110610b0e57fe5b602001015160f81c60f81b828281518110610b2557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610af5565b508093505050505b919050565b60606000821215610bca57610bc36040518060400160405280600181526020017f2d00000000000000000000000000000000000000000000000000000000000000815250610bbe846000036109bc565b610fdc565b9050610bd6565b610bd3826109bc565b90505b919050565b606060008090505b602081108015610c285750600060f81b838260208110610bff57fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15610c3a578080600101915050610be3565b6060816040519080825280601f01601f191660200182016040528015610c6f5781602001600182028038833980820191505090505b50905060005b82811015610cd557848160208110610c8957fe5b1a60f81b828281518110610c9957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c75565b508092505050919050565b6060610d0a8260405160200180828152602001915050604051602081830303815290604052610d11565b9050919050565b6060806040518060400160405280601081526020017f30313233343536373839414243444546000000000000000000000000000000008152509050606060028451026040519080825280601f01601f191660200182016040528015610d855781602001600182028038833980820191505090505b50905060008090505b8451811015610eb557826004868381518110610da657fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610de557fe5b602001015160f81c60f81b826002830281518110610dff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110610e4057fe5b602001015160f81c60f81b1660f81c60ff1681518110610e5c57fe5b602001015160f81c60f81b826002830260010181518110610e7957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610d8e565b508092505050919050565b60608383836040516020018084805190602001908083835b60208310610efb5780518252602082019150602081019050602083039250610ed8565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310610f4c5780518252602082019150602081019050602083039250610f29565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310610f9d5780518252602082019150602081019050602083039250610f7a565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060405160208183030381529060405290509392505050565b606082826040516020018083805190602001908083835b602083106110165780518252602082019150602081019050602083039250610ff3565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106110675780518252602082019150602081019050602083039250611044565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290509291505056fea265627a7a7231582093aa5d0792d7feab7c90261a08d74340d9a67701d57f2df4d1136c2c68d59ca664736f6c63430005110032';
    export const deployedBytecode = '73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c80636900a3ae116100705780636900a3ae146104a9578063a322c40e14610550578063b11a19e8146105f7578063bf1792b31461069e578063c5bec6fc14610745576100a8565b8063088f0dc2146100ad5780630b39ed47146101e157806315f05b051461029e57806349e894d8146103455780635a275879146103ec575b600080fd5b610166600480360360208110156100c357600080fd5b81019080803590602001906401000000008111156100e057600080fd5b8201836020820111156100f257600080fd5b8035906020019184600183028401116401000000008311171561011457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610879565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a657808201518184015260208101905061018b565b50505050905090810190601f1680156101d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610223600480360360208110156101f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610263578082015181840152602081019050610248565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ca600480360360208110156102b457600080fd5b8101908080359060200190929190505050610911565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030a5780820151818401526020810190506102ef565b50505050905090810190601f1680156103375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103716004803603602081101561035b57600080fd5b810190808035906020019092919050505061092b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b1578082015181840152602081019050610396565b50505050905090810190601f1680156103de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61042e6004803603602081101561040257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061095c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104d5600480360360208110156104bf57600080fd5b81019080803590602001909291905050506109bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105155780820151818401526020810190506104fa565b50505050905090810190601f1680156105425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61057c6004803603602081101561056657600080fd5b8101908080359060200190929190505050610b6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105bc5780820151818401526020810190506105a1565b50505050905090810190601f1680156105e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106236004803603602081101561060d57600080fd5b8101908080359060200190929190505050610bdb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610663578082015181840152602081019050610648565b50505050905090810190601f1680156106905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106ca600480360360208110156106b457600080fd5b8101908080359060200190929190505050610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561070a5780820151818401526020810190506106ef565b50505050905090810190601f1680156107375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107fe6004803603602081101561075b57600080fd5b810190808035906020019064010000000081111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460018302840111640100000000831117156107ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d11565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083e578082015181840152602081019050610823565b50505050905090810190601f16801561086b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606108f06040518060400160405280600181526020017f2700000000000000000000000000000000000000000000000000000000000000815250836040518060400160405280600181526020017f2700000000000000000000000000000000000000000000000000000000000000815250610ec0565b9050919050565b606061090a6109058361095c565b610879565b9050919050565b606061092461091f83610bdb565b610879565b9050919050565b60606109558260405160200180828152602001915050604051602081830303815290604052610d11565b9050919050565b60606109b582604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052610d11565b9050919050565b606060008090506060604e6040519080825280601f01601f1916602001820160405280156109f95781602001600182028038833980820191505090505b5090506000841415610a44576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525092505050610b69565b5b60008414610ab7576000600a8581610a5957fe5b0690508060300160f81b828480600101955081518110610a7557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610aae57fe5b04945050610a45565b6060826040519080825280601f01601f191660200182016040528015610aec5781602001600182028038833980820191505090505b50905060008090505b83811015610b61578281600186030381518110610b0e57fe5b602001015160f81c60f81b828281518110610b2557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610af5565b508093505050505b919050565b60606000821215610bca57610bc36040518060400160405280600181526020017f2d00000000000000000000000000000000000000000000000000000000000000815250610bbe846000036109bc565b610fdc565b9050610bd6565b610bd3826109bc565b90505b919050565b606060008090505b602081108015610c285750600060f81b838260208110610bff57fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15610c3a578080600101915050610be3565b6060816040519080825280601f01601f191660200182016040528015610c6f5781602001600182028038833980820191505090505b50905060005b82811015610cd557848160208110610c8957fe5b1a60f81b828281518110610c9957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c75565b508092505050919050565b6060610d0a8260405160200180828152602001915050604051602081830303815290604052610d11565b9050919050565b6060806040518060400160405280601081526020017f30313233343536373839414243444546000000000000000000000000000000008152509050606060028451026040519080825280601f01601f191660200182016040528015610d855781602001600182028038833980820191505090505b50905060008090505b8451811015610eb557826004868381518110610da657fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610de557fe5b602001015160f81c60f81b826002830281518110610dff57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110610e4057fe5b602001015160f81c60f81b1660f81c60ff1681518110610e5c57fe5b602001015160f81c60f81b826002830260010181518110610e7957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610d8e565b508092505050919050565b60608383836040516020018084805190602001908083835b60208310610efb5780518252602082019150602081019050602083039250610ed8565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310610f4c5780518252602082019150602081019050602083039250610f29565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310610f9d5780518252602082019150602081019050602083039250610f7a565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060405160208183030381529060405290509392505050565b606082826040516020018083805190602001908083835b602083106110165780518252602082019150602081019050602083039250610ff3565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106110675780518252602082019150602081019050602083039250611044565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290509291505056fea265627a7a7231582093aa5d0792d7feab7c90261a08d74340d9a67701d57f2df4d1136c2c68d59ca664736f6c63430005110032';
    export function deploy(client: Provider, withContractMeta: boolean = false): Promise<string> {
        const codec = client.contractCodec(abi);
        const data = Buffer.concat([Buffer.from(bytecode, "hex"), codec.encodeDeploy()]);
        return client.deploy(data, withContractMeta ? [{ abi: Strings.abi, codeHash: new Keccak(256).update(Strings.deployedBytecode, "hex").digest("binary") }] : undefined);
    }
    export async function deployContract(client: Provider, withContractMeta: boolean = false): Promise<Contract> { const address = await deploy(client, withContractMeta); return contract(client, address); }
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { quote(value: string, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).quote[0](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).quote[0]();
                });
            }, quote_1(value: string, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).quote[1](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).quote[1]();
                });
            }, quote_2(value: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).quote[2](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).quote[2]();
                });
            }, toHex(value: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toHex[0](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toHex[0]();
                });
            }, toHex_1(account: string, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toHex[1](account);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toHex[1]();
                });
            }, toHex_2(value: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toHex[2](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toHex[2]();
                });
            }, toHex_3(value: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toHex[3](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toHex[3]();
                });
            }, toString(value: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toString[0](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toString[0]();
                });
            }, toString_1(value: number, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toString[1](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toString[1]();
                });
            }, toString_2(value: Buffer, call = defaultCall): Promise<[
                string
            ]> {
                const data = encode(client).toString[2](value);
                return call<[
                    string
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).toString[2]();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        quote: [(value: string) => { return codec.encodeFunctionData("088F0DC2", value); }, (value: string) => { return codec.encodeFunctionData("0B39ED47", value); }, (value: Buffer) => { return codec.encodeFunctionData("15F05B05", value); }] as const,
        toHex: [(value: Buffer) => { return codec.encodeFunctionData("49E894D8", value); }, (account: string) => { return codec.encodeFunctionData("5A275879", account); }, (value: number) => { return codec.encodeFunctionData("BF1792B3", value); }, (value: Buffer) => { return codec.encodeFunctionData("C5BEC6FC", value); }] as const,
        toString: [(value: number) => { return codec.encodeFunctionData("6900A3AE", value); }, (value: number) => { return codec.encodeFunctionData("A322C40E", value); }, (value: Buffer) => { return codec.encodeFunctionData("B11A19E8", value); }] as const
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        quote: [(): [
                string
            ] => { return codec.decodeFunctionResult ("088F0DC2", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("0B39ED47", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("15F05B05", data); }] as const,
        toHex: [(): [
                string
            ] => { return codec.decodeFunctionResult ("49E894D8", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("5A275879", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("BF1792B3", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("C5BEC6FC", data); }] as const,
        toString: [(): [
                string
            ] => { return codec.decodeFunctionResult ("6900A3AE", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("A322C40E", data); }, (): [
                string
            ] => { return codec.decodeFunctionResult ("B11A19E8", data); }] as const
    }; };
}