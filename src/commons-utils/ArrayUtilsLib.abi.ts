//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
import { Address, CallTx, ContractCodec, Signal, Event, EventStream, listenerFor, Result } from "@hyperledger/burrow";
interface Provider {
    deploy(msg: CallTx): Promise<Address>;
    call(msg: CallTx): Promise<Uint8Array | undefined>;
    callSim(msg: CallTx): Promise<Uint8Array | undefined>;
    listen(signatures: string[], address: string, callback: (err?: Error, event?: Event) => Signal | void, start?: "first" | "latest" | "stream" | number, end?: "first" | "latest" | "stream" | number): EventStream;
    payload(data: string | Uint8Array, address?: string): CallTx;
    contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(client: Provider, addr: string, data: Uint8Array, isSim: boolean, callback: (returnData: Uint8Array | undefined) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    const returnData = await (isSim ? client.callSim(payload) : client.call(payload));
    return callback(returnData);
}
function linker(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module ArrayUtilsLib {
    export const contactName = "ArrayUtilsLib";
    export const abi = '[{"constant":true,"inputs":[{"internalType":"address[]","name":"_list","type":"address[]"},{"internalType":"address","name":"_value","type":"address"}],"name":"contains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"int256[]","name":"_list","type":"int256[]"},{"internalType":"int256","name":"_value","type":"int256"}],"name":"contains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256[]","name":"_list","type":"uint256[]"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"contains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32[]","name":"_list","type":"bytes32[]"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"contains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256[]","name":"_list","type":"uint256[]"}],"name":"hasDuplicates","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"address[]","name":"_list","type":"address[]"}],"name":"hasDuplicates","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"int256[]","name":"_list","type":"int256[]"}],"name":"hasDuplicates","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32[]","name":"_list","type":"bytes32[]"}],"name":"hasDuplicates","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}]';
    export const bytecode = '610b26610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c8063b32b8e2c11610065578063b32b8e2c14610401578063c01c0b5f146104db578063d5d8dc81146105b5578063d9a7d8bc1461068557610092565b806331dcf5bf146100975780633da80d66146101675780635b6d43a2146102575780636e16f75b14610331575b600080fd5b61014d600480360360208110156100ad57600080fd5b81019080803590602001906401000000008111156100ca57600080fd5b8201836020820111156100dc57600080fd5b803590602001918460208302840111640100000000831117156100fe57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610755565b604051808215151515815260200191505060405180910390f35b61023d6004803603604081101561017d57600080fd5b810190808035906020019064010000000081111561019a57600080fd5b8201836020820111156101ac57600080fd5b803590602001918460208302840111640100000000831117156101ce57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107d7565b604051808215151515815260200191505060405180910390f35b6103176004803603604081101561026d57600080fd5b810190808035906020019064010000000081111561028a57600080fd5b82018360208201111561029c57600080fd5b803590602001918460208302840111640100000000831117156102be57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610852565b604051808215151515815260200191505060405180910390f35b6103e76004803603602081101561034757600080fd5b810190808035906020019064010000000081111561036457600080fd5b82018360208201111561037657600080fd5b8035906020019184602083028401116401000000008311171561039857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506108a1565b604051808215151515815260200191505060405180910390f35b6104c16004803603604081101561041757600080fd5b810190808035906020019064010000000081111561043457600080fd5b82018360208201111561044657600080fd5b8035906020019184602083028401116401000000008311171561046857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061094f565b604051808215151515815260200191505060405180910390f35b61059b600480360360408110156104f157600080fd5b810190808035906020019064010000000081111561050e57600080fd5b82018360208201111561052057600080fd5b8035906020019184602083028401116401000000008311171561054257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061099e565b604051808215151515815260200191505060405180910390f35b61066b600480360360208110156105cb57600080fd5b81019080803590602001906401000000008111156105e857600080fd5b8201836020820111156105fa57600080fd5b8035906020019184602083028401116401000000008311171561061c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506109ed565b604051808215151515815260200191505060405180910390f35b61073b6004803603602081101561069b57600080fd5b81019080803590602001906401000000008111156106b857600080fd5b8201836020820111156106ca57600080fd5b803590602001918460208302840111640100000000831117156106ec57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610a6f565b604051808215151515815260200191505060405180910390f35b600080600090505b82518110156107cc5760006001820190505b83518110156107be5783818151811061078457fe5b602002602001015184838151811061079857fe5b602002602001015114156107b1576001925050506107d2565b808060010191505061076f565b50808060010191505061075d565b50600090505b919050565b600080600090505b8351811015610846578273ffffffffffffffffffffffffffffffffffffffff1684828151811061080b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561083957600191505061084c565b80806001019150506107df565b50600090505b92915050565b600080600090505b8351811015610895578284828151811061087057fe5b6020026020010151141561088857600191505061089b565b808060010191505061085a565b50600090505b92915050565b600080600090505b82518110156109445760006001820190505b8351811015610936578381815181106108d057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168483815181106108fa57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156109295760019250505061094a565b80806001019150506108bb565b5080806001019150506108a9565b50600090505b919050565b600080600090505b8351811015610992578284828151811061096d57fe5b60200260200101511415610985576001915050610998565b8080600101915050610957565b50600090505b92915050565b600080600090505b83518110156109e157828482815181106109bc57fe5b602002602001015114156109d45760019150506109e7565b80806001019150506109a6565b50600090505b92915050565b600080600090505b8251811015610a645760006001820190505b8351811015610a5657838181518110610a1c57fe5b6020026020010151848381518110610a3057fe5b60200260200101511415610a4957600192505050610a6a565b8080600101915050610a07565b5080806001019150506109f5565b50600090505b919050565b600080600090505b8251811015610ae65760006001820190505b8351811015610ad857838181518110610a9e57fe5b6020026020010151848381518110610ab257fe5b60200260200101511415610acb57600192505050610aec565b8080600101915050610a89565b508080600101915050610a77565b50600090505b91905056fea265627a7a723158200ce0c22fc7090415d60b304e0170c77617c0bdae7f3af1dfdecb3daac166c95b64736f6c63430005110032';
    export function deploy(client: Provider): Promise<string> {
        const codec = client.contractCodec(abi);
        let linkedBytecode = bytecode;
        const data = Buffer.concat([Buffer.from(linkedBytecode, "hex"), codec.encodeDeploy()]);
        const payload = client.payload(data);
        return client.deploy(payload);
    }
    export async function deployContract(client: Provider): Promise<Contract> { const address = await deploy(client); return contract(client, address); }
    export type Contract = ReturnType<typeof contract>;
    export const contract = (client: Provider, address: string) => ({ address, functions: { contains(_list: string[], _value: string, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).contains[0](_list, _value);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).contains[0]();
                });
            }, contains_1(_list: number[], _value: number, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).contains[1](_list, _value);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).contains[1]();
                });
            }, contains_2(_list: number[], _value: number, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).contains[2](_list, _value);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).contains[2]();
                });
            }, contains_3(_list: Buffer[], _value: Buffer, call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).contains[3](_list, _value);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).contains[3]();
                });
            }, hasDuplicates(_list: number[], call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasDuplicates[0](_list);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasDuplicates[0]();
                });
            }, hasDuplicates_1(_list: string[], call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasDuplicates[1](_list);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasDuplicates[1]();
                });
            }, hasDuplicates_2(_list: number[], call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasDuplicates[2](_list);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasDuplicates[2]();
                });
            }, hasDuplicates_3(_list: Buffer[], call = defaultCall): Promise<[
                boolean
            ]> {
                const data = encode(client).hasDuplicates[3](_list);
                return call<[
                    boolean
                ]>(client, address, data, true, (data: Uint8Array | undefined) => {
                    return decode(client, data).hasDuplicates[3]();
                });
            } } as const } as const);
    export const encode = (client: Provider) => { const codec = client.contractCodec(abi); return {
        contains: [(_list: string[], _value: string) => { return codec.encodeFunctionData("3DA80D66", _list, _value); }, (_list: number[], _value: number) => { return codec.encodeFunctionData("5B6D43A2", _list, _value); }, (_list: number[], _value: number) => { return codec.encodeFunctionData("B32B8E2C", _list, _value); }, (_list: Buffer[], _value: Buffer) => { return codec.encodeFunctionData("C01C0B5F", _list, _value); }] as const,
        hasDuplicates: [(_list: number[]) => { return codec.encodeFunctionData("31DCF5BF", _list); }, (_list: string[]) => { return codec.encodeFunctionData("6E16F75B", _list); }, (_list: number[]) => { return codec.encodeFunctionData("D5D8DC81", _list); }, (_list: Buffer[]) => { return codec.encodeFunctionData("D9A7D8BC", _list); }] as const
    }; };
    export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => { const codec = client.contractCodec(abi); return {
        contains: [(): [
                boolean
            ] => { return codec.decodeFunctionResult ("3DA80D66", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("5B6D43A2", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("B32B8E2C", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("C01C0B5F", data); }] as const,
        hasDuplicates: [(): [
                boolean
            ] => { return codec.decodeFunctionResult ("31DCF5BF", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("6E16F75B", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("D5D8DC81", data); }, (): [
                boolean
            ] => { return codec.decodeFunctionResult ("D9A7D8BC", data); }] as const
    }; };
}