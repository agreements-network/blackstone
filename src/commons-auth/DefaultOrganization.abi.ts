//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module DefaultOrganization {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string, commons_collections_MappingsLib_sol_MappingsLib: string, commons_utils_ArrayUtilsLib_sol_ArrayUtilsLib: string): Promise<string> {
        let bytecode = "6080604052600180600060016000806301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508260016000600381106200006a57fe5b602091828204019190066101000a81548160ff021916908360ff16021790555081600180600381106200009957fe5b602091828204019190066101000a81548160ff021916908360ff160217905550806001600260038110620000c957fe5b602091828204019190066101000a81548160ff021916908360ff1602179055506200014060405160200180807f676574417274696661637456657273696f6e28290000000000000000000000008152506014019050604051602081830303815290604052805190602001206200014960201b60201c565b50505062000236565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620001ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062003f20602f913960400191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b613cda80620002466000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637e04758511610125578063b68b5f6c116100ad578063ea415cfd1161007c578063ea415cfd14610a13578063f06e141e14610a81578063f085f6dd14610ac3578063fbe620a714610ae7578063ffcc7bbf14610b2d57610211565b8063b68b5f6c146108cd578063ddc5dd5114610933578063e10533c614610999578063e94e9888146109f557610211565b806398575188116100f4578063985751881461072c578063a224cee714610788578063aaa8282b14610801578063b2e30ddf14610843578063b646c1941461088957610211565b80637e0475851461061257806381b051991461067857806389c9e2ef146106f057806394d42fc21461070e57610211565b806357e0ebca116101a85780636cf4c88f116101775780636cf4c88f146104cd5780636e40c2ed14610511578063756b2e6c1461052f5780637589adb71461057557806378bc0b0d1461059957610211565b806357e0ebca146103f15780635c030138146104155780636371e7b41461046d578063669e9e23146104af57610211565b80633e21a8d9116101e45780633e21a8d91461033b578063421b2d8b146103595780634374fcf8146103b55780634d009288146103d357610211565b806301ffc9a71461021657806320feabba1461027b57806335e07244146102c15780633657db17146102df575b600080fd5b6102616004803603602081101561022c57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610b9b565b604051808215151515815260200191505060405180910390f35b6102a76004803603602081101561029157600080fd5b8101908080359060200190929190505050610c02565b604051808215151515815260200191505060405180910390f35b6102c9610c32565b6040518082815260200191505060405180910390f35b6102e7610c3f565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610343610d19565b6040518082815260200191505060405180910390f35b61039b6004803603602081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d3d565b604051808215151515815260200191505060405180910390f35b6103bd610fd3565b6040518082815260200191505060405180910390f35b6103db610ff7565b6040518082815260200191505060405180910390f35b6103f9611007565b604051808260ff1660ff16815260200191505060405180910390f35b6104576004803603602081101561042b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611032565b6040518082815260200191505060405180910390f35b6104996004803603602081101561048357600080fd5b810190808035906020019092919050505061112e565b6040518082815260200191505060405180910390f35b6104b7611157565b6040518082815260200191505060405180910390f35b61050f600480360360208110156104e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117b565b005b6105196118e3565b6040518082815260200191505060405180910390f35b610537611907565b6040518082600360200280838360005b83811015610562578082015181840152602081019050610547565b5050505090500191505060405180910390f35b61057d611978565b604051808260ff1660ff16815260200191505060405180910390f35b6105fc600480360360608110156105af57600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f82011690508083019250505050505091929192905050506119a2565b6040518082815260200191505060405180910390f35b61065e6004803603604081101561062857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a18565b604051808215151515815260200191505060405180910390f35b6106ae6004803603604081101561068e57600080fd5b810190808035906020019092919080359060200190929190505050611cad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106f8611d3a565b6040518082815260200191505060405180910390f35b610716611d47565b6040518082815260200191505060405180910390f35b61076e6004803603602081101561074257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d6b565b604051808215151515815260200191505060405180910390f35b6107ff6004803603602081101561079e57600080fd5b81019080803590602001906401000000008111156107bb57600080fd5b8201836020820111156107cd57600080fd5b803590602001918460208302840111640100000000831117156107ef57600080fd5b9091929391929390505050612018565b005b61082d6004803603602081101561081757600080fd5b8101908080359060200190929190505050612467565b6040518082815260200191505060405180910390f35b61086f6004803603602081101561085957600080fd5b810190808035906020019092919050505061248b565b604051808215151515815260200191505060405180910390f35b6108cb6004803603602081101561089f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061261d565b005b610919600480360360408110156108e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612cf9565b604051808215151515815260200191505060405180910390f35b61097f6004803603604081101561094957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613000565b604051808215151515815260200191505060405180910390f35b6109a1613202565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6109fd61324c565b6040518082815260200191505060405180910390f35b610a3f60048036036020811015610a2957600080fd5b810190808035906020019092919050505061325c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610aad60048036036020811015610a9757600080fd5b81019080803590602001909291905050506132b4565b6040518082815260200191505060405180910390f35b610acb6132dd565b604051808260ff1660ff16815260200191505060405180910390f35b610b1360048036036020811015610afd57600080fd5b8101908080359060200190929190505050613308565b604051808215151515815260200191505060405180910390f35b610b5960048036036020811015610b4357600080fd5b81019080803590602001909291905050506134a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006003600101600083815260200190815260200160002060030160009054906101000a900460ff169050919050565b6000600780549050905090565b60405160200180807f617574686f72697a655573657228616464726573732c62797465733332290000815250601e0190506040516020818303038152906040528051906020012060405160200180807f72656d6f7665557365722861646472657373290000000000000000000000000081525060130190506040516020818303038152906040528051906020012060405160200180807f6164645573657228616464726573732900000000000000000000000000000000815250601001905060405160208183030381529060405280519060200120181881565b7f414e3a2f2f6f7267616e697a6174696f6e732f6465706172746d656e7473000081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d7c5760009050610fce565b600873__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610e0257600080fd5b505af4158015610e16573d6000803e3d6000fd5b505050506040513d6020811015610e2c57600080fd5b8101908080519060200190929190505050610fc957600873__$5e3d4bda46c81e962f48c99e99f980d175$__633d4f1a2a90918460016040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060206040518083038186803b158015610ed457600080fd5b505af4158015610ee8573d6000803e3d6000fd5b505050506040513d6020811015610efe57600080fd5b8101908080519060200190929190505050507f414e3a2f2f6f7267616e697a6174696f6e732f757365727300000000000000007fb6505e14cf9e15754afd2220d62daf87943177c016bd4c031c6ee578e02242263084604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a25b600190505b919050565b7f414e3a2f2f6465706172746d656e74732f75736572730000000000000000000081565b6000600860010180549050905090565b6000600160006003811061101757fe5b602091828204019190069054906101000a900460ff16905090565b60006111276001600380602002604051908101604052809291908260038015611096576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841161105f5790505b50505050508373ffffffffffffffffffffffffffffffffffffffff1663756b2e6c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250606081101561111a57600080fd5b810190809190505061356d565b9050919050565b600060036001016000838152602001908152602001600020600101600101805490509050919050565b7f414e3a2f2f6f7267616e697a6174696f6e732f617070726f766572730000000081565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600780548060200260200160405190810160405280929190818152602001828054801561121757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111cd575b505050505073__$6c578ef14ebe2070bb2319c6842ae291e1$__633da80d669091336040518363ffffffff1660e01b815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b838110156112bd5780820151818401526020810190506112a2565b50505050905001935050505060206040518083038186803b1580156112e157600080fd5b505af41580156112f5573d6000803e3d6000fd5b505050506040513d602081101561130b57600080fd5b810190808051906020019092919050505015611325613620565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101561138657808201518184015260208101905061136b565b50505050905090810190601f1680156113b35780820380516001836020036101000a031916815260200191505b5084810383526027815260200180613c7f602791396040018481038252603d815260200180613c42603d91396040019550505050505060006040518083038186803b15801561140157600080fd5b505af4158015611415573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60016007805490501461144461365d565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156114a557808201518184015260208101905061148a565b50505050905090810190601f1680156114d25780820380516001836020036101000a031916815260200191505b5084810383526022815260200180613ba3602291396040018481038252602a815260200180613b54602a91396040019550505050505060006040518083038186803b15801561152057600080fd5b505af4158015611534573d6000803e3d6000fd5b50505050600080600091505b6007805490508210156115cd578273ffffffffffffffffffffffffffffffffffffffff166007838154811061157157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156115c0578190506115cd565b8180600101925050611540565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60008314801561165a57508473ffffffffffffffffffffffffffffffffffffffff166007848154811061161657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b61166261369a565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156116c35780820151818401526020810190506116a8565b50505050905090810190601f1680156116f05780820380516001836020036101000a031916815260200191505b5084810383526022815260200180613ba3602291396040018481038252602b815260200180613bc5602b91396040019550505050505060006040518083038186803b15801561173e57600080fd5b505af4158015611752573d6000803e3d6000fd5b505050508091505b600160078054905003821015611807576007600183018154811061177a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600783815481106117b257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818060010192505061175a565b600780548091906001900361181c9190613938565b507f414e3a2f2f6f7267616e697a6174696f6e732f617070726f76657273000000007f2cf132ce6c54465a99f715280ce5c867d610d70c4ac532ad30994de8f33dfa5860003086604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a2505050565b7f414e3a2f2f6f7267616e697a6174696f6e2d6163636f756e747300000000000081565b61190f613964565b600160038060200260405190810160405280929190826003801561196e576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116119375790505b5050505050905090565b60006001806003811061198757fe5b602091828204019190069054906101000a900460ff16905090565b6000611a116001600380602002604051908101604052809291908260038015611a06576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116119cf5790505b50505050508361356d565b9050919050565b60006003600101600083815260200190815260200160002060010173__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611ab757600080fd5b505af4158015611acb573d6000803e3d6000fd5b505050506040513d6020811015611ae157600080fd5b810190808051906020019092919050505015611ca2576003600101600083815260200190815260200160002060010173__$5e3d4bda46c81e962f48c99e99f980d175$__635345ad6b9091856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611b9457600080fd5b505af4158015611ba8573d6000803e3d6000fd5b505050506040513d6020811015611bbe57600080fd5b8101908080519060200190929190505050507f414e3a2f2f6465706172746d656e74732f7573657273000000000000000000007f08576bd45480f28cba07c5ddf514141424b64ce76355d6847109def4ca48090b6000308587604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a260019050611ca7565b600090505b92915050565b60006003600101600084815260200190815260200160002060010160010180549050821015611d2f57600360010160008481526020019081526020016000206001016001018281548110611cfd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611d34565b600090505b92915050565b6000600780549050905090565b7f414e3a2f2f6f7267616e697a6174696f6e732f7573657273000000000000000081565b600080600090505b600360020180549050811015611dbb57600060036002018281548110611d9557fe5b90600052602060002001549050611dac8482611a18565b50508080600101915050611d73565b50600873__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611e4257600080fd5b505af4158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b81019080805190602001909291905050501561200e57600873__$5e3d4bda46c81e962f48c99e99f980d175$__635345ad6b9091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611f0857600080fd5b505af4158015611f1c573d6000803e3d6000fd5b505050506040513d6020811015611f3257600080fd5b8101908080519060200190929190505050507f414e3a2f2f6f7267616e697a6174696f6e732f757365727300000000000000007fb217f8ae99b8b240fc28a5281349f7a1d4d460ee3dc7c6d2ca14a57508f704d360003085604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a260019050612013565b600090505b919050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600260009054906101000a900460ff1661204a6136d7565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156120ab578082015181840152602081019050612090565b50505050905090810190601f1680156120d85780820380516001836020036101000a031916815260200191505b508481038352602a815260200180613b01602a913960400184810382526029815260200180613b2b602991396040019550505050505060006040518083038186803b15801561212657600080fd5b505af415801561213a573d6000803e3d6000fd5b5050505060008282905014156121b55760073390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506121c8565b8181600791906121c6929190613986565b505b6122a760405160200180807f617574686f72697a655573657228616464726573732c62797465733332290000815250601e0190506040516020818303038152906040528051906020012060405160200180807f72656d6f7665557365722861646472657373290000000000000000000000000081525060130190506040516020818303038152906040528051906020012060405160200180807f61646455736572286164647265737329000000000000000000000000000000008152506010019050604051602081830303815290604052805190602001201818613714565b7f414e3a2f2f6f7267616e697a6174696f6e2d6163636f756e74730000000000007f4ce3ce68068294254541be9ea3afed3606dd2f69eb2193879759452cb8ef56ee30600780549050604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a260008090505b600780549050811015612447577f414e3a2f2f6f7267616e697a6174696f6e732f617070726f76657273000000007f2376739f82c5284bdedea511cf336c01d8988260cd7a12a37f1af592e9e695e2306007848154811061239b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a2808060010191505061233e565b506001600260006101000a81548160ff0219169083151502179055505050565b60006003600201828154811061247957fe5b90600052602060002001549050919050565b60006003600101600083815260200190815260200160002060030160009054906101000a900460ff16156124c25760009050612618565b60016003600201839080600181540180825580915050906001820390600052602060002001600090919290919091505503600360010160008481526020019081526020016000206004018190555081600360010160008481526020019081526020016000206000018190555060016003600101600084815260200190815260200160002060030160006101000a81548160ff0219169083151502179055507f414e3a2f2f6f7267616e697a6174696f6e732f6465706172746d656e747300007f4aa55961b303da16fc3bfd04cb7dfd9cab19a33c009b69c88f26aed05704ae1e30846003600101600087815260200190815260200160002060010160010180549050604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a2600190505b919050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60078054806020026020016040519081016040528092919081815260200182805480156126b957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161266f575b505050505073__$6c578ef14ebe2070bb2319c6842ae291e1$__633da80d669091336040518363ffffffff1660e01b815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561275f578082015181840152602081019050612744565b50505050905001935050505060206040518083038186803b15801561278357600080fd5b505af4158015612797573d6000803e3d6000fd5b505050506040513d60208110156127ad57600080fd5b8101908080519060200190929190505050156127c7613620565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101561282857808201518184015260208101905061280d565b50505050905090810190601f1680156128555780820380516001836020036101000a031916815260200191505b5084810383526027815260200180613c7f602791396040018481038252603d815260200180613c42603d91396040019550505050505060006040518083038186803b1580156128a357600080fd5b505af41580156128b7573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461290d6137ff565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101561296e578082015181840152602081019050612953565b50505050905090810190601f16801561299b5780820380516001836020036101000a031916815260200191505b508481038352601f8152602001807f44656661756c744f7267616e697a6174696f6e2e616464417070726f7665720081525060200184810382526025815260200180613b7e602591396040019550505050505060006040518083038186803b158015612a0657600080fd5b505af4158015612a1a573d6000803e3d6000fd5b5050505060008090505b600780549050811015612bd75773__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef8373ffffffffffffffffffffffffffffffffffffffff1660078481548110612a6f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ab961383c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015612b1a578082015181840152602081019050612aff565b50505050905090810190601f168015612b475780820380516001836020036101000a031916815260200191505b508481038352601f8152602001807f44656661756c744f7267616e697a6174696f6e2e616464417070726f7665720081525060200184810382526023815260200180613bf0602391396040019550505050505060006040518083038186803b158015612bb257600080fd5b505af4158015612bc6573d6000803e3d6000fd5b505050508080600101915050612a24565b5060078190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f414e3a2f2f6f7267616e697a6174696f6e732f617070726f76657273000000007f2376739f82c5284bdedea511cf336c01d8988260cd7a12a37f1af592e9e695e23083604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a250565b60006003600101600083815260200190815260200160002060030160009054906101000a900460ff161580612d5a5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15612d685760009050612ffa565b612d7183610d3d565b506003600101600083815260200190815260200160002060010173__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612e0f57600080fd5b505af4158015612e23573d6000803e3d6000fd5b505050506040513d6020811015612e3957600080fd5b8101908080519060200190929190505050612ff5576003600101600083815260200190815260200160002060010173__$5e3d4bda46c81e962f48c99e99f980d175$__633d4f1a2a90918560016040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060206040518083038186803b158015612ef857600080fd5b505af4158015612f0c573d6000803e3d6000fd5b505050506040513d6020811015612f2257600080fd5b8101908080519060200190929190505050507f414e3a2f2f6465706172746d656e74732f7573657273000000000000000000007f6bb888167384334fdaf5ee77aa1cec98e9adedeef5da14d4c1b424d5637e0430308486604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a25b600190505b92915050565b60007f454d5054595f53434f50450000000000000000000000000000000000000000008214156130f257600873__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156130b057600080fd5b505af41580156130c4573d6000803e3d6000fd5b505050506040513d60208110156130da57600080fd5b810190808051906020019092919050505090506131fc565b6003600101600083815260200190815260200160002060030160009054906101000a900460ff1680156131f957506003600101600083815260200190815260200160002060010173__$5e3d4bda46c81e962f48c99e99f980d175$__63f755018d9091856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156131bd57600080fd5b505af41580156131d1573d6000803e3d6000fd5b505050506040513d60208110156131e757600080fd5b81019080805190602001909291905050505b90505b92915050565b60405160200180807f676574417274696661637456657273696f6e282900000000000000000000000081525060140190506040516020818303038152906040528051906020012081565b6000600360020180549050905090565b60006007805490508210156132aa576007828154811061327857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506132af565b600090505b919050565b600060036001016000838152602001908152602001600020600101600101805490509050919050565b600060016002600381106132ed57fe5b602091828204019190069054906101000a900460ff16905090565b60006003600101600083815260200190815260200160002060030160009054906101000a900460ff161561349b576000600360010160008481526020019081526020016000206004015490506000613364600360020183613879565b9050600081146133a657600360010160008581526020019081526020016000206004015460036001016000838152602001908152602001600020600401819055505b600360010160008581526020019081526020016000206000808201600090556001820160006001820160006133db9190613a26565b50506003820160006101000a81549060ff0219169055600482016000905550507f414e3a2f2f6f7267616e697a6174696f6e732f6465706172746d656e747300007fe665ba9c1a1db43ec50a686024b19d956ff6283b84b03450815011382610b87260003087604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a26001925050506134a0565b600090505b919050565b6000600860010180549050821015613563576000600873__$5e3d4bda46c81e962f48c99e99f980d175$__6380ed56bd9091856040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b15801561351257600080fd5b505af4158015613526573d6000803e3d6000fd5b505050506040513d604081101561353c57600080fd5b81019080805190602001909291908051906020019092919050505091505080915050613568565b600090505b919050565b600061359b8360006003811061357f57fe5b60200201518360006003811061359157fe5b60200201516138de565b9050600081146135ad5780905061361a565b6135d9836001600381106135bd57fe5b6020020151836001600381106135cf57fe5b60200201516138de565b9050600081146135eb5780905061361a565b613617836002600381106135fb57fe5b60200201518360026003811061360d57fe5b60200201516138de565b90505b92915050565b60606040518060400160405280600681526020017f4552523430330000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523630310000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523430340000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415613793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613c13602f913960400191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523430390000000000000000000000000000000000000000000000000000815250905090565b600080600184805490500390508083146138c25783818154811061389957fe5b90600052602060002001549150818484815481106138b357fe5b90600052602060002001819055505b838054809190600190036138d69190613a47565b505092915050565b60008260ff168260ff1614156138f75760009050613932565b8260ff168260ff16101561392d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050613932565b600190505b92915050565b81548183558181111561395f5781836000526020600020918201910161395e9190613a73565b5b505050565b6040518060600160405280600390602082028038833980820191505090505090565b828054828255906000526020600020908101928215613a15579160200282015b82811115613a1457823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906139a6565b5b509050613a229190613a98565b5090565b5080546000825590600052602060002090810190613a449190613a73565b50565b815481835581811115613a6e57818360005260206000209182019101613a6d9190613adb565b5b505050565b613a9591905b80821115613a91576000816000905550600101613a79565b5090565b90565b613ad891905b80821115613ad457600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613a9e565b5090565b90565b613afd91905b80821115613af9576000816000905550600101613ae1565b5090565b9056fe416273747261637444656c65676174655461726765742e7072655f706f73745f696e697469616c697a6554686520636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a65644f7267616e697a6174696f6e206d7573742068617665206174206c65617374203120617070726f76657243616e6e6f742061646420656d707479206164647265737320746f20617070726f7665727344656661756c744f7267616e697a6174696f6e2e72656d6f7665417070726f76657241646472657373206e6f7420666f756e6420696e206f7267616e697a6174696f6e20617070726f766572734164647265737320616c72656164792065786973747320696e20617070726f76657273466f7262696464656e2076616c7565203078666666666666666620666f722045524331363520696e746572666163656d73672e73656e64657220697374206e6f742061207265636f676e697a656420617070726f766572206f662074686973206f7267616e697a6174696f6e44656661756c744f7267616e697a6174696f6e2e7072655f6f6e6c794279417070726f76657273a265627a7a723158203fe978ab60e25dcde738b8eb560bc4f31287fbab3e59bad2ce28081f7c78b1c364736f6c634300050c0032466f7262696464656e2076616c7565203078666666666666666620666f722045524331363520696e74657266616365";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        bytecode = Replace(bytecode, "$5e3d4bda46c81e962f48c99e99f980d175$", commons_collections_MappingsLib_sol_MappingsLib);
        bytecode = Replace(bytecode, "$6c578ef14ebe2070bb2319c6842ae291e1$", commons_utils_ArrayUtilsLib_sol_ArrayUtilsLib);
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogDepartmentUserRemoval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogDepartmentUserRemoval", this.address, callback); }
        LogDepartmentUserUpdate(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogDepartmentUserUpdate", this.address, callback); }
        LogOrganizationApproverRemoval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationApproverRemoval", this.address, callback); }
        LogOrganizationApproverUpdate(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationApproverUpdate", this.address, callback); }
        LogOrganizationCreation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationCreation", this.address, callback); }
        LogOrganizationDepartmentRemoval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationDepartmentRemoval", this.address, callback); }
        LogOrganizationDepartmentUpdate(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationDepartmentUpdate", this.address, callback); }
        LogOrganizationUserRemoval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationUserRemoval", this.address, callback); }
        LogOrganizationUserUpdate(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOrganizationUserUpdate", this.address, callback); }
        ERC165_ID_Organization() {
            const data = Encode(this.client).ERC165_ID_Organization();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_Organization();
            });
        }
        ERC165_ID_VERSIONED_ARTIFACT() {
            const data = Encode(this.client).ERC165_ID_VERSIONED_ARTIFACT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_VERSIONED_ARTIFACT();
            });
        }
        EVENT_ID_DEPARTMENT_USERS() {
            const data = Encode(this.client).EVENT_ID_DEPARTMENT_USERS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_DEPARTMENT_USERS();
            });
        }
        EVENT_ID_ORGANIZATION_ACCOUNTS() {
            const data = Encode(this.client).EVENT_ID_ORGANIZATION_ACCOUNTS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_ORGANIZATION_ACCOUNTS();
            });
        }
        EVENT_ID_ORGANIZATION_APPROVERS() {
            const data = Encode(this.client).EVENT_ID_ORGANIZATION_APPROVERS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_ORGANIZATION_APPROVERS();
            });
        }
        EVENT_ID_ORGANIZATION_DEPARTMENTS() {
            const data = Encode(this.client).EVENT_ID_ORGANIZATION_DEPARTMENTS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_ORGANIZATION_DEPARTMENTS();
            });
        }
        EVENT_ID_ORGANIZATION_USERS() {
            const data = Encode(this.client).EVENT_ID_ORGANIZATION_USERS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_ORGANIZATION_USERS();
            });
        }
        addApprover(_userAccount: string) {
            const data = Encode(this.client).addApprover(_userAccount);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addApprover();
            });
        }
        addDepartment(_id: Buffer) {
            const data = Encode(this.client).addDepartment(_id);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addDepartment();
            });
        }
        addUser(_userAccount: string) {
            const data = Encode(this.client).addUser(_userAccount);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addUser();
            });
        }
        addUserToDepartment(_userAccount: string, _department: Buffer) {
            const data = Encode(this.client).addUserToDepartment(_userAccount, _department);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addUserToDepartment();
            });
        }
        authorizeUser(_userAccount: string, _department: Buffer) {
            const data = Encode(this.client).authorizeUser(_userAccount, _department);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).authorizeUser();
            });
        }
        compareArtifactVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareArtifactVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareArtifactVersion();
            });
        }
        departmentExists(_id: Buffer) {
            const data = Encode(this.client).departmentExists(_id);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).departmentExists();
            });
        }
        getApproverAtIndex(_pos: number) {
            const data = Encode(this.client).getApproverAtIndex(_pos);
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getApproverAtIndex();
            });
        }
        getArtifactVersion() {
            const data = Encode(this.client).getArtifactVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersion();
            });
        }
        getArtifactVersionMajor() {
            const data = Encode(this.client).getArtifactVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMajor();
            });
        }
        getArtifactVersionMinor() {
            const data = Encode(this.client).getArtifactVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMinor();
            });
        }
        getArtifactVersionPatch() {
            const data = Encode(this.client).getArtifactVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionPatch();
            });
        }
        getDepartmentAtIndex(_index: number) {
            const data = Encode(this.client).getDepartmentAtIndex(_index);
            return Call<Tx, {
                id: Buffer;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getDepartmentAtIndex();
            });
        }
        getDepartmentData(_id: Buffer) {
            const data = Encode(this.client).getDepartmentData(_id);
            return Call<Tx, {
                userCount: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getDepartmentData();
            });
        }
        getDepartmentUserAtIndex(_depId: Buffer, _index: number) {
            const data = Encode(this.client).getDepartmentUserAtIndex(_depId, _index);
            return Call<Tx, {
                userAccount: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getDepartmentUserAtIndex();
            });
        }
        getNumberOfApprovers() {
            const data = Encode(this.client).getNumberOfApprovers();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfApprovers();
            });
        }
        getNumberOfDepartmentUsers(_depId: Buffer) {
            const data = Encode(this.client).getNumberOfDepartmentUsers(_depId);
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfDepartmentUsers();
            });
        }
        getNumberOfDepartments() {
            const data = Encode(this.client).getNumberOfDepartments();
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfDepartments();
            });
        }
        getNumberOfUsers() {
            const data = Encode(this.client).getNumberOfUsers();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfUsers();
            });
        }
        getOrganizationDetails() {
            const data = Encode(this.client).getOrganizationDetails();
            return Call<Tx, {
                numberOfApprovers: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getOrganizationDetails();
            });
        }
        getUserAtIndex(_pos: number) {
            const data = Encode(this.client).getUserAtIndex(_pos);
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getUserAtIndex();
            });
        }
        initialize(_initialApprovers: string[]) {
            const data = Encode(this.client).initialize(_initialApprovers);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).initialize();
            });
        }
        removeApprover(_userAccount: string) {
            const data = Encode(this.client).removeApprover(_userAccount);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).removeApprover();
            });
        }
        removeDepartment(_depId: Buffer) {
            const data = Encode(this.client).removeDepartment(_depId);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).removeDepartment();
            });
        }
        removeUser(_userAccount: string) {
            const data = Encode(this.client).removeUser(_userAccount);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).removeUser();
            });
        }
        removeUserFromDepartment(_userAccount: string, _depId: Buffer) {
            const data = Encode(this.client).removeUserFromDepartment(_userAccount, _depId);
            return Call<Tx, [boolean]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).removeUserFromDepartment();
            });
        }
        supportsInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ERC165_ID_Organization: () => { return client.encode("3657DB17", []); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return client.encode("E10533C6", []); },
        EVENT_ID_DEPARTMENT_USERS: () => { return client.encode("4374FCF8", []); },
        EVENT_ID_ORGANIZATION_ACCOUNTS: () => { return client.encode("6E40C2ED", []); },
        EVENT_ID_ORGANIZATION_APPROVERS: () => { return client.encode("669E9E23", []); },
        EVENT_ID_ORGANIZATION_DEPARTMENTS: () => { return client.encode("3E21A8D9", []); },
        EVENT_ID_ORGANIZATION_USERS: () => { return client.encode("94D42FC2", []); },
        addApprover: (_userAccount: string) => { return client.encode("B646C194", ["address"], _userAccount); },
        addDepartment: (_id: Buffer) => { return client.encode("B2E30DDF", ["bytes32"], _id); },
        addUser: (_userAccount: string) => { return client.encode("421B2D8B", ["address"], _userAccount); },
        addUserToDepartment: (_userAccount: string, _department: Buffer) => { return client.encode("B68B5F6C", ["address", "bytes32"], _userAccount, _department); },
        authorizeUser: (_userAccount: string, _department: Buffer) => { return client.encode("DDC5DD51", ["address", "bytes32"], _userAccount, _department); },
        compareArtifactVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("5C030138", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("78BC0B0D", ["uint8[3]"], _version);
        },
        departmentExists: (_id: Buffer) => { return client.encode("20FEABBA", ["bytes32"], _id); },
        getApproverAtIndex: (_pos: number) => { return client.encode("EA415CFD", ["uint256"], _pos); },
        getArtifactVersion: () => { return client.encode("756B2E6C", []); },
        getArtifactVersionMajor: () => { return client.encode("57E0EBCA", []); },
        getArtifactVersionMinor: () => { return client.encode("7589ADB7", []); },
        getArtifactVersionPatch: () => { return client.encode("F085F6DD", []); },
        getDepartmentAtIndex: (_index: number) => { return client.encode("AAA8282B", ["uint256"], _index); },
        getDepartmentData: (_id: Buffer) => { return client.encode("F06E141E", ["bytes32"], _id); },
        getDepartmentUserAtIndex: (_depId: Buffer, _index: number) => { return client.encode("81B05199", ["bytes32", "uint256"], _depId, _index); },
        getNumberOfApprovers: () => { return client.encode("35E07244", []); },
        getNumberOfDepartmentUsers: (_depId: Buffer) => { return client.encode("6371E7B4", ["bytes32"], _depId); },
        getNumberOfDepartments: () => { return client.encode("E94E9888", []); },
        getNumberOfUsers: () => { return client.encode("4D009288", []); },
        getOrganizationDetails: () => { return client.encode("89C9E2EF", []); },
        getUserAtIndex: (_pos: number) => { return client.encode("FFCC7BBF", ["uint256"], _pos); },
        initialize: (_initialApprovers: string[]) => { return client.encode("A224CEE7", ["address[]"], _initialApprovers); },
        removeApprover: (_userAccount: string) => { return client.encode("6CF4C88F", ["address"], _userAccount); },
        removeDepartment: (_depId: Buffer) => { return client.encode("FBE620A7", ["bytes32"], _depId); },
        removeUser: (_userAccount: string) => { return client.encode("98575188", ["address"], _userAccount); },
        removeUserFromDepartment: (_userAccount: string, _depId: Buffer) => { return client.encode("7E047585", ["address", "bytes32"], _userAccount, _depId); },
        supportsInterface: (_interfaceId: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ERC165_ID_Organization: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        EVENT_ID_DEPARTMENT_USERS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_ORGANIZATION_ACCOUNTS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_ORGANIZATION_APPROVERS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_ORGANIZATION_DEPARTMENTS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_ORGANIZATION_USERS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        addApprover: (): void => { return; },
        addDepartment: (): [boolean] => { return client.decode(data, ["bool"]); },
        addUser: (): [boolean] => { return client.decode(data, ["bool"]); },
        addUserToDepartment: (): [boolean] => { return client.decode(data, ["bool"]); },
        authorizeUser: (): [boolean] => { return client.decode(data, ["bool"]); },
        compareArtifactVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        departmentExists: (): [boolean] => { return client.decode(data, ["bool"]); },
        getApproverAtIndex: (): [string] => { return client.decode(data, ["address"]); },
        getArtifactVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getArtifactVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        getDepartmentAtIndex: (): {
            id: Buffer;
        } => {
            const [id] = client.decode(data, ["bytes32"]);
            return { id: id };
        },
        getDepartmentData: (): {
            userCount: number;
        } => {
            const [userCount] = client.decode(data, ["uint256"]);
            return { userCount: userCount };
        },
        getDepartmentUserAtIndex: (): {
            userAccount: string;
        } => {
            const [userAccount] = client.decode(data, ["address"]);
            return { userAccount: userAccount };
        },
        getNumberOfApprovers: (): [number] => { return client.decode(data, ["uint256"]); },
        getNumberOfDepartmentUsers: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getNumberOfDepartments: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getNumberOfUsers: (): [number] => { return client.decode(data, ["uint256"]); },
        getOrganizationDetails: (): {
            numberOfApprovers: number;
        } => {
            const [numberOfApprovers] = client.decode(data, ["uint256"]);
            return { numberOfApprovers: numberOfApprovers };
        },
        getUserAtIndex: (): [string] => { return client.decode(data, ["address"]); },
        initialize: (): void => { return; },
        removeApprover: (): void => { return; },
        removeDepartment: (): [boolean] => { return client.decode(data, ["bool"]); },
        removeUser: (): [boolean] => { return client.decode(data, ["bool"]); },
        removeUserFromDepartment: (): [boolean] => { return client.decode(data, ["bool"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); }
    }; };
}